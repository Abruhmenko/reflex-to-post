PROGRAM CONTROL_OF_CRISTALL_CREASER

VAR CONSTANT
	MAKSIMALQNOE_DTSELOE : LINT := 16#7FFFFFFF;
	MAKSIMALQNOE_TSELOE : LINT := 16#7FFF;
	MAKSIMALQNOE_KTSELOE : LINT := 16#7F;
	T0_1 : LINT := 0;
	ODNA_SEKUNDA : LINT := 10;
	DVE_SEKUNDY : LINT := 2 * ODNA_SEKUNDA;
	TRI_SEKUNDY : LINT := 3 * ODNA_SEKUNDA;
	PYATQ_SEKUND : LINT := 5 * ODNA_SEKUNDA;
	DESYATQ_SEKUND : LINT := 10 * ODNA_SEKUNDA;
	DVADTSATQ_SEKUND : LINT := 20 * ODNA_SEKUNDA;
	TRIDTSATQ_SEKUND : LINT := 30 * ODNA_SEKUNDA;
	POL_MINUTY : LINT := 30 * ODNA_SEKUNDA;
	ODNA_MINUTA : LINT := 60 * ODNA_SEKUNDA;
	DVE_MINUTY : LINT := 2 * ODNA_MINUTA;
	TRI_MINUTY : LINT := 3 * ODNA_MINUTA;
	PYATQ_MINUT : LINT := 5 * ODNA_MINUTA;
	DESYATQ_MINUT : LINT := 10 * ODNA_MINUTA;
	PYATNADTSATQ_MINUT : LINT := 15 * ODNA_MINUTA;
	DVADTSATQ_MINUT : LINT := 20 * ODNA_MINUTA;
	TRIDTSATQ_MINUT : LINT := 30 * ODNA_MINUTA;
	ODIN_CHAS : LINT := 60 * ODNA_MINUTA;
	DVA_CHASA : LINT := 72000;
	TRI_CHASA : LINT := 108000;
	NULL : LINT := 0;
	VKL : LINT := 1;
	VYKL : LINT := 0;
	ESTQ_STYKOVKA : LINT := 1;
	NET_STYKOVKI : LINT := 0;
	ESTQ_VODA : LINT := 0;
	NET_VODY : LINT := 1;
	OTKR : LINT := 1;
	ZAKR : LINT := 0;
	SREDNEE : LINT := 2;
	SRABOTAL : LINT := 1;
	NE_SRABOTAL : LINT := 0;
	NEUD : LINT := 0;
	UDOVL : LINT := 1;
	OTL : LINT := 2;
	STABILIZATSIYA_PO_MOSHNOSTI : LINT := 0;
	STABILIZATSIYA_PO_TEMPERATURE : LINT := 1;
	PO_TERMINATORAM : LINT := 0;
	NEPRERYVNO : LINT := 1;
	OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA : LREAL := 0.2;
	OTZHIG_DAVLENIE_PERED_OTZHIGOM : LREAL := 0.05;
	OTZHIG_DELQTA_W_OTZHIGA : LREAL := 100.0;
	OTZHIG_DELQTA_T_OTZHIGA : LINT := PYATQ_MINUT;
	OTZHIG_DAVLENIE_OTZHIGA_MAKS : LREAL := 0.1;
	OTZHIG_DAVLENIE_OTZHIGA_MIN : LREAL := 0.07;
	OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA : LREAL := 100000.0;
	OTZHIG_VREMYA_OTZHIGA : LINT := ODIN_CHAS;
	OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN : LREAL := 100.0;
	OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN : LINT := ODNA_MINUTA;
	IPN_NULQ : LINT := 0;
	IPN_PTD : LINT := 1;
	IPN_IP2K : LINT := 2;
	IP2K_CHISLO_KONTUROV_NEIZVESTNO : LINT := 0;
	IP2K_S_ODNIM_KONTUROM : LINT := 1;
	IP2K_S_DVUMYA_KONTURAMI : LINT := 2;
	MAK_DOP_TEMP_NAGREVATELYA : LREAL := 800.0;
	T_BAZOVOE_DTN : LREAL := 1700.0;
	T_BAZOVOE_DTR : LREAL := 1420.0;
	N_IZMERENIJ_TN_DLYA_RASCHETA_POPRAVKI_STAB : LINT := ODNA_MINUTA;
	DAVLENIE_35MMRTST : LREAL := 35.0;
	DAVLENIE_40MMRTST : LREAL := 40.0;
	DAVLENIE_45MMRTST : LREAL := 45.0;
	KONTROLQNOE_DAVLENIE_45 : LREAL := 30.0;
	KONTROLQNOE_DAVLENIE_40 : LREAL := 40.0;
	ATMOSFERA : LREAL := 700.0;
	VREMYA_RABOTY_AGR_VAKUUMNOGO : LINT := 6000;
	GRUBAYA_OKRESTNOSTQ_KONTSEVIKA : LREAL := 5.0;
	POGRESHNOSTQ_POZITSIONIROVANIYA_ZR : LREAL := 0.2;
	KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZR : LREAL := 6.0;
	POGRESHNOSTQ_POZITSIONIROVANIYA_ZU : LREAL := 1.5;
	KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZU : LREAL := 100.0;
	POGRESHNOSTQ_POZITSIONIROVANIYA_ZV : LREAL := 0.2;
	KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZV : LREAL := 5.0;
	POGRESHNOSTQ_POZITSIONIROVANIYA_TR : LREAL := 0.2;
	KONTROLQNAYA_SKOROSTQ_OSTANOVA_TR : LREAL := 6.0;
	POGRESHNOSTQ_POZITSIONIROVANIYA_TU : LREAL := 1.5;
	KONTROLQNAYA_SKOROSTQ_OSTANOVA_TU : LREAL := 100.0;
	POGRESHNOSTQ_POZITSIONIROVANIYA_TV : LREAL := 0.2;
	KONTROLQNAYA_SKOROSTQ_OSTANOVA_TV : LREAL := 5.0;
	GRUBAYA_SKOROSTQ_ZATRAVKI : LREAL := 100.0;
	TOCHNAYA_SKOROSTQ_ZATRAVKI : LREAL := 1.0;
	MAKSIMALQNYJ_VYLET_ZATRAVKI : LREAL := 200.0;
	MAKSIMALQNAYA_MASSA_ZATRAVKI_DP : LREAL := 0.5;
	GRUBAYA_SKOROSTQ_TIGLYA : LREAL := 100.0;
	CHISLO_TOCHEK_TIGLYA : LINT := 100;
	VREMYA_ZADERZHKI_NA_SVYAZQ : LREAL := 1.0 / 60.0;
	PERIOD_TSIKLA : LREAL := 0.1 / 60.0;
	MAKSIMALQNOE_USKORENIE_Vz : LREAL := 45600.0;
	MAKSIMALQNAYA_POPRAVKA_Vz : LREAL := MAKSIMALQNOE_USKORENIE_Vz * PERIOD_TSIKLA;
	MAKSIMALQNOE_USKORENIE_Wz : LREAL := 12.0;
	MAKSIMALQNAYA_POPRAVKA_Wz : LREAL := MAKSIMALQNOE_USKORENIE_Wz * PERIOD_TSIKLA;
	MAKSIMALQNOE_USKORENIE_Vt : LREAL := 18000.0;
	MAKSIMALQNAYA_POPRAVKA_Vt : LREAL := MAKSIMALQNOE_USKORENIE_Vt * PERIOD_TSIKLA;
	MAKSIMALQNOE_USKORENIE_Wt : LREAL := 1200.0;
	MAKSIMALQNAYA_POPRAVKA_Wt : LREAL := MAKSIMALQNOE_USKORENIE_Wt * PERIOD_TSIKLA;
	OBLASTQ_ZAPRETA_VRASHENIYA_ZATRAVKI : LREAL := 500.0;
	MAKSIMALQNOE_RASSOGLASOVANIE_UROVNYA : LREAL := 3.0;
	TEMPERATURA_VK_70 : LREAL := 70.0;
	TEMPERATURA_VK_50 : LREAL := 50.0;
	TEMPERATURA_VK_30 : LREAL := 35.0;
	NIZH_GRAN_POTOKA_OHL_ZHIDK_IP : LREAL := 25.0;
	VRH_GRAN_POTOKA_OHL_ZHIDK_IP : LREAL := 55.0;
	NIZH_GRAN_OHL_ZHIDK_NA_VHODE_IP : LREAL := 10.0;
	VRH_GRAN_OHL_ZHIDK_NA_VHODE_IP : LREAL := 50.0;
	NIZH_GRAN_OHL_ZHIDK_NA_VYHODE_IP : LREAL := 0.0;
	VRH_GRAN_OHL_ZHIDK_NA_VYHODE_IP : LREAL := 100.0;
	VRH_GRAN_R_IZOLYATSII : LREAL := 64000.0;
	Pi : LREAL := 3.1415;
	KOEF_PLOTNOSTI_ZHD_SI : LREAL := 0.00000253;
	KOEF_PLOTNOSTI_TV_SI : LREAL := 0.00000233;
	KOEF_PLOTNOSTI_TV_ZHD_SI : LREAL := KOEF_PLOTNOSTI_TV_SI / KOEF_PLOTNOSTI_ZHD_SI;
	KOEF_Pi_Ro_TVERDOGO_KREMNIYA : LREAL := Pi * KOEF_PLOTNOSTI_TV_SI;
	RASSOGL_OKONCHANIYA_PEREHODA_KONUS_TSIL : LREAL := 0.3;
	TAJMAUT_NA_DIAGNOSTIKU_RAZRYVA_SVYAZI_S_PIV : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_SVYAZQ_S_PIV : LINT := DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_VPO : LINT := DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_TDD : LINT := 6 * DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_DU : LINT := DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_DTN : LINT := DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_DTR : LINT := DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_IP : LINT := DESYATQ_SEKUND;
	TAJMAUT_NA_SVYAZQ_S_PRIVODOM : LINT := DESYATQ_SEKUND;
	CHISLO_LYLOVA_V_BUFERE : LINT := 6;
	TAJMAUT_NA_OSTANOV_PRIVODA_ZR : LINT := 100;
	TAJMAUT_NA_OSTANOV_PRIVODA_ZU : LINT := 100;
	TAJMAUT_NA_OSTANOV_PRIVODA_ZV : LINT := 100;
	TAJMAUT_NA_OSTANOV_PRIVODA_TR : LINT := 100;
	TAJMAUT_NA_OSTANOV_PRIVODA_TU : LINT := 100;
	TAJMAUT_NA_OSTANOV_PRIVODA_TV : LINT := 100;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR : LINT := 200;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU : LINT := 200;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV : LINT := 200;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR : LINT := 200;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU : LINT := 200;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV : LINT := 200;
	TAJMAUT_NA_OTRABOTKU_KOMANDY_IP : LINT := 200;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PIV : LINT := ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_VPO : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_TDD : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_DU : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_DTN : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_DTR : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_IP : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM : LINT := 5 * ODNA_SEKUNDA;
	TAJMAUT_NA_PEREDACHU_DANNYH_V_TDD : LINT := 5 * ODNA_SEKUNDA;
	T2 : LINT := 500;
	T_DVN_NVR : LINT := 20;
	T_NA_NATEKANIE_VOZDUHA_V_AVD : LINT := DESYATQ_SEKUND;
	MINIMALQNOE_ZADANIE_REG_RG : LREAL := 0.01;
	MAKSIMALQNOE_ZADANIE_REG_RG : LREAL := 6000.0;
	MINIMALQNOE_ZADANIE_REG_D : LREAL := 0.001;
	MAKSIMALQNOE_ZADANIE_REG_D : LREAL := 45.0;
	MINIMALQNOE_ZADANIE_REG_W_IPN_K1 : LREAL := 0.0;
	MAKSIMALQNOE_ZADANIE_REG_W_IPN_K1 : LREAL := 180000.0;
	MINIMALQNOE_ZADANIE_REG_W_IPN_K2 : LREAL := 0.0;
	MAKSIMALQNOE_ZADANIE_REG_W_IPN_K2 : LREAL := 180000.0;
	MINIMALQNOE_ZADANIE_BAZA_REG_ROSTA : LREAL := 0.0;
	MAKSIMALQNOE_ZADANIE_BAZA_REG_ROSTA : LREAL := 1000.0;
	MINIMALQNOE_ZADANIE_REG_TN : LREAL := 800.0;
	MAKSIMALQNOE_ZADANIE_REG_TN : LREAL := 2000.0;
	MINIMALQNOE_ZADANIE_REG_TR : LREAL := 1000.0;
	MAKSIMALQNOE_ZADANIE_REG_TR : LREAL := 1800.0;
	MINIMALQNOE_ZADANIE_REG_ROSTA : LREAL := 0.05;
	MAKSIMALQNOE_ZADANIE_REG_ROSTA : LREAL := 8.0;
	MINIMALQNOE_ZADANIE_REG_UR_hzad : LREAL := -20.0;
	MAKSIMALQNOE_ZADANIE_REG_UR_hzad : LREAL := 20.0;
	MINIMALQNOE_ZADANIE_REG_DK : LREAL := 3.0;
	MAKSIMALQNOE_ZADANIE_REG_DK : LREAL := 250.0;
	MINIMALQNOE_ZADANIE_REG_VzR : LREAL := -8.0;
	MAKSIMALQNOE_ZADANIE_REG_VzR : LREAL := 8.0;
	MINIMALQNOE_ZADANIE_REG_VzU : LREAL := -760.0;
	MAKSIMALQNOE_ZADANIE_REG_VzU : LREAL := 760.0;
	MINIMALQNOE_ZADANIE_REG_Xz : LREAL := -2900.0;
	MAKSIMALQNOE_ZADANIE_REG_Xz : LREAL := 0.0;
	MINIMALQNOE_ZADANIE_REG_Wz : LREAL := -50.0;
	MAKSIMALQNOE_ZADANIE_REG_Wz : LREAL := 50.0;
	MINIMALQNOE_ZADANIE_REG_VtR : LREAL := -0.7;
	MAKSIMALQNOE_ZADANIE_REG_VtR : LREAL := 0.7;
	MINIMALQNOE_ZADANIE_REG_VtU : LREAL := -200.0;
	MAKSIMALQNOE_ZADANIE_REG_VtU : LREAL := 190.0;
	MINIMALQNOE_ZADANIE_REG_Xt : LREAL := 0.0;
	MAKSIMALQNOE_ZADANIE_REG_Xt : LREAL := 400.0;
	MINIMALQNOE_ZADANIE_REG_Wt : LREAL := -30.0;
	MAKSIMALQNOE_ZADANIE_REG_Wt : LREAL := 30.0;
	UNIO1 : LINT := 16#110;
	BA_FPGA1_U1 : LINT := 16#A110;
	BA_FPGA2_U1 : LINT := 16#A510;
	BA_FPGA3_U1 : LINT := 16#A910;
	BA_FPGA4_U1 : LINT := 16#AD10;
	UNIO2 : LINT := 16#120;
	BA_FPGA1_U2 : LINT := 16#A120;
	BA_FPGA2_U2 : LINT := 16#A520;
	BA_FPGA3_U2 : LINT := 16#A920;
	BA_FPGA4_U2 : LINT := 16#AD20;
	
	KOD_NACHALA_NE_VLIYAYUSHIH_NA_PKO_KONSTANT : INT := 10000;
	
	REZHIM_INITSIALIZATSII : INT := 1;
	REZHIM_RR : INT := REZHIM_INITSIALIZATSII + 1;
	REZHIM_OTMENA : INT := REZHIM_RR + 1;
	REZHIM_KRP : INT := REZHIM_OTMENA + 1;
	REZHIM_RA : INT := REZHIM_KRP + 1;
	REZHIM_KONETS_RABOTY : INT := REZHIM_RA + 1;
	REZHIM_FORSAZH : INT := REZHIM_KONETS_RABOTY + 1;
	REZHIM_TARIROVKA : INT := REZHIM_FORSAZH + 1;
	REZHIM_OTZHIG_TU : INT := REZHIM_TARIROVKA + 1;
	REZHIM_DVK : INT := REZHIM_OTZHIG_TU + 1;
	OTMENA_OTMENY : INT := REZHIM_DVK + 1;
	KONETS_INITSIALIZATSII : INT := OTMENA_OTMENY + 1;
	ZAPUSK_ETAPA_V_REZHIME_RA : INT := KONETS_INITSIALIZATSII + 1;
	KONETS_RABOTY_D2 : INT := ZAPUSK_ETAPA_V_REZHIME_RA + 1;
	
	KOMANDA_RR_1_GVS : INT := KONETS_RABOTY_D2 + 1;
	VKL_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS : INT := KOMANDA_RR_1_GVS;
	VYK_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS : INT := VKL_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS + 1;
	OTKR_NAT_AVD1_VE1 : INT := VYK_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS + 1;
	ZAKR_NAT_AVD1_VE1 : INT := OTKR_NAT_AVD1_VE1 + 1;
	OTKR_NAT_AVD2_VE2 : INT := ZAKR_NAT_AVD1_VE1 + 1;
	ZAKR_NAT_AVD2_VE2 : INT := OTKR_NAT_AVD2_VE2 + 1;
	OTKR_AVD1_MO_NK_VE3 : INT := ZAKR_NAT_AVD2_VE2 + 1;
	ZAKR_AVD1_MO_NK_VE3 : INT := OTKR_AVD1_MO_NK_VE3 + 1;
	OTKR_AVD2_MO_NK_VE4 : INT := ZAKR_AVD1_MO_NK_VE3 + 1;
	ZAKR_AVD2_MO_NK_VE4 : INT := OTKR_AVD2_MO_NK_VE4 + 1;
	OTKR_AVD1_MO_VK_VE5 : INT := ZAKR_AVD2_MO_NK_VE4 + 1;
	ZAKR_AVD1_MO_VK_VE5 : INT := OTKR_AVD1_MO_VK_VE5 + 1;
	OTKR_AVD2_MO_VK_VE6 : INT := ZAKR_AVD1_MO_VK_VE5 + 1;
	ZAKR_AVD2_MO_VK_VE6 : INT := OTKR_AVD2_MO_VK_VE6 + 1;
	OTKR_BPK_VE7 : INT := ZAKR_AVD2_MO_VK_VE6 + 1;
	ZAKR_BPK_VE7 : INT := OTKR_BPK_VE7 + 1;
	OTKR_PRODUVKA_VE8 : INT := ZAKR_BPK_VE7 + 1;
	ZAKR_PRODUVKA_VE8 : INT := OTKR_PRODUVKA_VE8 + 1;
	OTKR_NADDUV_VK_VE9 : INT := ZAKR_PRODUVKA_VE8 + 1;
	ZAKR_NADDUV_VK_VE9 : INT := OTKR_NADDUV_VK_VE9 + 1;
	OTKR_NADDUV_NK_VE12 : INT := ZAKR_NADDUV_VK_VE9 + 1;
	ZAKR_NADDUV_NK_VE12 : INT := OTKR_NADDUV_NK_VE12 + 1;
	OTKR_VYHLOP_AVD2_VE10 : INT := ZAKR_NADDUV_NK_VE12 + 1;
	ZAKR_VYHLOP_AVD2_VE10 : INT := OTKR_VYHLOP_AVD2_VE10 + 1;
	OTKR_VYHLOP_AVD1_VE11 : INT := ZAKR_VYHLOP_AVD2_VE10 + 1;
	ZAKR_VYHLOP_AVD1_VE11 : INT := OTKR_VYHLOP_AVD1_VE11 + 1;
	OTKR_VM14 : INT := ZAKR_VYHLOP_AVD1_VE11 + 1;
	ZAKR_VM14 : INT := OTKR_VM14 + 1;
	VYK_VM14 : INT := ZAKR_VM14 + 1;
	VKL_AVD1 : INT := VYK_VM14 + 1;
	VKL_AVD2 : INT := VKL_AVD1 + 1;
	VYK_AVD1 : INT := VKL_AVD2 + 1;
	VYK_AVD2 : INT := VYK_AVD1 + 1;
	PEREKLYUCHITQ_AVD : INT := VYK_AVD2 + 1;
	VKL_AVD1_NK : INT := PEREKLYUCHITQ_AVD + 1;
	VKL_AVD2_NK : INT := VKL_AVD1_NK + 1;
	VKL_AVD1_VK : INT := VKL_AVD2_NK + 1;
	VKL_AVD2_VK : INT := VKL_AVD1_VK + 1;
	RAZGERMETIZATSIYA_VK : INT := VKL_AVD2_VK + 1;
	VAKUUMIROVANIE_VK : INT := RAZGERMETIZATSIYA_VK + 1;
	OSTANOV_SHLYUZOVANIYA : INT := VAKUUMIROVANIE_VK + 1;
	KOMANDA_RR_N_GVS : INT := OSTANOV_SHLYUZOVANIYA;
	
	KOMANDA_1_REGULYATORY : INT := KOMANDA_RR_N_GVS + 1;
	VKL_REG_RG : INT := KOMANDA_1_REGULYATORY;
	VYK_REG_RG : INT := VKL_REG_RG + 1;
	VKL_REG_D : INT := VYK_REG_RG + 1;
	VYK_REG_D : INT := VKL_REG_D + 1;
	VKL_REG_W_IPN_K1 : INT := VYK_REG_D + 1;
	VKL_REG_TN : INT := VKL_REG_W_IPN_K1 + 1;
	VKL_REG_TR : INT := VKL_REG_TN + 1;
	VKL_REG_ROSTA : INT := VKL_REG_TR + 1;
	VYK_REG_TN : INT := VKL_REG_ROSTA + 1;
	VYK_REG_TR : INT := VYK_REG_TN + 1;
	VYK_REG_ROSTA : INT := VYK_REG_TR + 1;
	VYK_IPN_K1 : INT := VYK_REG_ROSTA + 1;
	VKL_REG_W_IPN_K2 : INT := VYK_IPN_K1 + 1;
	VYK_IPN_K2 : INT := VKL_REG_W_IPN_K2 + 1;
	VYK_IPN : INT := VYK_IPN_K2 + 1;
	VKL_REG_UR : INT := VYK_IPN + 1;
	VYK_REG_UR : INT := VKL_REG_UR + 1;
	VKL_REG_DK : INT := VYK_REG_UR + 1;
	VYK_REG_DK : INT := VKL_REG_DK + 1;
	ZAT_RS : INT := VYK_REG_DK + 1;
	ZAT_RK : INT := ZAT_RS + 1;
	ZAT_US : INT := ZAT_RK + 1;
	ZAT_UK : INT := ZAT_US + 1;
	VKL_REG_ZAT_UK : INT := ZAT_UK + 1;
	VYK_ZATRAVKU : INT := VKL_REG_ZAT_UK + 1;
	TIG_RS : INT := VYK_ZATRAVKU + 1;
	TIG_RK : INT := TIG_RS + 1;
	TIG_US : INT := TIG_RK + 1;
	TIG_UK : INT := TIG_US + 1;
	VKL_REG_TIG_UK : INT := TIG_UK + 1;
	VYK_TIGELQ : INT := VKL_REG_TIG_UK + 1;
	ZAT_VR : INT := VYK_TIGELQ + 1;
	ZAT_UGOL : INT := ZAT_VR + 1;
	VYK_ZAT_VR : INT := ZAT_UGOL + 1;
	TIG_VR : INT := VYK_ZAT_VR + 1;
	TIG_UGOL : INT := TIG_VR + 1;
	VYK_TIG_VR : INT := TIG_UGOL + 1;
	KOMANDA_N_REGULYATORY : INT := VYK_TIG_VR;
	
	VKL_VPO : INT := KOMANDA_N_REGULYATORY + 1;
	VYK_VPO : INT := VKL_VPO + 1;
	VYK_BLOKIROVKU_VK_NK : INT := VYK_VPO + 1;
	
	KOMANDA_1_SISTEMNAYA : INT := VYK_BLOKIROVKU_VK_NK + 1;
	ZAPROS_INITSIALIZATSII_PIV : INT := KOMANDA_1_SISTEMNAYA;
	ZAPROS_INITSIALIZATSII_PK : INT := ZAPROS_INITSIALIZATSII_PIV + 1;
	ZAPROS_INITSIALIZATSII_VPO : INT := ZAPROS_INITSIALIZATSII_PK + 1;
	ZAPROS_INITSIALIZATSII_DTR : INT := ZAPROS_INITSIALIZATSII_VPO + 1;
	ZAPROS_INITSIALIZATSII_DTN : INT := ZAPROS_INITSIALIZATSII_DTR + 1;
	ZAPROS_INITSIALIZATSII_DU : INT := ZAPROS_INITSIALIZATSII_DTN + 1;
	ZAPROS_INITSIALIZATSII_TDD : INT := ZAPROS_INITSIALIZATSII_DU + 1;
	ZAPROS_INITSIALIZATSII_IP2K_K1 : INT := ZAPROS_INITSIALIZATSII_TDD + 1;
	ZAPROS_INITSIALIZATSII_IP2K_K2 : INT := ZAPROS_INITSIALIZATSII_IP2K_K1 + 1;
	ZAPROS_INITSIALIZATSII_ZU : INT := ZAPROS_INITSIALIZATSII_IP2K_K2 + 1;
	ZAPROS_INITSIALIZATSII_ZR : INT := ZAPROS_INITSIALIZATSII_ZU + 1;
	ZAPROS_INITSIALIZATSII_TU : INT := ZAPROS_INITSIALIZATSII_ZR + 1;
	ZAPROS_INITSIALIZATSII_TR : INT := ZAPROS_INITSIALIZATSII_TU + 1;
	ZAPROS_INITSIALIZATSII_ZV : INT := ZAPROS_INITSIALIZATSII_TR + 1;
	ZAPROS_INITSIALIZATSII_TV : INT := ZAPROS_INITSIALIZATSII_ZV + 1;
	RESTART_PIV : INT := ZAPROS_INITSIALIZATSII_TV + 1;
	RESTART_PK : INT := RESTART_PIV + 1;
	RESTART_VPO : INT := RESTART_PK + 1;
	RESTART_DTR : INT := RESTART_VPO + 1;
	RESTART_DTN : INT := RESTART_DTR + 1;
	RESTART_DU : INT := RESTART_DTN + 1;
	RESTART_TDD : INT := RESTART_DU + 1;
	RESTART_IP2K_K1 : INT := RESTART_TDD + 1;
	RESTART_IP2K_K2 : INT := RESTART_IP2K_K1 + 1;
	RESTART_ZU : INT := RESTART_IP2K_K2 + 1;
	RESTART_ZR : INT := RESTART_ZU + 1;
	RESTART_TU : INT := RESTART_ZR + 1;
	RESTART_TR : INT := RESTART_TU + 1;
	RESTART_ZV : INT := RESTART_TR + 1;
	RESTART_TV : INT := RESTART_ZV + 1;
	TESTOVAYA_KOMANDA1 : INT := RESTART_TV + 1;
	TESTOVAYA_KOMANDA2 : INT := TESTOVAYA_KOMANDA1 + 1;
	RAZRYV_SVYAZI_S_PIV : INT := TESTOVAYA_KOMANDA2 + 1;
	RAZRYV_SVYAZI_S_PK : INT := RAZRYV_SVYAZI_S_PIV + 1;
	RAZRYV_SVYAZI_S_VPO : INT := RAZRYV_SVYAZI_S_PK + 1;
	RAZRYV_SVYAZI_S_DTR : INT := RAZRYV_SVYAZI_S_VPO + 1;
	RAZRYV_SVYAZI_S_DTN : INT := RAZRYV_SVYAZI_S_DTR + 1;
	RAZRYV_SVYAZI_S_DU : INT := RAZRYV_SVYAZI_S_DTN + 1;
	RAZRYV_SVYAZI_S_TDD : INT := RAZRYV_SVYAZI_S_DU + 1;
	RAZRYV_SVYAZI_S_IP2K_K1 : INT := RAZRYV_SVYAZI_S_TDD + 1;
	RAZRYV_SVYAZI_S_IP2K_K2 : INT := RAZRYV_SVYAZI_S_IP2K_K1 + 1;
	RAZRYV_SVYAZI_S_ZU : INT := RAZRYV_SVYAZI_S_IP2K_K2 + 1;
	RAZRYV_SVYAZI_S_ZR : INT := RAZRYV_SVYAZI_S_ZU + 1;
	RAZRYV_SVYAZI_S_TU : INT := RAZRYV_SVYAZI_S_ZR + 1;
	RAZRYV_SVYAZI_S_TR : INT := RAZRYV_SVYAZI_S_TU + 1;
	RAZRYV_SVYAZI_S_ZV : INT := RAZRYV_SVYAZI_S_TR + 1;
	RAZRYV_SVYAZI_S_TV : INT := RAZRYV_SVYAZI_S_ZV + 1;
	NALICHIE_SVYAZI_S_PIV : INT := RAZRYV_SVYAZI_S_TV + 1;
	NALICHIE_SVYAZI_S_PK : INT := NALICHIE_SVYAZI_S_PIV + 1;
	NALICHIE_SVYAZI_S_VPO : INT := NALICHIE_SVYAZI_S_PK + 1;
	NALICHIE_SVYAZI_S_DTR : INT := NALICHIE_SVYAZI_S_VPO + 1;
	NALICHIE_SVYAZI_S_DTN : INT := NALICHIE_SVYAZI_S_DTR + 1;
	NALICHIE_SVYAZI_S_DU : INT := NALICHIE_SVYAZI_S_DTN + 1;
	NALICHIE_SVYAZI_S_TDD : INT := NALICHIE_SVYAZI_S_DU + 1;
	NALICHIE_SVYAZI_S_IP2K_K1 : INT := NALICHIE_SVYAZI_S_TDD + 1;
	NALICHIE_SVYAZI_S_IP2K_K2 : INT := NALICHIE_SVYAZI_S_IP2K_K1 + 1;
	NALICHIE_SVYAZI_S_ZU : INT := NALICHIE_SVYAZI_S_IP2K_K2 + 1;
	NALICHIE_SVYAZI_S_ZR : INT := NALICHIE_SVYAZI_S_ZU + 1;
	NALICHIE_SVYAZI_S_TU : INT := NALICHIE_SVYAZI_S_ZR + 1;
	NALICHIE_SVYAZI_S_TR : INT := NALICHIE_SVYAZI_S_TU + 1;
	NALICHIE_SVYAZI_S_ZV : INT := NALICHIE_SVYAZI_S_TR + 1;
	NALICHIE_SVYAZI_S_TV : INT := NALICHIE_SVYAZI_S_ZV + 1;
	INITSIALIZATSIYA_SVYAZI_S_PIV : INT := NALICHIE_SVYAZI_S_TV + 1;
	INITSIALIZATSIYA_SVYAZI_S_PK : INT := INITSIALIZATSIYA_SVYAZI_S_PIV + 1;
	INITSIALIZATSIYA_SVYAZI_S_VPO : INT := INITSIALIZATSIYA_SVYAZI_S_PK + 1;
	INITSIALIZATSIYA_SVYAZI_S_DTR : INT := INITSIALIZATSIYA_SVYAZI_S_VPO + 1;
	INITSIALIZATSIYA_SVYAZI_S_DTN : INT := INITSIALIZATSIYA_SVYAZI_S_DTR + 1;
	INITSIALIZATSIYA_SVYAZI_S_DU : INT := INITSIALIZATSIYA_SVYAZI_S_DTN + 1;
	INITSIALIZATSIYA_SVYAZI_S_TDD : INT := INITSIALIZATSIYA_SVYAZI_S_DU + 1;
	INITSIALIZATSIYA_SVYAZI_S_IP2K_K1 : INT := INITSIALIZATSIYA_SVYAZI_S_TDD + 1;
	INITSIALIZATSIYA_SVYAZI_S_IP2K_K2 : INT := INITSIALIZATSIYA_SVYAZI_S_IP2K_K1 + 1;
	INITSIALIZATSIYA_SVYAZI_S_ZU : INT := INITSIALIZATSIYA_SVYAZI_S_IP2K_K2 + 1;
	INITSIALIZATSIYA_SVYAZI_S_ZR : INT := INITSIALIZATSIYA_SVYAZI_S_ZU + 1;
	INITSIALIZATSIYA_SVYAZI_S_TU : INT := INITSIALIZATSIYA_SVYAZI_S_ZR + 1;
	INITSIALIZATSIYA_SVYAZI_S_TR : INT := INITSIALIZATSIYA_SVYAZI_S_TU + 1;
	INITSIALIZATSIYA_SVYAZI_S_ZV : INT := INITSIALIZATSIYA_SVYAZI_S_TR + 1;
	INITSIALIZATSIYA_SVYAZI_S_TV : INT := INITSIALIZATSIYA_SVYAZI_S_ZV + 1;
	OTKLYUCHENIE_SVYAZI_S_PIV : INT := INITSIALIZATSIYA_SVYAZI_S_TV + 1;
	OTKLYUCHENIE_SVYAZI_S_PK : INT := OTKLYUCHENIE_SVYAZI_S_PIV + 1;
	OTKLYUCHENIE_SVYAZI_S_VPO : INT := OTKLYUCHENIE_SVYAZI_S_PK + 1;
	OTKLYUCHENIE_SVYAZI_S_DTR : INT := OTKLYUCHENIE_SVYAZI_S_VPO + 1;
	OTKLYUCHENIE_SVYAZI_S_DTN : INT := OTKLYUCHENIE_SVYAZI_S_DTR + 1;
	OTKLYUCHENIE_SVYAZI_S_DU : INT := OTKLYUCHENIE_SVYAZI_S_DTN + 1;
	OTKLYUCHENIE_SVYAZI_S_TDD : INT := OTKLYUCHENIE_SVYAZI_S_DU + 1;
	OTKLYUCHENIE_SVYAZI_S_IP2K_K1 : INT := OTKLYUCHENIE_SVYAZI_S_TDD + 1;
	OTKLYUCHENIE_SVYAZI_S_IP2K_K2 : INT := OTKLYUCHENIE_SVYAZI_S_IP2K_K1 + 1;
	OTKLYUCHENIE_SVYAZI_S_ZU : INT := OTKLYUCHENIE_SVYAZI_S_IP2K_K2 + 1;
	OTKLYUCHENIE_SVYAZI_S_ZR : INT := OTKLYUCHENIE_SVYAZI_S_ZU + 1;
	OTKLYUCHENIE_SVYAZI_S_TU : INT := OTKLYUCHENIE_SVYAZI_S_ZR + 1;
	OTKLYUCHENIE_SVYAZI_S_TR : INT := OTKLYUCHENIE_SVYAZI_S_TU + 1;
	OTKLYUCHENIE_SVYAZI_S_ZV : INT := OTKLYUCHENIE_SVYAZI_S_TR + 1;
	OTKLYUCHENIE_SVYAZI_S_TV : INT := OTKLYUCHENIE_SVYAZI_S_ZV + 1;
	VOSSTANOVLENIE_SVYAZI_S_PIV : INT := OTKLYUCHENIE_SVYAZI_S_TV + 1;
	VOSSTANOVLENIE_SVYAZI_S_PK : INT := VOSSTANOVLENIE_SVYAZI_S_PIV + 1;
	VOSSTANOVLENIE_SVYAZI_S_VPO : INT := VOSSTANOVLENIE_SVYAZI_S_PK + 1;
	VOSSTANOVLENIE_SVYAZI_S_DTR : INT := VOSSTANOVLENIE_SVYAZI_S_VPO + 1;
	VOSSTANOVLENIE_SVYAZI_S_DTN : INT := VOSSTANOVLENIE_SVYAZI_S_DTR + 1;
	VOSSTANOVLENIE_SVYAZI_S_DU : INT := VOSSTANOVLENIE_SVYAZI_S_DTN + 1;
	VOSSTANOVLENIE_SVYAZI_S_TDD : INT := VOSSTANOVLENIE_SVYAZI_S_DU + 1;
	VOSSTANOVLENIE_SVYAZI_S_IP2K_K1 : INT := VOSSTANOVLENIE_SVYAZI_S_TDD + 1;
	VOSSTANOVLENIE_SVYAZI_S_IP2K_K2 : INT := VOSSTANOVLENIE_SVYAZI_S_IP2K_K1 + 1;
	VOSSTANOVLENIE_SVYAZI_S_ZU : INT := VOSSTANOVLENIE_SVYAZI_S_IP2K_K2 + 1;
	VOSSTANOVLENIE_SVYAZI_S_ZR : INT := VOSSTANOVLENIE_SVYAZI_S_ZU + 1;
	VOSSTANOVLENIE_SVYAZI_S_TU : INT := VOSSTANOVLENIE_SVYAZI_S_ZR + 1;
	VOSSTANOVLENIE_SVYAZI_S_TR : INT := VOSSTANOVLENIE_SVYAZI_S_TU + 1;
	VOSSTANOVLENIE_SVYAZI_S_ZV : INT := VOSSTANOVLENIE_SVYAZI_S_TR + 1;
	VOSSTANOVLENIE_SVYAZI_S_TV : INT := VOSSTANOVLENIE_SVYAZI_S_ZV + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PIV : INT := VOSSTANOVLENIE_SVYAZI_S_TV + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PK : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PIV + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PK + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTR : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTN : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTR + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTN + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1 : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K2 : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1 + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZU : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K2 + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZR : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZU + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TU : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZR + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TR : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TU + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZV : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TR + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TV : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZV + 1;
	VKLYUCHENIE_MONITORINGA_S_PIV : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TV + 1;
	VKLYUCHENIE_MONITORINGA_S_PK : INT := VKLYUCHENIE_MONITORINGA_S_PIV + 1;
	VKLYUCHENIE_MONITORINGA_S_VPO : INT := VKLYUCHENIE_MONITORINGA_S_PK + 1;
	VKLYUCHENIE_MONITORINGA_S_DTR : INT := VKLYUCHENIE_MONITORINGA_S_VPO + 1;
	VKLYUCHENIE_MONITORINGA_S_DTN : INT := VKLYUCHENIE_MONITORINGA_S_DTR + 1;
	VKLYUCHENIE_MONITORINGA_S_DU : INT := VKLYUCHENIE_MONITORINGA_S_DTN + 1;
	VKLYUCHENIE_MONITORINGA_S_TDD : INT := VKLYUCHENIE_MONITORINGA_S_DU + 1;
	VKLYUCHENIE_MONITORINGA_S_IP2K_K1 : INT := VKLYUCHENIE_MONITORINGA_S_TDD + 1;
	VKLYUCHENIE_MONITORINGA_S_IP2K_K2 : INT := VKLYUCHENIE_MONITORINGA_S_IP2K_K1 + 1;
	VKLYUCHENIE_MONITORINGA_S_ZU : INT := VKLYUCHENIE_MONITORINGA_S_IP2K_K2 + 1;
	VKLYUCHENIE_MONITORINGA_S_ZR : INT := VKLYUCHENIE_MONITORINGA_S_ZU + 1;
	VKLYUCHENIE_MONITORINGA_S_TU : INT := VKLYUCHENIE_MONITORINGA_S_ZR + 1;
	VKLYUCHENIE_MONITORINGA_S_TR : INT := VKLYUCHENIE_MONITORINGA_S_TU + 1;
	VKLYUCHENIE_MONITORINGA_S_ZV : INT := VKLYUCHENIE_MONITORINGA_S_TR + 1;
	VKLYUCHENIE_MONITORINGA_S_TV : INT := VKLYUCHENIE_MONITORINGA_S_ZV + 1;
	VYKLYUCHENIE_MONITORINGA_S_PIV : INT := VKLYUCHENIE_MONITORINGA_S_TV + 1;
	VYKLYUCHENIE_MONITORINGA_S_PK : INT := VYKLYUCHENIE_MONITORINGA_S_PIV + 1;
	VYKLYUCHENIE_MONITORINGA_S_VPO : INT := VYKLYUCHENIE_MONITORINGA_S_PK + 1;
	VYKLYUCHENIE_MONITORINGA_S_DTR : INT := VYKLYUCHENIE_MONITORINGA_S_VPO + 1;
	VYKLYUCHENIE_MONITORINGA_S_DTN : INT := VYKLYUCHENIE_MONITORINGA_S_DTR + 1;
	VYKLYUCHENIE_MONITORINGA_S_DU : INT := VYKLYUCHENIE_MONITORINGA_S_DTN + 1;
	VYKLYUCHENIE_MONITORINGA_S_TDD : INT := VYKLYUCHENIE_MONITORINGA_S_DU + 1;
	VYKLYUCHENIE_MONITORINGA_S_IP2K_K1 : INT := VYKLYUCHENIE_MONITORINGA_S_TDD + 1;
	VYKLYUCHENIE_MONITORINGA_S_IP2K_K2 : INT := VYKLYUCHENIE_MONITORINGA_S_IP2K_K1 + 1;
	VYKLYUCHENIE_MONITORINGA_S_ZU : INT := VYKLYUCHENIE_MONITORINGA_S_IP2K_K2 + 1;
	VYKLYUCHENIE_MONITORINGA_S_ZR : INT := VYKLYUCHENIE_MONITORINGA_S_ZU + 1;
	VYKLYUCHENIE_MONITORINGA_S_TU : INT := VYKLYUCHENIE_MONITORINGA_S_ZR + 1;
	VYKLYUCHENIE_MONITORINGA_S_TR : INT := VYKLYUCHENIE_MONITORINGA_S_TU + 1;
	VYKLYUCHENIE_MONITORINGA_S_ZV : INT := VYKLYUCHENIE_MONITORINGA_S_TR + 1;
	VYKLYUCHENIE_MONITORINGA_S_TV : INT := VYKLYUCHENIE_MONITORINGA_S_ZV + 1;
	N_SOOB_VO_VHODNOM_BUFERE_PIV : INT := VYKLYUCHENIE_MONITORINGA_S_TV + 1;
	N_SOOB_VO_VHODNOM_BUFERE_PK : INT := N_SOOB_VO_VHODNOM_BUFERE_PIV + 1;
	N_SOOB_VO_VHODNOM_BUFERE_VPO : INT := N_SOOB_VO_VHODNOM_BUFERE_PK + 1;
	N_SOOB_VO_VHODNOM_BUFERE_DTR : INT := N_SOOB_VO_VHODNOM_BUFERE_VPO + 1;
	N_SOOB_VO_VHODNOM_BUFERE_DTN : INT := N_SOOB_VO_VHODNOM_BUFERE_DTR + 1;
	N_SOOB_VO_VHODNOM_BUFERE_DU : INT := N_SOOB_VO_VHODNOM_BUFERE_DTN + 1;
	N_SOOB_VO_VHODNOM_BUFERE_TDD : INT := N_SOOB_VO_VHODNOM_BUFERE_DU + 1;
	N_SOOB_VO_VHODNOM_BUFERE_IP2K_K1 : INT := N_SOOB_VO_VHODNOM_BUFERE_TDD + 1;
	N_SOOB_VO_VHODNOM_BUFERE_IP2K_K2 : INT := N_SOOB_VO_VHODNOM_BUFERE_IP2K_K1 + 1;
	N_SOOB_VO_VHODNOM_BUFERE_ZU : INT := N_SOOB_VO_VHODNOM_BUFERE_IP2K_K2 + 1;
	N_SOOB_VO_VHODNOM_BUFERE_ZR : INT := N_SOOB_VO_VHODNOM_BUFERE_ZU + 1;
	N_SOOB_VO_VHODNOM_BUFERE_TU : INT := N_SOOB_VO_VHODNOM_BUFERE_ZR + 1;
	N_SOOB_VO_VHODNOM_BUFERE_TR : INT := N_SOOB_VO_VHODNOM_BUFERE_TU + 1;
	N_SOOB_VO_VHODNOM_BUFERE_ZV : INT := N_SOOB_VO_VHODNOM_BUFERE_TR + 1;
	N_SOOB_VO_VHODNOM_BUFERE_TV : INT := N_SOOB_VO_VHODNOM_BUFERE_ZV + 1;
	N_SOOB_V_VYHODNOM_BUFERE_PIV : INT := N_SOOB_VO_VHODNOM_BUFERE_TV + 1;
	N_SOOB_V_VYHODNOM_BUFERE_PK : INT := N_SOOB_V_VYHODNOM_BUFERE_PIV + 1;
	N_SOOB_V_VYHODNOM_BUFERE_VPO : INT := N_SOOB_V_VYHODNOM_BUFERE_PK + 1;
	N_SOOB_V_VYHODNOM_BUFERE_DTR : INT := N_SOOB_V_VYHODNOM_BUFERE_VPO + 1;
	N_SOOB_V_VYHODNOM_BUFERE_DTN : INT := N_SOOB_V_VYHODNOM_BUFERE_DTR + 1;
	N_SOOB_V_VYHODNOM_BUFERE_DU : INT := N_SOOB_V_VYHODNOM_BUFERE_DTN + 1;
	N_SOOB_V_VYHODNOM_BUFERE_TDD : INT := N_SOOB_V_VYHODNOM_BUFERE_DU + 1;
	N_SOOB_V_VYHODNOM_BUFERE_IP2K_K1 : INT := N_SOOB_V_VYHODNOM_BUFERE_TDD + 1;
	N_SOOB_V_VYHODNOM_BUFERE_IP2K_K2 : INT := N_SOOB_V_VYHODNOM_BUFERE_IP2K_K1 + 1;
	N_SOOB_V_VYHODNOM_BUFERE_ZU : INT := N_SOOB_V_VYHODNOM_BUFERE_IP2K_K2 + 1;
	N_SOOB_V_VYHODNOM_BUFERE_ZR : INT := N_SOOB_V_VYHODNOM_BUFERE_ZU + 1;
	N_SOOB_V_VYHODNOM_BUFERE_TU : INT := N_SOOB_V_VYHODNOM_BUFERE_ZR + 1;
	N_SOOB_V_VYHODNOM_BUFERE_TR : INT := N_SOOB_V_VYHODNOM_BUFERE_TU + 1;
	N_SOOB_V_VYHODNOM_BUFERE_ZV : INT := N_SOOB_V_VYHODNOM_BUFERE_TR + 1;
	N_SOOB_V_VYHODNOM_BUFERE_TV : INT := N_SOOB_V_VYHODNOM_BUFERE_ZV + 1;
	KOLICHESTVO_SBOEV_PIV_PO_KS : INT := N_SOOB_V_VYHODNOM_BUFERE_TV + 1;
	KOLICHESTVO_SBOEV_PK_PO_KS : INT := KOLICHESTVO_SBOEV_PIV_PO_KS + 1;
	KOLICHESTVO_SBOEV_VPO_PO_KS : INT := KOLICHESTVO_SBOEV_PK_PO_KS + 1;
	KOLICHESTVO_SBOEV_DTR_PO_KS : INT := KOLICHESTVO_SBOEV_VPO_PO_KS + 1;
	KOLICHESTVO_SBOEV_DTN_PO_KS : INT := KOLICHESTVO_SBOEV_DTR_PO_KS + 1;
	KOLICHESTVO_SBOEV_DU_PO_KS : INT := KOLICHESTVO_SBOEV_DTN_PO_KS + 1;
	KOLICHESTVO_SBOEV_TDD_PO_KS : INT := KOLICHESTVO_SBOEV_DU_PO_KS + 1;
	KOLICHESTVO_SBOEV_IP2K_K1_PO_KS : INT := KOLICHESTVO_SBOEV_TDD_PO_KS + 1;
	KOLICHESTVO_SBOEV_IP2K_K2_PO_KS : INT := KOLICHESTVO_SBOEV_IP2K_K1_PO_KS + 1;
	KOLICHESTVO_SBOEV_ZU_PO_KS : INT := KOLICHESTVO_SBOEV_IP2K_K2_PO_KS + 1;
	KOLICHESTVO_SBOEV_ZR_PO_KS : INT := KOLICHESTVO_SBOEV_ZU_PO_KS + 1;
	KOLICHESTVO_SBOEV_TU_PO_KS : INT := KOLICHESTVO_SBOEV_ZR_PO_KS + 1;
	KOLICHESTVO_SBOEV_TR_PO_KS : INT := KOLICHESTVO_SBOEV_TU_PO_KS + 1;
	KOLICHESTVO_SBOEV_ZV_PO_KS : INT := KOLICHESTVO_SBOEV_TR_PO_KS + 1;
	KOLICHESTVO_SBOEV_TV_PO_KS : INT := KOLICHESTVO_SBOEV_ZV_PO_KS + 1;
	KOLICHESTVO_SBOEV_PIV_PO_TA : INT := KOLICHESTVO_SBOEV_TV_PO_KS + 1;
	KOLICHESTVO_SBOEV_PK_PO_TA : INT := KOLICHESTVO_SBOEV_PIV_PO_TA + 1;
	KOLICHESTVO_SBOEV_VPO_PO_TA : INT := KOLICHESTVO_SBOEV_PK_PO_TA + 1;
	KOLICHESTVO_SBOEV_DTR_PO_TA : INT := KOLICHESTVO_SBOEV_VPO_PO_TA + 1;
	KOLICHESTVO_SBOEV_DTN_PO_TA : INT := KOLICHESTVO_SBOEV_DTR_PO_TA + 1;
	KOLICHESTVO_SBOEV_DU_PO_TA : INT := KOLICHESTVO_SBOEV_DTN_PO_TA + 1;
	KOLICHESTVO_SBOEV_TDD_PO_TA : INT := KOLICHESTVO_SBOEV_DU_PO_TA + 1;
	KOLICHESTVO_SBOEV_IP2K_K1_PO_TA : INT := KOLICHESTVO_SBOEV_TDD_PO_TA + 1;
	KOLICHESTVO_SBOEV_IP2K_K2_PO_TA : INT := KOLICHESTVO_SBOEV_IP2K_K1_PO_TA + 1;
	KOLICHESTVO_SBOEV_ZU_PO_TA : INT := KOLICHESTVO_SBOEV_IP2K_K2_PO_TA + 1;
	KOLICHESTVO_SBOEV_ZR_PO_TA : INT := KOLICHESTVO_SBOEV_ZU_PO_TA + 1;
	KOLICHESTVO_SBOEV_TU_PO_TA : INT := KOLICHESTVO_SBOEV_ZR_PO_TA + 1;
	KOLICHESTVO_SBOEV_TR_PO_TA : INT := KOLICHESTVO_SBOEV_TU_PO_TA + 1;
	KOLICHESTVO_SBOEV_ZV_PO_TA : INT := KOLICHESTVO_SBOEV_TR_PO_TA + 1;
	KOLICHESTVO_SBOEV_TV_PO_TA : INT := KOLICHESTVO_SBOEV_ZV_PO_TA + 1;
	VKLYUCHENIE_MONITORINGA_SISTEMNYH_OSHIBOK : INT := KOLICHESTVO_SBOEV_TV_PO_TA + 1;
	VYKLYUCHENIE_MONITORINGA_SISTEMNYH_OSHIBOK : INT := VKLYUCHENIE_MONITORINGA_SISTEMNYH_OSHIBOK + 1;
	SBROS_SISTEMNOJ_OSHIBKI : INT := VYKLYUCHENIE_MONITORINGA_SISTEMNYH_OSHIBOK + 1;
	KOD_SISTEMNOJ_OSHIBKI : INT := SBROS_SISTEMNOJ_OSHIBKI + 1;
	SISTEMNAYA_OSHIBKA_OTSUTSTVUET : INT := KOD_SISTEMNOJ_OSHIBKI + 1;
	KOMANDA_N_SISTEMNAYA : INT := SISTEMNAYA_OSHIBKA_OTSUTSTVUET + 1;
	
	SISTEMNYE_OSHIBKI_OTSUTSTVUYUT : INT := 0;
	DELENIE_NA_NOLQ : INT := SISTEMNYE_OSHIBKI_OTSUTSTVUYUT + 1;
	NEIZVESTNAYA_SISTEMNAYA_OSHIBKA : INT := DELENIE_NA_NOLQ + 1;
	
	KOMANDA_1_KOORDINATY : INT := KOMANDA_N_SISTEMNAYA + 1;
	ZAT_KNP : INT := KOMANDA_1_KOORDINATY;
	ZAT_DP : INT := ZAT_KNP + 1;
	ZAT_KVP : INT := ZAT_DP + 1;
	USTANOVITQ_KOORDINATU_ZATRAVKI : INT := ZAT_KVP + 1;
	DVIZHENIE_ZATRAVKI_PO_NOMINALQNYM_KOEFFITSIENTAM : INT := USTANOVITQ_KOORDINATU_ZATRAVKI + 1;
	RASSCHITATQ_REALQNYE_KOEFFITSIENTY_ZATRAVKI : INT := DVIZHENIE_ZATRAVKI_PO_NOMINALQNYM_KOEFFITSIENTAM + 1;
	PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP : INT := RASSCHITATQ_REALQNYE_KOEFFITSIENTY_ZATRAVKI + 1;
	PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_STYKA_NK : INT := PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP + 1;
	TIG_KNP : INT := PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_STYKA_NK + 1;
	TIG_PVK : INT := TIG_KNP + 1;
	TIG_KVP : INT := TIG_PVK + 1;
	USTANOVITQ_KOORDINATU_TIGLYA : INT := TIG_KVP + 1;
	PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_KNP_TIGLYA_DO_KVP : INT := USTANOVITQ_KOORDINATU_TIGLYA + 1;
	PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_DNA_TIGLYA_V_KNP_DO_PNUR : INT := PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_KNP_TIGLYA_DO_KVP + 1;
	KOMANDA_N_KOORDINATY : INT := PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_DNA_TIGLYA_V_KNP_DO_PNUR;
	
	KOMANDA_SMENY_ETAPA_1 : INT := KOMANDA_N_KOORDINATY + 1;
	ETAP_KIP : INT := KOMANDA_SMENY_ETAPA_1 + 1;
	ETAP_KONTROLQNOE_VAKUUMIROVANIE : INT := ETAP_KIP + 1;
	ETAP_KONTROLQ_NATEKANIYA : INT := ETAP_KONTROLQNOE_VAKUUMIROVANIE + 1;
	ETAP_RABOCHEE_VAKUUMIROVANIE : INT := ETAP_KONTROLQ_NATEKANIYA + 1;
	ETAP_PODGOT_K_PLAVL_ZAGRUZKI : INT := ETAP_RABOCHEE_VAKUUMIROVANIE + 1;
	ETAP_TP_PLAVL_ZAGRUZKI : INT := ETAP_PODGOT_K_PLAVL_ZAGRUZKI + 1;
	ETAP_PODG_K_STAB_RASPLAVA : INT := ETAP_TP_PLAVL_ZAGRUZKI + 1;
	ETAP_PODG_PROGREVA_ZATRAVKI : INT := ETAP_PODG_K_STAB_RASPLAVA + 1;
	ETAP_TP_PROGREV_ZATRAVKI : INT := ETAP_PODG_PROGREVA_ZATRAVKI + 1;
	ETAP_ZATRAVLIVANIE : INT := ETAP_TP_PROGREV_ZATRAVKI + 1;
	ETAP_STABILIZATSIYA_RASPLAVA : INT := ETAP_ZATRAVLIVANIE + 1;
	ETAP_TP_PEREHOD_ZATR_SHEJKA : INT := ETAP_STABILIZATSIYA_RASPLAVA + 1;
	ETAP_VYRASHIVANIE_SHEJKI : INT := ETAP_TP_PEREHOD_ZATR_SHEJKA + 1;
	ETAP_TP_PEREHOD_SHEJKA_KONUS : INT := ETAP_VYRASHIVANIE_SHEJKI + 1;
	ETAP_VYRASHIVANIE_KONUSA : INT := ETAP_TP_PEREHOD_SHEJKA_KONUS + 1;
	ETAP_PEREHOD_KONUS_TSILINDR : INT := ETAP_VYRASHIVANIE_KONUSA + 1;
	ETAP_STABILIZATSIYA_TSILINDRA : INT := ETAP_PEREHOD_KONUS_TSILINDR + 1;
	ETAP_TP_VYRASHIVANIE_TSILINDRA : INT := ETAP_STABILIZATSIYA_TSILINDRA + 1;
	ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS : INT := ETAP_TP_VYRASHIVANIE_TSILINDRA + 1;
	ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA : INT := ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS + 1;
	ETAP_OTRYV_KRISTALLA : INT := ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA + 1;
	ETAP_TP_OHL_KRISTALLA : INT := ETAP_OTRYV_KRISTALLA + 1;
	ETAP_PODGOTOVKA_K_RAZGRUZKE_KRISTALLA : INT := ETAP_TP_OHL_KRISTALLA + 1;
	ETAP_OTZHIG_TEPLOVOGO_UZLA : INT := ETAP_PODGOTOVKA_K_RAZGRUZKE_KRISTALLA + 1;
	KOMANDA_SMENY_ETAPA_N : INT := ETAP_OTZHIG_TEPLOVOGO_UZLA;
	
	IZMN_TK_1 : INT := KOMANDA_SMENY_ETAPA_N + 1;
	IZMN_TK_MnachalqnojZagruzki : INT := IZMN_TK_1 + 1;
	IZMN_TK_GlubokijVakuum_R2 : INT := IZMN_TK_MnachalqnojZagruzki + 1;
	IZMN_TK_TotkachkiDopustimoe_T2doP2 : INT := IZMN_TK_GlubokijVakuum_R2 + 1;
	IZMN_TK_VremyaProduvki_T3 : INT := IZMN_TK_TotkachkiDopustimoe_T2doP2 + 1;
	IZMN_TK_TotkachkiArgona_T4 : INT := IZMN_TK_VremyaProduvki_T3 + 1;
	IZMN_TK_CHisloTSiklovOsushki_Nts : INT := IZMN_TK_TotkachkiArgona_T4 + 1;
	IZMN_TK_VremyaOtkachkiPosleOsushki_T5 : INT := IZMN_TK_CHisloTSiklovOsushki_Nts + 1;
	IZMN_TK_PredelDopRnkPosleKontrolyaNatek_R3 : INT := IZMN_TK_VremyaOtkachkiPosleOsushki_T5 + 1;
	IZMN_TK_Totgazovki_KontrNat : INT := IZMN_TK_PredelDopRnkPosleKontrolyaNatek_R3 + 1;
	IZMN_TK_PeriodKontrolya_KontrNat : INT := IZMN_TK_Totgazovki_KontrNat + 1;
	IZMN_TK_DopustimoeNatekanie_KntrNat : INT := IZMN_TK_PeriodKontrolya_KontrNat + 1;
	IZMN_TK_VremyaOtkachkiDopustimoe_T7 : INT := IZMN_TK_DopustimoeNatekanie_KntrNat + 1;
	IZMN_TK_ZD_Qgaza_PPZ : INT := IZMN_TK_VremyaOtkachkiDopustimoe_T7 + 1;
	IZMN_TK_ZD_Pnk_PPZ : INT := IZMN_TK_ZD_Qgaza_PPZ + 1;
	IZMN_TK_ZD_Wipn_K1_PPZ : INT := IZMN_TK_ZD_Pnk_PPZ + 1;
	IZMN_TK_ZD_Wipn_K2_PPZ : INT := IZMN_TK_ZD_Wipn_K1_PPZ + 1;
	IZMN_TK_ZD_Tr_PPZ : INT := IZMN_TK_ZD_Wipn_K2_PPZ + 1;
	IZMN_TK_ZD_Vrosta_PPZ : INT := IZMN_TK_ZD_Tr_PPZ + 1;
	IZMN_TK_ZD_Hur_PPZ : INT := IZMN_TK_ZD_Vrosta_PPZ + 1;
	IZMN_TK_ZD_Dkr_PPZ : INT := IZMN_TK_ZD_Hur_PPZ + 1;
	IZMN_TK_ZD_VzR_PPZ : INT := IZMN_TK_ZD_Dkr_PPZ + 1;
	IZMN_TK_ZD_VzU_PPZ : INT := IZMN_TK_ZD_VzR_PPZ + 1;
	IZMN_TK_ZD_Xz_PPZ : INT := IZMN_TK_ZD_VzU_PPZ + 1;
	IZMN_TK_ZD_Wz_PPZ : INT := IZMN_TK_ZD_Xz_PPZ + 1;
	IZMN_TK_ZD_Wz_UGOL_PPZ : INT := IZMN_TK_ZD_Wz_PPZ + 1;
	IZMN_TK_ZD_VtR_PPZ : INT := IZMN_TK_ZD_Wz_UGOL_PPZ + 1;
	IZMN_TK_ZD_VtU_PPZ : INT := IZMN_TK_ZD_VtR_PPZ + 1;
	IZMN_TK_ZD_Xt_PPZ : INT := IZMN_TK_ZD_VtU_PPZ + 1;
	IZMN_TK_ZD_Wt_PPZ : INT := IZMN_TK_ZD_Xt_PPZ + 1;
	IZMN_TK_ZD_Wt_UGOL_PPZ : INT := IZMN_TK_ZD_Wt_PPZ + 1;
	IZMN_TK_Qgaza_PodgStabRaspl : INT := IZMN_TK_ZD_Wt_UGOL_PPZ + 1;
	IZMN_TK_Pnk_PodgStabRaspl : INT := IZMN_TK_Qgaza_PodgStabRaspl + 1;
	IZMN_TK_Hur_PodgStabRaspl : INT := IZMN_TK_Pnk_PodgStabRaspl + 1;
	IZMN_TK_Wipn_K1_PodgStabRaspl : INT := IZMN_TK_Hur_PodgStabRaspl + 1;
	IZMN_TK_Wt_PodgStabRaspl : INT := IZMN_TK_Wipn_K1_PodgStabRaspl + 1;
	IZMN_TK_VzDvizheniya_kRasplavu_Vpp : INT := IZMN_TK_Wt_PodgStabRaspl + 1;
	IZMN_TK_RasstoyanieDoRasplava_Lpp : INT := IZMN_TK_VzDvizheniya_kRasplavu_Vpp + 1;
	IZMN_TK_Vz_Pogruzheniya_Zatravl : INT := IZMN_TK_RasstoyanieDoRasplava_Lpp + 1;
	IZMN_TK_Hpogr_Zatravl : INT := IZMN_TK_Vz_Pogruzheniya_Zatravl + 1;
	IZMN_TK_TclepogoPlavleniya_Zatravl : INT := IZMN_TK_Hpogr_Zatravl + 1;
	IZMN_TK_Dmin_Zatravl : INT := IZMN_TK_TclepogoPlavleniya_Zatravl + 1;
	IZMN_TK_Dmaks_Zatravl : INT := IZMN_TK_Dmin_Zatravl + 1;
	IZMN_TK_TozhidaniyaDiametra_Zatravl : INT := IZMN_TK_Dmaks_Zatravl + 1;
	IZMN_TK_DiametrDendrita : INT := IZMN_TK_TozhidaniyaDiametra_Zatravl + 1;
	IZMN_TK_Qgaza_Zatravl : INT := IZMN_TK_DiametrDendrita + 1;
	IZMN_TK_Pnk_Zatravl : INT := IZMN_TK_Qgaza_Zatravl + 1;
	IZMN_TK_Wt_Zatravl : INT := IZMN_TK_Pnk_Zatravl + 1;
	IZMN_TK_Wz_Zatravl : INT := IZMN_TK_Wt_Zatravl + 1;
	IZMN_TK_Hur_Zatravl : INT := IZMN_TK_Wz_Zatravl + 1;
	IZMN_TK_Tn_Zatravl : INT := IZMN_TK_Hur_Zatravl + 1;
	IZMN_TK_VzVytyagivaniya_Zatravl : INT := IZMN_TK_Tn_Zatravl + 1;
	IZMN_TK_Rezhim_StabRaspl : INT := IZMN_TK_VzVytyagivaniya_Zatravl + 1;
	IZMN_TK_Vremya_StabRaspl : INT := IZMN_TK_Rezhim_StabRaspl + 1;
	IZMN_TK_Tr_StabRaspl : INT := IZMN_TK_Vremya_StabRaspl + 1;
	IZMN_TK_TnOzh_StabRasp : INT := IZMN_TK_Tr_StabRaspl + 1;
	IZMN_TK_VremyaOsred_Tn_StabRaspl : INT := IZMN_TK_TnOzh_StabRasp + 1;
	IZMN_TK_PopravkaTn_SHejka : INT := IZMN_TK_VremyaOsred_Tn_StabRaspl + 1;
	IZMN_TK_VslepogoVyrashivaniya_SHejka : INT := IZMN_TK_PopravkaTn_SHejka + 1;
	IZMN_TK_TclepogoVyrashivaniya_SHejka : INT := IZMN_TK_VslepogoVyrashivaniya_SHejka + 1;
	IZMN_TK_DkrOzhidaemyj_SHejka : INT := IZMN_TK_TclepogoVyrashivaniya_SHejka + 1;
	IZMN_TK_Popr_kTn_poDkro_SHejka : INT := IZMN_TK_DkrOzhidaemyj_SHejka + 1;
	IZMN_TK_ZD_Dkr_SHejka : INT := IZMN_TK_Popr_kTn_poDkro_SHejka + 1;
	IZMN_TK_VponizheniyaTemperatury_SHejka : INT := IZMN_TK_ZD_Dkr_SHejka + 1;
	IZMN_TK_ZD_Vrosta_SHejka : INT := IZMN_TK_VponizheniyaTemperatury_SHejka + 1;
	IZMN_TK_DlinaHoroshejCHasti_SHejka : INT := IZMN_TK_ZD_Vrosta_SHejka + 1;
	IZMN_TK_Dkr_NachalaSchetaDliny_SHejka : INT := IZMN_TK_DlinaHoroshejCHasti_SHejka + 1;
	IZMN_TK_DkrOtbrakovki_SHejka : INT := IZMN_TK_Dkr_NachalaSchetaDliny_SHejka + 1;
	IZMN_TK_BezopasnyjDkr_SHejka : INT := IZMN_TK_DkrOtbrakovki_SHejka + 1;
	IZMN_TK_VzBezopasnoe_SHejka : INT := IZMN_TK_BezopasnyjDkr_SHejka + 1;
	IZMN_TK_TbezopasnojSkorosti_SHejka : INT := IZMN_TK_VzBezopasnoe_SHejka + 1;
	IZMN_TK_TstabilizatsiiDkr_SHejka : INT := IZMN_TK_TbezopasnojSkorosti_SHejka + 1;
	IZMN_TK_Kp_Dkr_SHejka : INT := IZMN_TK_TstabilizatsiiDkr_SHejka + 1;
	IZMN_TK_Ki_Dkr_SHejka : INT := IZMN_TK_Kp_Dkr_SHejka + 1;
	IZMN_TK_Kd_Dkr_SHejka : INT := IZMN_TK_Ki_Dkr_SHejka + 1;
	IZMN_TK_Kz_Dkr_SHejka : INT := IZMN_TK_Kd_Dkr_SHejka + 1;
	IZMN_TK_Pauza_Dkr_SHejka : INT := IZMN_TK_Kz_Dkr_SHejka + 1;
	IZMN_TK_Kp_Vrosta_SHejka : INT := IZMN_TK_Pauza_Dkr_SHejka + 1;
	IZMN_TK_Ki_Vrosta_SHejka : INT := IZMN_TK_Kp_Vrosta_SHejka + 1;
	IZMN_TK_Kd_Vrosta_SHejka : INT := IZMN_TK_Ki_Vrosta_SHejka + 1;
	IZMN_TK_Kz_Vrosta_SHejka : INT := IZMN_TK_Kd_Vrosta_SHejka + 1;
	IZMN_TK_Pauza_Vrosta_SHejka : INT := IZMN_TK_Kz_Vrosta_SHejka + 1;
	IZMN_TK_VzBezopasnoeSrednee : INT := IZMN_TK_Pauza_Vrosta_SHejka + 1;
	IZMN_TK_VerhnijPorogPodrezkiDkr_SHejka : INT := IZMN_TK_VzBezopasnoeSrednee + 1;
	IZMN_TK_PopravkaTn_Konus : INT := IZMN_TK_VerhnijPorogPodrezkiDkr_SHejka + 1;
	IZMN_TK_Vz_Konus : INT := IZMN_TK_PopravkaTn_Konus + 1;
	IZMN_TK_DkonusaKonechnyj_Konus : INT := IZMN_TK_Vz_Konus + 1;
	IZMN_TK_K1_Konusa : INT := IZMN_TK_DkonusaKonechnyj_Konus + 1;
	IZMN_TK_K2_Konusa : INT := IZMN_TK_K1_Konusa + 1;
	IZMN_TK_DkrTSilindra_KonTSil : INT := IZMN_TK_K2_Konusa + 1;
	IZMN_TK_K1_KonTSil : INT := IZMN_TK_DkrTSilindra_KonTSil + 1;
	IZMN_TK_K2_KonTSil : INT := IZMN_TK_K1_KonTSil + 1;
	IZMN_TK_VrazrashivaniyaGr_KonTSil : INT := IZMN_TK_K2_KonTSil + 1;
	IZMN_TK_PopravkaTn_StabTSil : INT := IZMN_TK_VrazrashivaniyaGr_KonTSil + 1;
	IZMN_TK_VzStabNachalqnaya_StabTSil : INT := IZMN_TK_PopravkaTn_StabTSil + 1;
	IZMN_TK_Kp_Dkr_StabTSil : INT := IZMN_TK_VzStabNachalqnaya_StabTSil + 1;
	IZMN_TK_Ki_Dkr_StabTSil : INT := IZMN_TK_Kp_Dkr_StabTSil + 1;
	IZMN_TK_Kd_Dkr_StabTSil : INT := IZMN_TK_Ki_Dkr_StabTSil + 1;
	IZMN_TK_Kz_Dkr_StabTSil : INT := IZMN_TK_Kd_Dkr_StabTSil + 1;
	IZMN_TK_Pauza_Dkr_StabTSil : INT := IZMN_TK_Kz_Dkr_StabTSil + 1;
	IZMN_TK_VremyaStabTSil : INT := IZMN_TK_Pauza_Dkr_StabTSil + 1;
	IZMN_TK_VremyaPerehodaKonusTSilindr : INT := IZMN_TK_VremyaStabTSil + 1;
	IZMN_TK_Kp_Dkr_TSilindr : INT := IZMN_TK_VremyaPerehodaKonusTSilindr + 1;
	IZMN_TK_Ki_Dkr_TSilindr : INT := IZMN_TK_Kp_Dkr_TSilindr + 1;
	IZMN_TK_Kd_Dkr_TSilindr : INT := IZMN_TK_Ki_Dkr_TSilindr + 1;
	IZMN_TK_Kz_Dkr_TSilindr : INT := IZMN_TK_Kd_Dkr_TSilindr + 1;
	IZMN_TK_Pauza_Dkr_TSilindr : INT := IZMN_TK_Kz_Dkr_TSilindr + 1;
	IZMN_TK_Kp_Vrosta_TSilindr : INT := IZMN_TK_Pauza_Dkr_TSilindr + 1;
	IZMN_TK_Ki_Vrosta_TSilindr : INT := IZMN_TK_Kp_Vrosta_TSilindr + 1;
	IZMN_TK_Kd_Vrosta_TSilindr : INT := IZMN_TK_Ki_Vrosta_TSilindr + 1;
	IZMN_TK_Kz_Vrosta_TSilindr : INT := IZMN_TK_Kd_Vrosta_TSilindr + 1;
	IZMN_TK_Pauza_Vrosta_TSilindr : INT := IZMN_TK_Kz_Vrosta_TSilindr + 1;
	IZMN_TK_PorogovayaLkr_TSilindr : INT := IZMN_TK_Pauza_Vrosta_TSilindr + 1;
	IZMN_TK_PorogovayaMrasplava_TSilindr : INT := IZMN_TK_PorogovayaLkr_TSilindr + 1;
	IZMN_TK_VerhnijPorogPodrezkiDkr_TSilindr : INT := IZMN_TK_PorogovayaMrasplava_TSilindr + 1;
	IZMN_TK_VzBezopasnoe_TSilindr : INT := IZMN_TK_VerhnijPorogPodrezkiDkr_TSilindr + 1;
	IZMN_TK_REZERV_1 : INT := IZMN_TK_VzBezopasnoe_TSilindr + 1;
	IZMN_TK_REZERV_2 : INT := IZMN_TK_REZERV_1 + 1;
	IZMN_TK_REZERV_3 : INT := IZMN_TK_REZERV_2 + 1;
	IZMN_TK_REZERV_4 : INT := IZMN_TK_REZERV_3 + 1;
	IZMN_TK_REZERV_5 : INT := IZMN_TK_REZERV_4 + 1;
	IZMN_TK_UskoreniePriOtryveKristalla : INT := IZMN_TK_REZERV_5 + 1;
	IZMN_TK_DELQTA_Wt_OTRYV_KRISTALLA : INT := IZMN_TK_UskoreniePriOtryveKristalla + 1;
	IZMN_TK_Zagruzki : INT := IZMN_TK_DELQTA_Wt_OTRYV_KRISTALLA + 1;
	IZMN_TK_Normirovanie_Vremeni : INT := IZMN_TK_Zagruzki + 1;
	IZMN_TK_VremyaIzmeneniya_V_Diametra : INT := IZMN_TK_Normirovanie_Vremeni + 1;
	IZMN_TK_KorrektsiiSkorosti : INT := IZMN_TK_VremyaIzmeneniya_V_Diametra + 1;
	IZMN_TK_AvarijnayaSkorostqPodrezki : INT := IZMN_TK_KorrektsiiSkorosti + 1;
	IZMN_TK_SlabayaPodrezka : INT := IZMN_TK_AvarijnayaSkorostqPodrezki + 1;
	IZMN_TK_SilqnayaPodrezka : INT := IZMN_TK_SlabayaPodrezka + 1;
	IZMN_TK_DlinaPerehodaTSilindrKonus : INT := IZMN_TK_SilqnayaPodrezka + 1;
	IZMN_TK_VzPosleOtryvaKristalla : INT := IZMN_TK_DlinaPerehodaTSilindrKonus + 1;
	IZMN_TK_N : INT := IZMN_TK_VzPosleOtryvaKristalla;
	
	IZMN_NP_1 : INT := IZMN_TK_N + 1;
	IZMN_NP_FlagRaschetaHur_poDU : INT := IZMN_NP_1;
	IZMN_NP_FlagRaschetaHur_poDV : INT := IZMN_NP_FlagRaschetaHur_poDU + 1;
	IZMN_NP_FlagRaschetaDkr_poTDD : INT := IZMN_NP_FlagRaschetaHur_poDV + 1;
	IZMN_NP_FlagRaschetaDkr_poDV : INT := IZMN_NP_FlagRaschetaDkr_poTDD + 1;
	IZMN_NP_Tizmereniya_Dkr_DV : INT := IZMN_NP_FlagRaschetaDkr_poDV + 1;
	IZMN_NP_Lz_OT_KVP_DO_DP_Lppz : INT := IZMN_NP_Tizmereniya_Dkr_DV + 1;
	IZMN_NP_Lz_OT_KVP_DO_STYKA_NK : INT := IZMN_NP_Lz_OT_KVP_DO_DP_Lppz + 1;
	IZMN_NP_L_OT_STYKA_NK_DO_PNUR_L1 : INT := IZMN_NP_Lz_OT_KVP_DO_STYKA_NK + 1;
	IZMN_NP_Lz_OT_KVP_DO_KNP : INT := IZMN_NP_L_OT_STYKA_NK_DO_PNUR_L1 + 1;
	IZMN_OP_Lzatravki : INT := IZMN_NP_Lz_OT_KVP_DO_KNP + 1;
	IZMN_OP_LkachestvennojSHejki : INT := IZMN_OP_Lzatravki + 1;
	IZMN_NP_Kdv : INT := IZMN_OP_LkachestvennojSHejki + 1;
	IZMN_NP_Mzatravkoderzhatelya : INT := IZMN_NP_Kdv + 1;
	IZMERITQ_NP_Mzatravkoderzhatelya : INT := IZMN_NP_Mzatravkoderzhatelya + 1;
	IZMN_OP_Mzatravki : INT := IZMERITQ_NP_Mzatravkoderzhatelya + 1;
	IZMERITQ_OP_Mzatravki : INT := IZMN_OP_Mzatravki + 1;
	IZMN_NP_Mtrosa : INT := IZMERITQ_OP_Mzatravki + 1;
	IZMERITQ_NP_Mtrosa : INT := IZMN_NP_Mtrosa + 1;
	IZMN_OP_Lsumm_TSilindrov : INT := IZMERITQ_NP_Mtrosa + 1;
	IZMN_OP_Tsumm_TSilindrov : INT := IZMN_OP_Lsumm_TSilindrov + 1;
	IZMN_OP_Msumm_TSilindrov : INT := IZMN_OP_Tsumm_TSilindrov + 1;
	IZMN_NP_MaksimalqnayaVzR : INT := IZMN_OP_Msumm_TSilindrov + 1;
	IZMN_NP_Lt_OT_KNP_DO_KVP : INT := IZMN_NP_MaksimalqnayaVzR + 1;
	IZMN_NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR : INT := IZMN_NP_Lt_OT_KNP_DO_KVP + 1;
	IZMN_NP_ObqemVakPolosti_V : INT := IZMN_NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR + 1;
	IZMN_NP_DavlenieVklyucheniyaDVN_P1 : INT := IZMN_NP_ObqemVakPolosti_V + 1;
	IZMN_NP_KontrolqnoeVremyaDostizheniyaP1_T1 : INT := IZMN_NP_DavlenieVklyucheniyaDVN_P1 + 1;
	IZMN_NP_Patmosf : INT := IZMN_NP_KontrolqnoeVremyaDostizheniyaP1_T1 + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaQgaza : INT := IZMN_NP_Patmosf + 1;
	IZMN_NP_PogreshnostqQgaza : INT := IZMN_NP_VremyaPerehodnogoProtsessaQgaza + 1;
	IZMN_NP_Ppor : INT := IZMN_NP_PogreshnostqQgaza + 1;
	IZMN_NP_KOEF_NA_OTKR : INT := IZMN_NP_Ppor + 1;
	IZMN_NP_KOEF_NA_ZAKR : INT := IZMN_NP_KOEF_NA_OTKR + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaPnk : INT := IZMN_NP_KOEF_NA_ZAKR + 1;
	IZMN_NP_TokZashityModulya_IP2K_K1 : INT := IZMN_NP_VremyaPerehodnogoProtsessaPnk + 1;
	IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1 : INT := IZMN_NP_TokZashityModulya_IP2K_K1 + 1;
	IZMN_NP_MinimalqnoeKolichestvoModulej_IP2K_K1 : INT := IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1 + 1;
	IZMN_NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE : INT := IZMN_NP_MinimalqnoeKolichestvoModulej_IP2K_K1 + 1;
	IZMN_NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA : INT := IZMN_NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE + 1;
	IZMN_NP_UstavkaPotokaOhlZHidkosti_IP2K_K1 : INT := IZMN_NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA + 1;
	IZMN_NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1 : INT := IZMN_NP_UstavkaPotokaOhlZHidkosti_IP2K_K1 + 1;
	IZMN_NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1 : INT := IZMN_NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1 + 1;
	IZMN_NP_NizhnyayaGranitsaRiz_IP2K_K1 : INT := IZMN_NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1 + 1;
	IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1 : INT := IZMN_NP_NizhnyayaGranitsaRiz_IP2K_K1 + 1;
	IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1 : INT := IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1 + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaWptd : INT := IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1 + 1;
	IZMN_NP_Kp_Wptd : INT := IZMN_NP_VremyaPerehodnogoProtsessaWptd + 1;
	IZMN_NP_TipIPN : INT := IZMN_NP_Kp_Wptd + 1;
	IZMN_NP_Pauza_Wptd : INT := IZMN_NP_TipIPN + 1;
	IZMN_NP_PogreshnostqWipn_K1 : INT := IZMN_NP_Pauza_Wptd + 1;
	IZMN_NP_Iptd_MAH : INT := IZMN_NP_PogreshnostqWipn_K1 + 1;
	IZMN_NP_Wipn_K1_MAH : INT := IZMN_NP_Iptd_MAH + 1;
	IZMN_NP_DeltaW_Razogreva : INT := IZMN_NP_Wipn_K1_MAH + 1;
	IZMN_NP_DeltaVremeniRazogreva : INT := IZMN_NP_DeltaW_Razogreva + 1;
	IZMN_NP_Tn_MAX : INT := IZMN_NP_DeltaVremeniRazogreva + 1;
	IZMN_NP_Kp_Tn : INT := IZMN_NP_Tn_MAX + 1;
	IZMN_NP_Kd_Tn : INT := IZMN_NP_Kp_Tn + 1;
	IZMN_NP_Ki_Tn : INT := IZMN_NP_Kd_Tn + 1;
	IZMN_NP_Kz_Tn : INT := IZMN_NP_Ki_Tn + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaTn : INT := IZMN_NP_Kz_Tn + 1;
	IZMN_NP_PogreshnostqTn : INT := IZMN_NP_VremyaPerehodnogoProtsessaTn + 1;
	IZMN_NP_Pauza_Tn : INT := IZMN_NP_PogreshnostqTn + 1;
	IZMN_NP_Kp_Tr : INT := IZMN_NP_Pauza_Tn + 1;
	IZMN_NP_Kd_Tr : INT := IZMN_NP_Kp_Tr + 1;
	IZMN_NP_Ki_Tr : INT := IZMN_NP_Kd_Tr + 1;
	IZMN_NP_Kz_Tr : INT := IZMN_NP_Ki_Tr + 1;
	IZMN_NP_Pauza_Tr : INT := IZMN_NP_Kz_Tr + 1;
	IZMN_NP_Tr_MAX : INT := IZMN_NP_Pauza_Tr + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaTr : INT := IZMN_NP_Tr_MAX + 1;
	IZMN_NP_PogreshnostqTr : INT := IZMN_NP_VremyaPerehodnogoProtsessaTr + 1;
	IZMN_NP_DeltaTr_MAX : INT := IZMN_NP_PogreshnostqTr + 1;
	IZMN_NP_PopravkaVtR_Nur : INT := IZMN_NP_DeltaTr_MAX + 1;
	IZMN_NP_THRESH_DU : INT := IZMN_NP_PopravkaVtR_Nur + 1;
	IZMN_NP_DRELQ_DU : INT := IZMN_NP_THRESH_DU + 1;
	IZMN_NP_THRESH_GIST_DU : INT := IZMN_NP_DRELQ_DU + 1;
	IZMN_NP_RELATIV_QUALITY_DU : INT := IZMN_NP_THRESH_GIST_DU + 1;
	IZMN_NP_AH_DU : INT := IZMN_NP_RELATIV_QUALITY_DU + 1;
	IZMN_NP_BH_DU : INT := IZMN_NP_AH_DU + 1;
	IZMN_NP_CH_DU : INT := IZMN_NP_BH_DU + 1;
	IZMN_NP_MIN_SIGN_RANGE_DU : INT := IZMN_NP_CH_DU + 1;
	IZMN_NP_MIDDLE_DU : INT := IZMN_NP_MIN_SIGN_RANGE_DU + 1;
	IZMN_NP_MIDDLE_SIGN_DU : INT := IZMN_NP_MIDDLE_DU + 1;
	IZMN_NP_MAX_SIGNAL_VALUE_DU : INT := IZMN_NP_MIDDLE_SIGN_DU + 1;
	IZMN_NP_T_MAX_DU : INT := IZMN_NP_MAX_SIGNAL_VALUE_DU + 1;
	IZMN_NP_BAD_NUMB_DU : INT := IZMN_NP_T_MAX_DU + 1;
	IZMN_NP_H_MAX_DU : INT := IZMN_NP_BAD_NUMB_DU + 1;
	IZMN_NP_H_MIN_DU : INT := IZMN_NP_H_MAX_DU + 1;
	IZMN_NP_WIDTH_PEAK_MAX_DU : INT := IZMN_NP_H_MIN_DU + 1;
	IZMN_NP_ADAPT_LENGTH_DU : INT := IZMN_NP_WIDTH_PEAK_MAX_DU + 1;
	IZMN_NP_KOL_KALIBR_DU : INT := IZMN_NP_ADAPT_LENGTH_DU + 1;
	IZMN_NP_CORRECT_LEVEL_LASER_1_DU : INT := IZMN_NP_KOL_KALIBR_DU + 1;
	IZMN_NP_NLINE1_DU : INT := IZMN_NP_CORRECT_LEVEL_LASER_1_DU + 1;
	IZMN_NP_NLINE2_DU : INT := IZMN_NP_NLINE1_DU + 1;
	IZMN_NP_EXPOSURE_TIME0_DU : INT := IZMN_NP_NLINE2_DU + 1;
	IZMN_NP_EXPOSURE_TIME1_DU : INT := IZMN_NP_EXPOSURE_TIME0_DU + 1;
	IZMN_NP_XTOLER : INT := IZMN_NP_EXPOSURE_TIME1_DU + 1;
	IZMN_NP_YTOLER : INT := IZMN_NP_XTOLER + 1;
	IZMN_NP_YDOWNTOLER : INT := IZMN_NP_YTOLER + 1;
	IZMN_NP_NUMOFSTR : INT := IZMN_NP_YDOWNTOLER + 1;
	IZMN_NP_THRRELIAB : INT := IZMN_NP_NUMOFSTR + 1;
	IZMN_NP_THRDERIV : INT := IZMN_NP_THRRELIAB + 1;
	IZMN_NP_THRDERIVCLB : INT := IZMN_NP_THRDERIV + 1;
	IZMN_NP_BIGZERO_LVL : INT := IZMN_NP_THRDERIVCLB + 1;
	IZMN_NP_BIGPLUS_LVL : INT := IZMN_NP_BIGZERO_LVL + 1;
	IZMN_NP_SMALLZERO_LVL : INT := IZMN_NP_BIGPLUS_LVL + 1;
	IZMN_NP_SMALLPLUS_LVL : INT := IZMN_NP_SMALLZERO_LVL + 1;
	IZMN_NP_MINAVERTIME : INT := IZMN_NP_SMALLPLUS_LVL + 1;
	IZMN_NP_BIGZERO_CTG : INT := IZMN_NP_MINAVERTIME + 1;
	IZMN_NP_BIGZERO_KY : INT := IZMN_NP_BIGZERO_CTG + 1;
	IZMN_NP_BIGZERO_X : INT := IZMN_NP_BIGZERO_KY + 1;
	IZMN_NP_BIGZERO_TG : INT := IZMN_NP_BIGZERO_X + 1;
	IZMN_NP_BIGPLUS_CTG : INT := IZMN_NP_BIGZERO_TG + 1;
	IZMN_NP_BIGPLUS_KY : INT := IZMN_NP_BIGPLUS_CTG + 1;
	IZMN_NP_BIGPLUS_X : INT := IZMN_NP_BIGPLUS_KY + 1;
	IZMN_NP_BIGPLUS_TG : INT := IZMN_NP_BIGPLUS_X + 1;
	IZMN_NP_SMALLZERO_CTG : INT := IZMN_NP_BIGPLUS_TG + 1;
	IZMN_NP_SMALLZERO_KY : INT := IZMN_NP_SMALLZERO_CTG + 1;
	IZMN_NP_SMALLZERO_X : INT := IZMN_NP_SMALLZERO_KY + 1;
	IZMN_NP_SMALLZERO_TG : INT := IZMN_NP_SMALLZERO_X + 1;
	IZMN_NP_SMALLPLUS_CTG : INT := IZMN_NP_SMALLZERO_TG + 1;
	IZMN_NP_SMALLPLUS_KY : INT := IZMN_NP_SMALLPLUS_CTG + 1;
	IZMN_NP_SMALLPLUS_X : INT := IZMN_NP_SMALLPLUS_KY + 1;
	IZMN_NP_SMALLPLUS_TG : INT := IZMN_NP_SMALLPLUS_X + 1;
	IZMN_NP_POPRAVKA_K_TDD_TSILINDR : INT := IZMN_NP_SMALLPLUS_TG + 1;
	IZMN_NP_POPRAVKA_K_TDD_SHEJKA : INT := IZMN_NP_POPRAVKA_K_TDD_TSILINDR + 1;
	IZMN_TARIROVKA_POPRAVKI_K_TDD_TSILINDR : INT := IZMN_NP_POPRAVKA_K_TDD_SHEJKA + 1;
	IZMN_TARIROVKA_POPRAVKI_K_TDD_SHEJKA : INT := IZMN_TARIROVKA_POPRAVKI_K_TDD_TSILINDR + 1;
	IZMN_NP_VremyaOsredneniya_DTN : INT := IZMN_TARIROVKA_POPRAVKI_K_TDD_SHEJKA + 1;
	IZMN_NP_Tsm_DTN : INT := IZMN_NP_VremyaOsredneniya_DTN + 1;
	RASSCHITATQ_NP_Tsm_DTN : INT := IZMN_NP_Tsm_DTN + 1;
	IZMN_NP_VremyaOsredneniya_DTR : INT := RASSCHITATQ_NP_Tsm_DTN + 1;
	IZMN_NP_Tsm_DTR : INT := IZMN_NP_VremyaOsredneniya_DTR + 1;
	RASSCHITATQ_NP_Tsm_DTR : INT := IZMN_NP_Tsm_DTR + 1;
	IZMN_NP_NOMINAL_KOEF_V_ZR : INT := RASSCHITATQ_NP_Tsm_DTR + 1;
	IZMN_NP_NOMINAL_KOEF_X_ZR : INT := IZMN_NP_NOMINAL_KOEF_V_ZR + 1;
	IZMN_NP_NOMINAL_KOEF_V_ZU : INT := IZMN_NP_NOMINAL_KOEF_X_ZR + 1;
	IZMN_NP_NOMINAL_KOEF_X_ZU : INT := IZMN_NP_NOMINAL_KOEF_V_ZU + 1;
	IZMN_NP_KOEF_V_ZR : INT := IZMN_NP_NOMINAL_KOEF_X_ZU + 1;
	IZMN_NP_KOEF_X_ZR : INT := IZMN_NP_KOEF_V_ZR + 1;
	IZMN_NP_KOEF_V_ZU : INT := IZMN_NP_KOEF_X_ZR + 1;
	IZMN_NP_KOEF_X_ZU : INT := IZMN_NP_KOEF_V_ZU + 1;
	IZMN_NP_KOEF_V_ZV : INT := IZMN_NP_KOEF_X_ZU + 1;
	IZMN_NP_KOEF_X_ZV : INT := IZMN_NP_KOEF_V_ZV + 1;
	IZMN_NP_KOEF_V_TR : INT := IZMN_NP_KOEF_X_ZV + 1;
	IZMN_NP_KOEF_X_TR : INT := IZMN_NP_KOEF_V_TR + 1;
	IZMN_NP_KOEF_V_TU : INT := IZMN_NP_KOEF_X_TR + 1;
	IZMN_NP_KOEF_X_TU : INT := IZMN_NP_KOEF_V_TU + 1;
	IZMN_NP_KOEF_V_TV : INT := IZMN_NP_KOEF_X_TU + 1;
	IZMN_NP_KOEF_X_TV : INT := IZMN_NP_KOEF_V_TV + 1;
	IZMN_NP_RAB_USK_ZR : INT := IZMN_NP_KOEF_X_TV + 1;
	IZMN_NP_KOEF_A_ZR : INT := IZMN_NP_RAB_USK_ZR + 1;
	IZMN_NP_AVR_TOR_ZR : INT := IZMN_NP_KOEF_A_ZR + 1;
	IZMN_NP_RAB_USK_ZU : INT := IZMN_NP_AVR_TOR_ZR + 1;
	IZMN_NP_KOEF_A_ZU : INT := IZMN_NP_RAB_USK_ZU + 1;
	IZMN_NP_AVR_TOR_ZU : INT := IZMN_NP_KOEF_A_ZU + 1;
	IZMN_NP_RAB_USK_ZV : INT := IZMN_NP_AVR_TOR_ZU + 1;
	IZMN_NP_KOEF_A_ZV : INT := IZMN_NP_RAB_USK_ZV + 1;
	IZMN_NP_AVR_TOR_ZV : INT := IZMN_NP_KOEF_A_ZV + 1;
	IZMN_NP_RAB_USK_TR : INT := IZMN_NP_AVR_TOR_ZV + 1;
	IZMN_NP_KOEF_A_TR : INT := IZMN_NP_RAB_USK_TR + 1;
	IZMN_NP_AVR_TOR_TR : INT := IZMN_NP_KOEF_A_TR + 1;
	IZMN_NP_RAB_USK_TU : INT := IZMN_NP_AVR_TOR_TR + 1;
	IZMN_NP_KOEF_A_TU : INT := IZMN_NP_RAB_USK_TU + 1;
	IZMN_NP_AVR_TOR_TU : INT := IZMN_NP_KOEF_A_TU + 1;
	IZMN_NP_RAB_USK_TV : INT := IZMN_NP_AVR_TOR_TU + 1;
	IZMN_NP_KOEF_A_TV : INT := IZMN_NP_RAB_USK_TV + 1;
	IZMN_NP_AVR_TOR_TV : INT := IZMN_NP_KOEF_A_TV + 1;
	IZMN_NP_MIN_DU_Hur : INT := IZMN_NP_AVR_TOR_TV + 1;
	IZMN_NP_MAX_DU_Hur : INT := IZMN_NP_MIN_DU_Hur + 1;
	IZMN_NP_MIN_DUDD_Hur : INT := IZMN_NP_MAX_DU_Hur + 1;
	IZMN_NP_MAX_DUDD_Hur : INT := IZMN_NP_MIN_DUDD_Hur + 1;
	IZMN_NP_Kp_DU_Hur : INT := IZMN_NP_MAX_DUDD_Hur + 1;
	IZMN_NP_Kp_DUDD_Hur : INT := IZMN_NP_Kp_DU_Hur + 1;
	IZMN_NP_PredupreditelqnyjHur : INT := IZMN_NP_Kp_DUDD_Hur + 1;
	IZMN_NP_AvarijnayaOshibkaHur : INT := IZMN_NP_PredupreditelqnyjHur + 1;
	IZMN_NP_Kp_Dkr : INT := IZMN_NP_AvarijnayaOshibkaHur + 1;
	IZMN_NP_Kd_Dkr : INT := IZMN_NP_Kp_Dkr + 1;
	IZMN_NP_Ki_Dkr : INT := IZMN_NP_Kd_Dkr + 1;
	IZMN_NP_Kz_Dkr : INT := IZMN_NP_Ki_Dkr + 1;
	IZMN_NP_Dkr_MAX : INT := IZMN_NP_Kz_Dkr + 1;
	IZMN_NP_DeltaVzRS_MAH : INT := IZMN_NP_Dkr_MAX + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaDkr : INT := IZMN_NP_DeltaVzRS_MAH + 1;
	IZMN_NP_PogreshnostqDkr : INT := IZMN_NP_VremyaPerehodnogoProtsessaDkr + 1;
	IZMN_NP_Pauza_Dkr : INT := IZMN_NP_PogreshnostqDkr + 1;
	IZMN_NP_Kp_Vrosta : INT := IZMN_NP_Pauza_Dkr + 1;
	IZMN_NP_Kd_Vrosta : INT := IZMN_NP_Kp_Vrosta + 1;
	IZMN_NP_Ki_Vrosta : INT := IZMN_NP_Kd_Vrosta + 1;
	IZMN_NP_Kz_Vrosta : INT := IZMN_NP_Ki_Vrosta + 1;
	IZMN_NP_Pauza_Vrosta : INT := IZMN_NP_Kz_Vrosta + 1;
	IZMN_NP_VremyaOsredneniyaVzVrosta : INT := IZMN_NP_Pauza_Vrosta + 1;
	IZMN_NP_VzR_MAX : INT := IZMN_NP_VremyaOsredneniyaVzVrosta + 1;
	IZMN_NP_DeltaTn_MAX : INT := IZMN_NP_VzR_MAX + 1;
	IZMN_NP_Pauza_REG_ROSTA : INT := IZMN_NP_DeltaTn_MAX + 1;
	IZMN_NP_VremyaPerehodnogoProtsessaVrosta : INT := IZMN_NP_Pauza_REG_ROSTA + 1;
	IZMN_NP_PogreshnostqVrosta : INT := IZMN_NP_VremyaPerehodnogoProtsessaVrosta + 1;
	IZMN_NP_KoefA_Pnk : INT := IZMN_NP_PogreshnostqVrosta + 1;
	IZMN_NP_KoefV_Pnk : INT := IZMN_NP_KoefA_Pnk + 1;
	IZMN_NP_REZH_ISPOLN_RA : INT := IZMN_NP_KoefV_Pnk + 1;
	IZMN_NP_RADIUS_STENKI_TIGLYA : INT := IZMN_NP_REZH_ISPOLN_RA + 1;
	IZMN_NP_RADIUS_DNA_TIGLYA : INT := IZMN_NP_RADIUS_STENKI_TIGLYA + 1;
	IZMN_NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE : INT := IZMN_NP_RADIUS_DNA_TIGLYA + 1;
	IZMN_NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA : INT := IZMN_NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE + 1;
	IZMN_NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM : INT := IZMN_NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA + 1;
	IZMN_NP_OTZHIG_DELQTA_W_OTZHIGA : INT := IZMN_NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM + 1;
	IZMN_NP_OTZHIG_DELQTA_T_OTZHIGA : INT := IZMN_NP_OTZHIG_DELQTA_W_OTZHIGA + 1;
	IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS : INT := IZMN_NP_OTZHIG_DELQTA_T_OTZHIGA + 1;
	IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MIN : INT := IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS + 1;
	IZMN_NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA : INT := IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MIN + 1;
	IZMN_NP_OTZHIG_VREMYA_OTZHIGA : INT := IZMN_NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA + 1;
	IZMN_NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN : INT := IZMN_NP_OTZHIG_VREMYA_OTZHIGA + 1;
	IZMN_NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN : INT := IZMN_NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN + 1;
	IZMN_NP_N : INT := IZMN_NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN + 1;
	
	IZMN_NP_GLUBINA_TIGLYA : INT := IZMN_NP_N + 1;
	IZMN_NP_DIAMETR_TIGLYA : INT := IZMN_NP_GLUBINA_TIGLYA + CHISLO_TOCHEK_TIGLYA;
	IZMN_NP_VES_RASPLAVA_V_TIGLE : INT := IZMN_NP_DIAMETR_TIGLYA + CHISLO_TOCHEK_TIGLYA;
	
	IZMN_ZD_1 : INT := IZMN_NP_VES_RASPLAVA_V_TIGLE + CHISLO_TOCHEK_TIGLYA;
	IZMN_ZD_Qgaza : INT := IZMN_ZD_1;
	IZMN_ZD_Pnk : INT := IZMN_ZD_Qgaza + 1;
	IZMN_ZD_Wipn_K1 : INT := IZMN_ZD_Pnk + 1;
	IZMN_ZD_Wipn_K2 : INT := IZMN_ZD_Wipn_K1 + 1;
	IZMN_ZD_Baza_REG_ROSTA : INT := IZMN_ZD_Wipn_K2 + 1;
	IZMN_ZD_Tn : INT := IZMN_ZD_Baza_REG_ROSTA + 1;
	IZMN_ZD_Tr : INT := IZMN_ZD_Tn + 1;
	IZMN_ZD_Vrosta : INT := IZMN_ZD_Tr + 1;
	IZMN_ZD_Hur : INT := IZMN_ZD_Vrosta + 1;
	IZMN_ZD_Dkr : INT := IZMN_ZD_Hur + 1;
	IZMN_ZD_VzR : INT := IZMN_ZD_Dkr + 1;
	IZMN_ZD_VzU : INT := IZMN_ZD_VzR + 1;
	IZMN_ZD_Xz : INT := IZMN_ZD_VzU + 1;
	IZMN_ZD_Wz : INT := IZMN_ZD_Xz + 1;
	IZMN_ZD_Wz_UGOL : INT := IZMN_ZD_Wz + 1;
	IZMN_ZD_VtR : INT := IZMN_ZD_Wz_UGOL + 1;
	IZMN_ZD_VtU : INT := IZMN_ZD_VtR + 1;
	IZMN_ZD_Xt : INT := IZMN_ZD_VtU + 1;
	IZMN_ZD_Wt : INT := IZMN_ZD_Xt + 1;
	IZMN_ZD_Wt_UGOL : INT := IZMN_ZD_Wt + 1;
	IZMN_ZD_N : INT := IZMN_ZD_Wt_UGOL;
	
	FORSAZH_U_VKL_PTD_ON : INT := IZMN_ZD_N + 1;
	FORSAZH_U_VKL_PTD_OFF : INT := FORSAZH_U_VKL_PTD_ON + 1;
	FORSAZH_U_VYK_PTD_ON : INT := FORSAZH_U_VKL_PTD_OFF + 1;
	FORSAZH_U_VYK_PTD_OFF : INT := FORSAZH_U_VYK_PTD_ON + 1;
	FORSAZH_U_VKL_RV_PTD_ON : INT := FORSAZH_U_VYK_PTD_OFF + 1;
	FORSAZH_U_VKL_RV_PTD_OFF : INT := FORSAZH_U_VKL_RV_PTD_ON + 1;
	FORSAZH_U_VKL_ASS_ON : INT := FORSAZH_U_VKL_RV_PTD_OFF + 1;
	FORSAZH_U_VKL_ASS_OFF : INT := FORSAZH_U_VKL_ASS_ON + 1;
	FORSAZH_U_VE12_ON : INT := FORSAZH_U_VKL_ASS_OFF + 1;
	FORSAZH_U_VE12_OFF : INT := FORSAZH_U_VE12_ON + 1;
	FORSAZH_FPGA3_N5_ON : INT := FORSAZH_U_VE12_OFF + 1;
	FORSAZH_FPGA3_N5_OFF : INT := FORSAZH_FPGA3_N5_ON + 1;
	FORSAZH_FPGA3_N6_ON : INT := FORSAZH_FPGA3_N5_OFF + 1;
	FORSAZH_FPGA3_N6_OFF : INT := FORSAZH_FPGA3_N6_ON + 1;
	FORSAZH_FPGA3_N7_ON : INT := FORSAZH_FPGA3_N6_OFF + 1;
	FORSAZH_FPGA3_N7_OFF : INT := FORSAZH_FPGA3_N7_ON + 1;
	FORSAZH_U_LAZERA_DP_ON : INT := FORSAZH_FPGA3_N7_OFF + 1;
	FORSAZH_U_LAZERA_DP_OFF : INT := FORSAZH_U_LAZERA_DP_ON + 1;
	FORSAZH_FPGA3_N9_ON : INT := FORSAZH_U_LAZERA_DP_OFF + 1;
	FORSAZH_FPGA3_N9_OFF : INT := FORSAZH_FPGA3_N9_ON + 1;
	FORSAZH_FPGA3_N10_ON : INT := FORSAZH_FPGA3_N9_OFF + 1;
	FORSAZH_FPGA3_N10_OFF : INT := FORSAZH_FPGA3_N10_ON + 1;
	FORSAZH_FPGA3_N11_ON : INT := FORSAZH_FPGA3_N10_OFF + 1;
	FORSAZH_FPGA3_N11_OFF : INT := FORSAZH_FPGA3_N11_ON + 1;
	FORSAZH_FPGA3_N12_ON : INT := FORSAZH_FPGA3_N11_OFF + 1;
	FORSAZH_FPGA3_N12_OFF : INT := FORSAZH_FPGA3_N12_ON + 1;
	FORSAZH_FPGA3_N13_ON : INT := FORSAZH_FPGA3_N12_OFF + 1;
	FORSAZH_FPGA3_N13_OFF : INT := FORSAZH_FPGA3_N13_ON + 1;
	FORSAZH_FPGA3_N14_ON : INT := FORSAZH_FPGA3_N13_OFF + 1;
	FORSAZH_FPGA3_N14_OFF : INT := FORSAZH_FPGA3_N14_ON + 1;
	FORSAZH_FPGA3_N15_ON : INT := FORSAZH_FPGA3_N14_OFF + 1;
	FORSAZH_FPGA3_N15_OFF : INT := FORSAZH_FPGA3_N15_ON + 1;
	FORSAZH_FPGA3_N16_ON : INT := FORSAZH_FPGA3_N15_OFF + 1;
	FORSAZH_FPGA3_N16_OFF : INT := FORSAZH_FPGA3_N16_ON + 1;
	FORSAZH_FPGA3_N17_ON : INT := FORSAZH_FPGA3_N16_OFF + 1;
	FORSAZH_FPGA3_N17_OFF : INT := FORSAZH_FPGA3_N17_ON + 1;
	FORSAZH_FPGA3_N18_ON : INT := FORSAZH_FPGA3_N17_OFF + 1;
	FORSAZH_FPGA3_N18_OFF : INT := FORSAZH_FPGA3_N18_ON + 1;
	FORSAZH_FPGA3_N19_ON : INT := FORSAZH_FPGA3_N18_OFF + 1;
	FORSAZH_FPGA3_N19_OFF : INT := FORSAZH_FPGA3_N19_ON + 1;
	FORSAZH_FPGA3_N20_ON : INT := FORSAZH_FPGA3_N19_OFF + 1;
	FORSAZH_FPGA3_N20_OFF : INT := FORSAZH_FPGA3_N20_ON + 1;
	FORSAZH_FPGA3_N21_ON : INT := FORSAZH_FPGA3_N20_OFF + 1;
	FORSAZH_FPGA3_N21_OFF : INT := FORSAZH_FPGA3_N21_ON + 1;
	FORSAZH_FPGA3_N22_ON : INT := FORSAZH_FPGA3_N21_OFF + 1;
	FORSAZH_FPGA3_N22_OFF : INT := FORSAZH_FPGA3_N22_ON + 1;
	FORSAZH_FPGA3_N23_ON : INT := FORSAZH_FPGA3_N22_OFF + 1;
	FORSAZH_FPGA3_N23_OFF : INT := FORSAZH_FPGA3_N23_ON + 1;
	FORSAZH_U_NVR1_ON : INT := FORSAZH_FPGA3_N23_OFF + 1;
	FORSAZH_U_NVR1_OFF : INT := FORSAZH_U_NVR1_ON + 1;
	FORSAZH_U_NVR2_ON : INT := FORSAZH_U_NVR1_OFF + 1;
	FORSAZH_U_NVR2_OFF : INT := FORSAZH_U_NVR2_ON + 1;
	FORSAZH_U_RAZBLOKIROVKA_VK_NK_ON : INT := FORSAZH_U_NVR2_OFF + 1;
	FORSAZH_U_RAZBLOKIROVKA_VK_NK_OFF : INT := FORSAZH_U_RAZBLOKIROVKA_VK_NK_ON + 1;
	FORSAZH_U_TEST_DK_ON : INT := FORSAZH_U_RAZBLOKIROVKA_VK_NK_OFF + 1;
	FORSAZH_U_TEST_DK_OFF : INT := FORSAZH_U_TEST_DK_ON + 1;
	FORSAZH_U_ZAKR_RRG_ON : INT := FORSAZH_U_TEST_DK_OFF + 1;
	FORSAZH_U_ZAKR_RRG_OFF : INT := FORSAZH_U_ZAKR_RRG_ON + 1;
	FORSAZH_U_OTKR_RRG_ON : INT := FORSAZH_U_ZAKR_RRG_OFF + 1;
	FORSAZH_U_OTKR_RRG_OFF : INT := FORSAZH_U_OTKR_RRG_ON + 1;
	FORSAZH_U_VT3_ON : INT := FORSAZH_U_OTKR_RRG_OFF + 1;
	FORSAZH_U_VT3_OFF : INT := FORSAZH_U_VT3_ON + 1;
	FORSAZH_U_VKL_48V_ON : INT := FORSAZH_U_VT3_OFF + 1;
	FORSAZH_U_VKL_48V_OFF : INT := FORSAZH_U_VKL_48V_ON + 1;
	FORSAZH_U_VE1_ON : INT := FORSAZH_U_VKL_48V_OFF + 1;
	FORSAZH_U_VE1_OFF : INT := FORSAZH_U_VE1_ON + 1;
	FORSAZH_U_VE2_ON : INT := FORSAZH_U_VE1_OFF + 1;
	FORSAZH_U_VE2_OFF : INT := FORSAZH_U_VE2_ON + 1;
	FORSAZH_U_VE3_ON : INT := FORSAZH_U_VE2_OFF + 1;
	FORSAZH_U_VE3_OFF : INT := FORSAZH_U_VE3_ON + 1;
	FORSAZH_U_VE4_ON : INT := FORSAZH_U_VE3_OFF + 1;
	FORSAZH_U_VE4_OFF : INT := FORSAZH_U_VE4_ON + 1;
	FORSAZH_U_VE5_ON : INT := FORSAZH_U_VE4_OFF + 1;
	FORSAZH_U_VE5_OFF : INT := FORSAZH_U_VE5_ON + 1;
	FORSAZH_U_VE6_ON : INT := FORSAZH_U_VE5_OFF + 1;
	FORSAZH_U_VE6_OFF : INT := FORSAZH_U_VE6_ON + 1;
	FORSAZH_U_VE7_ON : INT := FORSAZH_U_VE6_OFF + 1;
	FORSAZH_U_VE7_OFF : INT := FORSAZH_U_VE7_ON + 1;
	FORSAZH_U_VKL_24V_ON : INT := FORSAZH_U_VE7_OFF + 1;
	FORSAZH_U_VKL_24V_OFF : INT := FORSAZH_U_VKL_24V_ON + 1;
	FORSAZH_U_DVN1_ON : INT := FORSAZH_U_VKL_24V_OFF + 1;
	FORSAZH_U_DVN1_OFF : INT := FORSAZH_U_DVN1_ON + 1;
	FORSAZH_U_DVN2_ON : INT := FORSAZH_U_DVN1_OFF + 1;
	FORSAZH_U_DVN2_OFF : INT := FORSAZH_U_DVN2_ON + 1;
	FORSAZH_U_VE10_ON : INT := FORSAZH_U_DVN2_OFF + 1;
	FORSAZH_U_VE10_OFF : INT := FORSAZH_U_VE10_ON + 1;
	FORSAZH_U_VE11_ON : INT := FORSAZH_U_VE10_OFF + 1;
	FORSAZH_U_VE11_OFF : INT := FORSAZH_U_VE11_ON + 1;
	FORSAZH_U_OTKR_VM14_ON : INT := FORSAZH_U_VE11_OFF + 1;
	FORSAZH_U_OTKR_VM14_OFF : INT := FORSAZH_U_OTKR_VM14_ON + 1;
	FORSAZH_U_ZAKR_VM14_ON : INT := FORSAZH_U_OTKR_VM14_OFF + 1;
	FORSAZH_U_ZAKR_VM14_OFF : INT := FORSAZH_U_ZAKR_VM14_ON + 1;
	FORSAZH_U_VE8_ON : INT := FORSAZH_U_ZAKR_VM14_OFF + 1;
	FORSAZH_U_VE8_OFF : INT := FORSAZH_U_VE8_ON + 1;
	FORSAZH_U_VE9_ON : INT := FORSAZH_U_VE8_OFF + 1;
	FORSAZH_U_VE9_OFF : INT := FORSAZH_U_VE9_ON + 1;
	
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV : INT := FORSAZH_U_VE12_OFF + 1;
	PK_PIV_OSHIBKA_ZAPRESHENNAYA_KOMANDA_REZHIMA_INITSIALIZATSII : INT := PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + 1;
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_RA : INT := PK_PIV_OSHIBKA_ZAPRESHENNAYA_KOMANDA_REZHIMA_INITSIALIZATSII + 1;
	PK_PIV_OSHIBKA_KODA_ETAPA_RA : INT := PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_RA + 1;
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_KRP : INT := PK_PIV_OSHIBKA_KODA_ETAPA_RA + 1;
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_OTZHIG_TU : INT := PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_KRP + 1;
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_DVK : INT := PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_OTZHIG_TU + 1;
	PK_PIV_OSHIBKA_KODA_ETAPA_DVK : INT := PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_DVK + 1;
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_RF : INT := PK_PIV_OSHIBKA_KODA_ETAPA_DVK + 1;
	
	PK_PIV_DO_OTMENY_SEKUND : INT := PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_RF + 1;
	PK_PIV_DO_OTMENY_OSTALOSQ_SEKUND : INT := PK_PIV_DO_OTMENY_SEKUND + 1;
	PK_PIV_KONTROLQ_TAJMAUTA_OTMENY_SNYAT : INT := PK_PIV_DO_OTMENY_OSTALOSQ_SEKUND + 1;
	PK_PIV_NAZHATA_KNOPKA_OTMENA : INT := PK_PIV_KONTROLQ_TAJMAUTA_OTMENY_SNYAT + 1;
	
	PK_PIV_OSHIBKA_KRP : INT := PK_PIV_NAZHATA_KNOPKA_OTMENA + 1;
	PK_PIV_ZAFIKSIROVANA_OSHIBKA_DVK : INT := PK_PIV_OSHIBKA_KRP + 1;
	PK_PIV_OTZHIG_KONETS_OTZHIGA : INT := PK_PIV_ZAFIKSIROVANA_OSHIBKA_DVK + 1;
	PK_PIV_OTZHIG_NEGERMETICHNOSTQ_USTANOVKI : INT := PK_PIV_OTZHIG_KONETS_OTZHIGA + 1;
	PK_PIV_OSHIBKA_OTZHIGA : INT := PK_PIV_OTZHIG_NEGERMETICHNOSTQ_USTANOVKI + 1;
	
	IP2K_OTSUTSTVUET : INT := PK_PIV_OSHIBKA_OTZHIGA + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_IP2K_K1 : INT := IP2K_OTSUTSTVUET + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_IP2K_K2 : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_IP2K_K1 + 1;
	PTD_V_NORME : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_IP2K_K2 + 1;
	OTKAZ_PTD : INT := PTD_V_NORME + 1;
	SOPROTIVLENIE_IZOLYATSII_PTD_NIZHE_NORMY : INT := OTKAZ_PTD + 1;
	SOPROTIVLENIE_V_NORME : INT := SOPROTIVLENIE_IZOLYATSII_PTD_NIZHE_NORMY + 1;
	SRABOTALA_ZASHITA_PTD : INT := SOPROTIVLENIE_V_NORME + 1;
	ZASHITA_V_NORME : INT := SRABOTALA_ZASHITA_PTD + 1;
	TIP_IPN_NE_PROINITSIALIZIROVAN : INT := ZASHITA_V_NORME + 1;
	OSHIBKA_TU : INT := TIP_IPN_NE_PROINITSIALIZIROVAN + 1;
	TU_V_NORME : INT := OSHIBKA_TU + 1;
	
	PK_PIV_VE1_OTKRYT : INT := TU_V_NORME + 1;
	PK_PIV_VE1_ZAKRYT : INT := PK_PIV_VE1_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE1 : INT := PK_PIV_VE1_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE1 : INT := PK_PIV_NEKNTR_OTKR_VE1 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE1 : INT := PK_PIV_NEKNTR_ZAKR_VE1 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE1 : INT := PK_PIV_NEKNTR_OTKR_U_VE1 + 1;
	PK_PIV_KLAPAN_VE1_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE1 + 1;
	PK_PIV_OTKAZ_OTKR_VE1 : INT := PK_PIV_KLAPAN_VE1_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE1 : INT := PK_PIV_OTKAZ_OTKR_VE1 + 1;
	
	PK_PIV_VE2_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE1 + 1;
	PK_PIV_VE2_ZAKRYT : INT := PK_PIV_VE2_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE2 : INT := PK_PIV_VE2_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE2 : INT := PK_PIV_NEKNTR_OTKR_VE2 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE2 : INT := PK_PIV_NEKNTR_ZAKR_VE2 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE2 : INT := PK_PIV_NEKNTR_OTKR_U_VE2 + 1;
	PK_PIV_KLAPAN_VE2_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE2 + 1;
	PK_PIV_OTKAZ_OTKR_VE2 : INT := PK_PIV_KLAPAN_VE2_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE2 : INT := PK_PIV_OTKAZ_OTKR_VE2 + 1;
	
	PK_PIV_VE3_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE2 + 1;
	PK_PIV_VE3_ZAKRYT : INT := PK_PIV_VE3_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE3 : INT := PK_PIV_VE3_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE3 : INT := PK_PIV_NEKNTR_OTKR_VE3 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE3 : INT := PK_PIV_NEKNTR_ZAKR_VE3 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE3 : INT := PK_PIV_NEKNTR_OTKR_U_VE3 + 1;
	PK_PIV_KLAPAN_VE3_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE3 + 1;
	PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE3_Rnk_MENQSHE_Pavd1 : INT := PK_PIV_KLAPAN_VE3_V_NORME + 1;
	PK_PIV_OTKAZ_OTKR_VE3 : INT := PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE3_Rnk_MENQSHE_Pavd1 + 1;
	PK_PIV_OTKAZ_ZAKR_VE3 : INT := PK_PIV_OTKAZ_OTKR_VE3 + 1;
	
	PK_PIV_VE4_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE3 + 1;
	PK_PIV_VE4_ZAKRYT : INT := PK_PIV_VE4_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE4 : INT := PK_PIV_VE4_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE4 : INT := PK_PIV_NEKNTR_OTKR_VE4 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE4 : INT := PK_PIV_NEKNTR_ZAKR_VE4 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE4 : INT := PK_PIV_NEKNTR_OTKR_U_VE4 + 1;
	PK_PIV_KLAPAN_VE4_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE4 + 1;
	PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE4_Rnk_MENQSHE_Pavd2 : INT := PK_PIV_KLAPAN_VE4_V_NORME + 1;
	PK_PIV_OTKAZ_OTKR_VE4 : INT := PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE4_Rnk_MENQSHE_Pavd2 + 1;
	PK_PIV_OTKAZ_ZAKR_VE4 : INT := PK_PIV_OTKAZ_OTKR_VE4 + 1;
	
	PK_PIV_VE5_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE4 + 1;
	PK_PIV_VE5_ZAKRYT : INT := PK_PIV_VE5_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE5 : INT := PK_PIV_VE5_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE5 : INT := PK_PIV_NEKNTR_OTKR_VE5 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE5 : INT := PK_PIV_NEKNTR_ZAKR_VE5 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE5 : INT := PK_PIV_NEKNTR_OTKR_U_VE5 + 1;
	PK_PIV_KLAPAN_VE5_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE5 + 1;
	PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE5_Rvk_MENQSHE_Pavd1 : INT := PK_PIV_KLAPAN_VE5_V_NORME + 1;
	PK_PIV_OTKAZ_OTKR_VE5 : INT := PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE5_Rvk_MENQSHE_Pavd1 + 1;
	PK_PIV_OTKAZ_ZAKR_VE5 : INT := PK_PIV_OTKAZ_OTKR_VE5 + 1;
	
	PK_PIV_VE6_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE5 + 1;
	PK_PIV_VE6_ZAKRYT : INT := PK_PIV_VE6_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE6 : INT := PK_PIV_VE6_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE6 : INT := PK_PIV_NEKNTR_OTKR_VE6 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE6 : INT := PK_PIV_NEKNTR_ZAKR_VE6 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE6 : INT := PK_PIV_NEKNTR_OTKR_U_VE6 + 1;
	PK_PIV_KLAPAN_VE6_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE6 + 1;
	PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE6_Rvk_MENQSHE_Pavd2 : INT := PK_PIV_KLAPAN_VE6_V_NORME + 1;
	PK_PIV_OTKAZ_OTKR_VE6 : INT := PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE6_Rvk_MENQSHE_Pavd2 + 1;
	PK_PIV_OTKAZ_ZAKR_VE6 : INT := PK_PIV_OTKAZ_OTKR_VE6 + 1;
	
	PK_PIV_VE7_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE6 + 1;
	PK_PIV_VE7_ZAKRYT : INT := PK_PIV_VE7_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE7 : INT := PK_PIV_VE7_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE7 : INT := PK_PIV_NEKNTR_OTKR_VE7 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE7 : INT := PK_PIV_NEKNTR_ZAKR_VE7 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE7 : INT := PK_PIV_NEKNTR_OTKR_U_VE7 + 1;
	PK_PIV_KLAPAN_VE7_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE7 + 1;
	PK_PIV_OTKAZ_OTKR_VE7 : INT := PK_PIV_KLAPAN_VE7_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE7 : INT := PK_PIV_OTKAZ_OTKR_VE7 + 1;
	
	PK_PIV_VE8_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE7 + 1;
	PK_PIV_VE8_ZAKRYT : INT := PK_PIV_VE8_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE8 : INT := PK_PIV_VE8_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE8 : INT := PK_PIV_NEKNTR_OTKR_VE8 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE8 : INT := PK_PIV_NEKNTR_ZAKR_VE8 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE8 : INT := PK_PIV_NEKNTR_OTKR_U_VE8 + 1;
	PK_PIV_KLAPAN_VE8_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE8 + 1;
	PK_PIV_OTKAZ_OTKR_VE8 : INT := PK_PIV_KLAPAN_VE8_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE8 : INT := PK_PIV_OTKAZ_OTKR_VE8 + 1;
	
	PK_PIV_VE9_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE8 + 1;
	PK_PIV_VE9_ZAKRYT : INT := PK_PIV_VE9_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE9 : INT := PK_PIV_VE9_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE9 : INT := PK_PIV_NEKNTR_OTKR_VE9 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE9 : INT := PK_PIV_NEKNTR_ZAKR_VE9 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE9 : INT := PK_PIV_NEKNTR_OTKR_U_VE9 + 1;
	PK_PIV_KLAPAN_VE9_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE9 + 1;
	PK_PIV_OTKAZ_OTKR_VE9 : INT := PK_PIV_KLAPAN_VE9_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE9 : INT := PK_PIV_OTKAZ_OTKR_VE9 + 1;
	
	PK_PIV_VE12_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE9 + 1;
	PK_PIV_VE12_ZAKRYT : INT := PK_PIV_VE12_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE12 : INT := PK_PIV_VE12_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE12 : INT := PK_PIV_NEKNTR_OTKR_VE12 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE12 : INT := PK_PIV_NEKNTR_ZAKR_VE12 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE12 : INT := PK_PIV_NEKNTR_OTKR_U_VE12 + 1;
	PK_PIV_KLAPAN_VE12_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE12 + 1;
	PK_PIV_OTKAZ_OTKR_VE12 : INT := PK_PIV_KLAPAN_VE12_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE12 : INT := PK_PIV_OTKAZ_OTKR_VE12 + 1;
	
	PK_PIV_VE10_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE12 + 1;
	PK_PIV_VE10_ZAKRYT : INT := PK_PIV_VE10_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE10 : INT := PK_PIV_VE10_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE10 : INT := PK_PIV_NEKNTR_OTKR_VE10 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE10 : INT := PK_PIV_NEKNTR_ZAKR_VE10 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE10 : INT := PK_PIV_NEKNTR_OTKR_U_VE10 + 1;
	PK_PIV_KLAPAN_VE10_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE10 + 1;
	PK_PIV_OTKAZ_OTKR_VE10 : INT := PK_PIV_KLAPAN_VE10_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE10 : INT := PK_PIV_OTKAZ_OTKR_VE10 + 1;
	
	PK_PIV_VE11_OTKRYT : INT := PK_PIV_OTKAZ_ZAKR_VE10 + 1;
	PK_PIV_VE11_ZAKRYT : INT := PK_PIV_VE11_OTKRYT + 1;
	PK_PIV_NEKNTR_OTKR_VE11 : INT := PK_PIV_VE11_ZAKRYT + 1;
	PK_PIV_NEKNTR_ZAKR_VE11 : INT := PK_PIV_NEKNTR_OTKR_VE11 + 1;
	PK_PIV_NEKNTR_OTKR_U_VE11 : INT := PK_PIV_NEKNTR_ZAKR_VE11 + 1;
	PK_PIV_NEKNTR_ZAKR_U_VE11 : INT := PK_PIV_NEKNTR_OTKR_U_VE11 + 1;
	PK_PIV_KLAPAN_VE11_V_NORME : INT := PK_PIV_NEKNTR_ZAKR_U_VE11 + 1;
	PK_PIV_OTKAZ_OTKR_VE11 : INT := PK_PIV_KLAPAN_VE11_V_NORME + 1;
	PK_PIV_OTKAZ_ZAKR_VE11 : INT := PK_PIV_OTKAZ_OTKR_VE11 + 1;
	
	PK_PIV_VREMYA_OTKR_VM14_ISTEKLO : INT := PK_PIV_OTKAZ_ZAKR_VE11 + 1;
	PK_PIV_VREMYA_ZAKR_VM14_ISTEKLO : INT := PK_PIV_VREMYA_OTKR_VM14_ISTEKLO + 1;
	PK_PIV_VYKLYUCHENIE_VM14 : INT := PK_PIV_VREMYA_ZAKR_VM14_ISTEKLO + 1;
	PK_PIV_ZAKR_VM14 : INT := PK_PIV_VYKLYUCHENIE_VM14 + 1;
	PK_PIV_OTKR_VM14 : INT := PK_PIV_ZAKR_VM14 + 1;
	PK_PIV_OSHIBKA_UPRAVLENIYA_VM14 : INT := PK_PIV_OTKR_VM14 + 1;
	PK_PIV_SREDNEE_SOSTOYANIE_VM14 : INT := PK_PIV_OSHIBKA_UPRAVLENIYA_VM14 + 1;
	PK_PIV_VM14_V_NORME : INT := PK_PIV_SREDNEE_SOSTOYANIE_VM14 + 1;
	PK_PIV_VM14_ZAKRYT : INT := PK_PIV_VM14_V_NORME + 1;
	PK_PIV_VM14_OTKRYT : INT := PK_PIV_VM14_ZAKRYT + 1;
	PK_PIV_SOSTOYANIE_OSHIBKI_VM14 : INT := PK_PIV_VM14_OTKRYT + 1;
	
	PK_PIV_SREDNEE_SOSTOYANIE_ZATVORA_VAKUUMNOGO : INT := PK_PIV_SOSTOYANIE_OSHIBKI_VM14 + 1;
	PK_PIV_ZATVOR_VAKUUMNYJ_ZAKRYT : INT := PK_PIV_SREDNEE_SOSTOYANIE_ZATVORA_VAKUUMNOGO + 1;
	PK_PIV_ZATVOR_VAKUUMNYJ_OTKRYT : INT := PK_PIV_ZATVOR_VAKUUMNYJ_ZAKRYT + 1;
	PK_PIV_ZAKRYTIE_ZV_PRI_OPUSHENNOJ_ZATRAVKE : INT := PK_PIV_ZATVOR_VAKUUMNYJ_OTKRYT + 1;
	PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ : INT := PK_PIV_ZAKRYTIE_ZV_PRI_OPUSHENNOJ_ZATRAVKE + 1;
	PK_PIV_ZAKRYTQ_ZATVOR_VAKUUMNYJ : INT := PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ + 1;
	PK_PIV_SOSTOYANIE_OSHIBKI_ZATVORA_VAKUUMNOGO : INT := PK_PIV_ZAKRYTQ_ZATVOR_VAKUUMNYJ + 1;
	
	PK_PIV_AVTOMAT_I_PUSKATELQ_NVR1_VKLYUCHENY : INT := PK_PIV_SOSTOYANIE_OSHIBKI_ZATVORA_VAKUUMNOGO + 1;
	PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_NVR1_VYKLYUCHENY : INT := PK_PIV_AVTOMAT_I_PUSKATELQ_NVR1_VKLYUCHENY + 1;
	PK_PIV_NVR1_V_NORME : INT := PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_NVR1_VYKLYUCHENY + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_NVR1 : INT := PK_PIV_NVR1_V_NORME + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_NVR1 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_NVR1 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_NVR1 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_NVR1 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_NVR1 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_NVR1 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_NVR1 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_NVR1 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_NVR1 : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_NVR1 + 1;
	
	PK_PIV_AVTOMAT_I_PUSKATELQ_NVR2_VKLYUCHENY : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_NVR1 + 1;
	PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_NVR2_VYKLYUCHENY : INT := PK_PIV_AVTOMAT_I_PUSKATELQ_NVR2_VKLYUCHENY + 1;
	PK_PIV_NVR2_V_NORME : INT := PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_NVR2_VYKLYUCHENY + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_NVR2 : INT := PK_PIV_NVR2_V_NORME + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_NVR2 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_NVR2 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_NVR2 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_NVR2 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_NVR2 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_NVR2 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_NVR2 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_NVR2 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_NVR2 : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_NVR2 + 1;
	
	PK_PIV_AVTOMAT_I_PUSKATELQ_DVN1_VKLYUCHENY : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_NVR2 + 1;
	PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_DVN1_VYKLYUCHENY : INT := PK_PIV_AVTOMAT_I_PUSKATELQ_DVN1_VKLYUCHENY + 1;
	PK_PIV_DVN1_V_NORME : INT := PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_DVN1_VYKLYUCHENY + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_DVN1 : INT := PK_PIV_DVN1_V_NORME + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_DVN1 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_DVN1 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_DVN1 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_DVN1 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_DVN1 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_DVN1 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_DVN1 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_DVN1 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_DVN1 : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_DVN1 + 1;
	
	PK_PIV_AVTOMAT_I_PUSKATELQ_DVN2_VKLYUCHENY : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_DVN1 + 1;
	PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_DVN2_VYKLYUCHENY : INT := PK_PIV_AVTOMAT_I_PUSKATELQ_DVN2_VKLYUCHENY + 1;
	PK_PIV_DVN2_V_NORME : INT := PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_DVN2_VYKLYUCHENY + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_DVN2 : INT := PK_PIV_DVN2_V_NORME + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_DVN2 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_DVN2 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_DVN2 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_DVN2 + 1;
	PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_DVN2 : INT := PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_DVN2 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_DVN2 : INT := PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_DVN2 + 1;
	PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_DVN2 : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_DVN2 + 1;
	
	PK_PIV_NARUSHENIE_GERMETICHNOSTI_AVD1 : INT := PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_DVN2 + 1;
	PK_PIV_NARUSHENIE_GERMETICHNOSTI_AVD2 : INT := PK_PIV_NARUSHENIE_GERMETICHNOSTI_AVD1 + 1;
	PK_PIV_AVD1_VKLYUCHEN : INT := PK_PIV_NARUSHENIE_GERMETICHNOSTI_AVD2 + 1;
	PK_PIV_AVD1_VYKLYUCHEN : INT := PK_PIV_AVD1_VKLYUCHEN + 1;
	PK_PIV_OTKAZ_VKLYUCHENIYA_AVD1 : INT := PK_PIV_AVD1_VYKLYUCHEN + 1;
	PK_PIV_OTKAZ_VYKLYUCHENIYA_AVD1 : INT := PK_PIV_OTKAZ_VKLYUCHENIYA_AVD1 + 1;
	PK_PIV_AVD2_VKLYUCHEN : INT := PK_PIV_OTKAZ_VYKLYUCHENIYA_AVD1 + 1;
	PK_PIV_AVD2_VYKLYUCHEN : INT := PK_PIV_AVD2_VKLYUCHEN + 1;
	PK_PIV_OTKAZ_VKLYUCHENIYA_AVD2 : INT := PK_PIV_AVD2_VYKLYUCHEN + 1;
	PK_PIV_OTKAZ_VYKLYUCHENIYA_AVD2 : INT := PK_PIV_OTKAZ_VKLYUCHENIYA_AVD2 + 1;
	PK_PIV_KNTR_VREMYA_ISTEKLO__Pavd1_VYSHE_Pnk : INT := PK_PIV_OTKAZ_VYKLYUCHENIYA_AVD2 + 1;
	PK_PIV_KNTR_VREMYA_ISTEKLO__Pavd2_VYSHE_Pnk : INT := PK_PIV_KNTR_VREMYA_ISTEKLO__Pavd1_VYSHE_Pnk + 1;
	PK_PIV_NERAZRESHIMAYA_SITUATSIYA_PEREKLYUCHENIYA : INT := PK_PIV_KNTR_VREMYA_ISTEKLO__Pavd2_VYSHE_Pnk + 1;
	PK_PIV_OSTANOV_SHLYUZOVANIYA : INT := PK_PIV_NERAZRESHIMAYA_SITUATSIYA_PEREKLYUCHENIYA + 1;
	PK_PIV_NESHTATNAYA_SITUATSIYA_SHLYUZOVANIYA : INT := PK_PIV_OSTANOV_SHLYUZOVANIYA + 1;
	PK_PIV_NACHALO_RAZGERMETIZATSII_VK : INT := PK_PIV_NESHTATNAYA_SITUATSIYA_SHLYUZOVANIYA + 1;
	PK_PIV_KONETS_RAZGERMETIZATSII_VK : INT := PK_PIV_NACHALO_RAZGERMETIZATSII_VK + 1;
	PK_PIV_NET_USLOVIJ_SHLYUZOVANIYA_ZV_VE5_VE6 : INT := PK_PIV_KONETS_RAZGERMETIZATSII_VK + 1;
	PK_PIV_PREVYSHENO_VREMYA_RAZGERMETIZATSII_VK : INT := PK_PIV_NET_USLOVIJ_SHLYUZOVANIYA_ZV_VE5_VE6 + 1;
	PK_PIV_NACHALO_VAKUUMIROVANIYA_VK : INT := PK_PIV_PREVYSHENO_VREMYA_RAZGERMETIZATSII_VK + 1;
	PK_PIV_KONETS_VAKUUMIROVANIYA_VK : INT := PK_PIV_NACHALO_VAKUUMIROVANIYA_VK + 1;
	PK_PIV_NET_USLOVIJ_SHLYUZOVANIYA_ZV_Pvk_REG_D : INT := PK_PIV_KONETS_VAKUUMIROVANIYA_VK + 1;
	PK_PIV_PREVYSHENO_VREMYA_RABOTY_AGREGATA_VAKUUMNOGO : INT := PK_PIV_NET_USLOVIJ_SHLYUZOVANIYA_ZV_Pvk_REG_D + 1;
	
	AVARIYA__NARUSHENIE_GERMETICHNOSTI_AVD1 : INT := PK_PIV_PREVYSHENO_VREMYA_RABOTY_AGREGATA_VAKUUMNOGO + 1;
	AVARIYA__NARUSHENIE_GERMETICHNOSTI_AVD2 : INT := AVARIYA__NARUSHENIE_GERMETICHNOSTI_AVD1 + 1;
	PK_PIV_NET_BLOK_SHEMY_GVS_OT_KMZ : INT := AVARIYA__NARUSHENIE_GERMETICHNOSTI_AVD2 + 1;
	DAVLENIE_NK_V_NORME : INT := PK_PIV_NET_BLOK_SHEMY_GVS_OT_KMZ + 1;
	PREDUPREZHDENIE__DAVLENIE_NK_40 : INT := DAVLENIE_NK_V_NORME + 1;
	AVARIYA__DAVLENIE_NK_BOLQSHE_45 : INT := PREDUPREZHDENIE__DAVLENIE_NK_40 + 1;
	
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_VK : INT := AVARIYA__DAVLENIE_NK_BOLQSHE_45 + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_VK : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_VK + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_VK : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_VK + 1;
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_KRYSHKI_NK : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_VK + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_KRYSHKI_NK : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_KRYSHKI_NK + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_KRYSHKI_NK : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_KRYSHKI_NK + 1;
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_KRYSHKI_NK + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_NK : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_NK : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_NK + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_NK : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_NK + 1;
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_BAZOVOJ_PLITY : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_NK + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_BAZOVOJ_PLITY : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_BAZOVOJ_PLITY : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_SHTOKA_TIGLYA : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_SHTOKA_TIGLYA : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_SHTOKA_TIGLYA + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_SHTOKA_TIGLYA : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_SHTOKA_TIGLYA + 1;
	PK_PIV_AVARIYA__PEREGREV_VODY_OHL_TOKOVVODOV : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_SHTOKA_TIGLYA + 1;
	PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_TOKOVVODOV : INT := PK_PIV_AVARIYA__PEREGREV_VODY_OHL_TOKOVVODOV + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_TOKOVVODOV : INT := PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_TOKOVVODOV + 1;
	PK_PIV_PEREGREV_VODY_NA_VHODE : INT := PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_TOKOVVODOV + 1;
	PK_PIV_NORMA_TEMPERATURY_VODY_NA_VHODE : INT := PK_PIV_PEREGREV_VODY_NA_VHODE + 1;
	PK_PIV_SNYATQ_OSHIBKU__VSEH_RP_I_MN : INT := PK_PIV_NORMA_TEMPERATURY_VODY_NA_VHODE + 1;
	PK_PIV_SNYATQ_OSHIBKU__MN_V_NORME : INT := PK_PIV_SNYATQ_OSHIBKU__VSEH_RP_I_MN + 1;
	PK_PIV_AVARIYA__DAVLENIE_VODY_NIZHE_NORMY : INT := PK_PIV_SNYATQ_OSHIBKU__MN_V_NORME + 1;
	PK_PIV_AVARIYA__DAVLENIE_VODY_VYSHE_NORMY : INT := PK_PIV_AVARIYA__DAVLENIE_VODY_NIZHE_NORMY + 1;
	PK_PIV_AVARIYA__OTKAZ_MN : INT := PK_PIV_AVARIYA__DAVLENIE_VODY_VYSHE_NORMY + 1;
	PK_PIV_DAVLENIE_VODY_V_NORME : INT := PK_PIV_AVARIYA__OTKAZ_MN + 1;
	PK_PIV_DAVLENIE_VODY_NIZHE_NORMY : INT := PK_PIV_DAVLENIE_VODY_V_NORME + 1;
	PK_PIV_DAVLENIE_VODY_VYSHE_NORMY : INT := PK_PIV_DAVLENIE_VODY_NIZHE_NORMY + 1;
	PK_PIV_OTKAZ_MN : INT := PK_PIV_DAVLENIE_VODY_VYSHE_NORMY + 1;
	PK_PIV_NORMA_OHL_VK : INT := PK_PIV_OTKAZ_MN + 1;
	PK_PIV_AVARIYA__NET_OHL_VK : INT := PK_PIV_NORMA_OHL_VK + 1;
	PK_PIV_ESTQ_OHL_VK : INT := PK_PIV_AVARIYA__NET_OHL_VK + 1;
	PK_PIV_NET_OHL_VK : INT := PK_PIV_ESTQ_OHL_VK + 1;
	PK_PIV_NORMA_OHL_KRYSHKI_NK : INT := PK_PIV_NET_OHL_VK + 1;
	PK_PIV_AVARIYA__NET_OHL_KRYSHKI_NK : INT := PK_PIV_NORMA_OHL_KRYSHKI_NK + 1;
	PK_PIV_ESTQ_OHL_KRYSHKI_NK : INT := PK_PIV_AVARIYA__NET_OHL_KRYSHKI_NK + 1;
	PK_PIV_NET_OHL_KRYSHKI_NK : INT := PK_PIV_ESTQ_OHL_KRYSHKI_NK + 1;
	PK_PIV_NORMA_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_NET_OHL_KRYSHKI_NK + 1;
	PK_PIV_AVARIYA__NET_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_NORMA_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_ESTQ_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_AVARIYA__NET_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_NET_OHL_KOLLEKTORA_VAKUUMNOGO : INT := PK_PIV_ESTQ_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_NORMA_OHL_NK : INT := PK_PIV_NET_OHL_KOLLEKTORA_VAKUUMNOGO + 1;
	PK_PIV_AVARIYA__NET_OHL_NK : INT := PK_PIV_NORMA_OHL_NK + 1;
	PK_PIV_ESTQ_OHL_NK : INT := PK_PIV_AVARIYA__NET_OHL_NK + 1;
	PK_PIV_NET_OHL_NK : INT := PK_PIV_ESTQ_OHL_NK + 1;
	PK_PIV_NORMA_OHL_BAZOVOJ_PLITY : INT := PK_PIV_NET_OHL_NK + 1;
	PK_PIV_AVARIYA__NET_OHL_BAZOVOJ_PLITY : INT := PK_PIV_NORMA_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_ESTQ_OHL_BAZOVOJ_PLITY : INT := PK_PIV_AVARIYA__NET_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_NET_OHL_BAZOVOJ_PLITY : INT := PK_PIV_ESTQ_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_NORMA_OHL_SHTOKA_PRIVODA_TIGLYA : INT := PK_PIV_NET_OHL_BAZOVOJ_PLITY + 1;
	PK_PIV_AVARIYA__NET_OHL_SHTOKA_PRIVODA_TIGLYA : INT := PK_PIV_NORMA_OHL_SHTOKA_PRIVODA_TIGLYA + 1;
	PK_PIV_ESTQ_OHL_SHTOKA_PRIVODA_TIGLYA : INT := PK_PIV_AVARIYA__NET_OHL_SHTOKA_PRIVODA_TIGLYA + 1;
	PK_PIV_NET_OHL_SHTOKA_PRIVODA_TIGLYA : INT := PK_PIV_ESTQ_OHL_SHTOKA_PRIVODA_TIGLYA + 1;
	PK_PIV_NORMA_OHL_TOKOVVODOV : INT := PK_PIV_NET_OHL_SHTOKA_PRIVODA_TIGLYA + 1;
	PK_PIV_AVARIYA__NET_OHL_TOKOVVODOV : INT := PK_PIV_NORMA_OHL_TOKOVVODOV + 1;
	PK_PIV_ESTQ_OHL_TOKOVVODOV : INT := PK_PIV_AVARIYA__NET_OHL_TOKOVVODOV + 1;
	PK_PIV_NET_OHL_TOKOVVODOV : INT := PK_PIV_ESTQ_OHL_TOKOVVODOV + 1;
	PK_PIV_PREDUPREZHDENIE__NET_OHL_AVD : INT := PK_PIV_NET_OHL_TOKOVVODOV + 1;
	PK_PIV_NORMA_OHL_AVD : INT := PK_PIV_PREDUPREZHDENIE__NET_OHL_AVD + 1;
	PK_PIV_ESTQ_OHL_AVD : INT := PK_PIV_NORMA_OHL_AVD + 1;
	PK_PIV_NET_OHL_AVD : INT := PK_PIV_ESTQ_OHL_AVD + 1;
	PK_PIV_PODATQ_VODU_V_SISTEMU_OHLAZHDENIYA : INT := PK_PIV_NET_OHL_AVD + 1;
	PK_PIV_TOK_MODULYA_0_IP2K_K1_V_NORME : INT := PK_PIV_PODATQ_VODU_V_SISTEMU_OHLAZHDENIYA + 1;
	PK_PIV_TOK_MODULYA_0_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TOK_MODULYA_0_IP2K_K1_V_NORME + 1;
	PK_PIV_TOK_MODULYA_1_IP2K_K1_V_NORME : INT := PK_PIV_TOK_MODULYA_0_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TOK_MODULYA_1_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TOK_MODULYA_1_IP2K_K1_V_NORME + 1;
	PK_PIV_TOK_MODULYA_2_IP2K_K1_V_NORME : INT := PK_PIV_TOK_MODULYA_1_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TOK_MODULYA_2_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TOK_MODULYA_2_IP2K_K1_V_NORME + 1;
	PK_PIV_TOK_MODULYA_3_IP2K_K1_V_NORME : INT := PK_PIV_TOK_MODULYA_2_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TOK_MODULYA_3_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TOK_MODULYA_3_IP2K_K1_V_NORME + 1;
	PK_PIV_TOK_MODULYA_4_IP2K_K1_V_NORME : INT := PK_PIV_TOK_MODULYA_3_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TOK_MODULYA_4_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TOK_MODULYA_4_IP2K_K1_V_NORME + 1;
	PK_PIV_TOK_MODULYA_5_IP2K_K1_V_NORME : INT := PK_PIV_TOK_MODULYA_4_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TOK_MODULYA_5_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TOK_MODULYA_5_IP2K_K1_V_NORME + 1;
	PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_V_NORME : INT := PK_PIV_TOK_MODULYA_5_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_NIZHE_NORMY_PODATQ_VODU : INT := PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_V_NORME + 1;
	PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_NIZHE_NORMY_AVARIYA : INT := PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_NIZHE_NORMY_PODATQ_VODU + 1;
	PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_NIZHE_NORMY_AVARIYA + 1;
	PK_PIV_TEMPERATURA_NA_VHODE_IP2K_K1_V_NORME : INT := PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_NA_VHODE_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_NA_VHODE_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_NA_VHODE_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_SOPROTIVLENIE_NAGR_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_SOPROTIVLENIE_NAGR_IP2K_K1_VNE_DIAPAZONA : INT := PK_PIV_SOPROTIVLENIE_NAGR_IP2K_K1_V_NORME + 1;
	PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_V_NORME : INT := PK_PIV_SOPROTIVLENIE_NAGR_IP2K_K1_VNE_DIAPAZONA + 1;
	PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_NIZHE_NORMY_AVARIYA : INT := PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_V_NORME + 1;
	PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_VYSHE_NORMY : INT := PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_NIZHE_NORMY_AVARIYA + 1;
	PK_PIV_AVTONOMNYJ_REZHIM_IP2K_K1 : INT := PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_VYSHE_NORMY + 1;
	PK_PIV_NEAVTONOMNYJ_REZHIM_IP2K_K1 : INT := PK_PIV_AVTONOMNYJ_REZHIM_IP2K_K1 + 1;
	PK_PIV_V_IP2K_NE_HVATAET_MODULEJ : INT := PK_PIV_NEAVTONOMNYJ_REZHIM_IP2K_K1 + 1;
	PK_PIV_V_IP2K_MODULEJ_DOSTATOCHNO : INT := PK_PIV_V_IP2K_NE_HVATAET_MODULEJ + 1;
	PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_V_NORME : INT := PK_PIV_V_IP2K_MODULEJ_DOSTATOCHNO + 1;
	PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_V_NORME : INT := PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_PREDUPR_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_V_NORME + 1;
	PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_AVARIYA_VYSHE_NORMY : INT := PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_PREDUPR_VYSHE_NORMY + 1;
	PK_PIV_N_SISTEMY_OHLAZHDENIYA : INT := PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_AVARIYA_VYSHE_NORMY + 1;
	
	PK_PIV_PREDOHRANITELQNYJ_KLAPAN_V_NORME : INT := PK_PIV_N_SISTEMY_OHLAZHDENIYA;
	PK_PIV_SRABOTAL_PREDOHRANITELQNYJ_KLAPAN : INT := PK_PIV_PREDOHRANITELQNYJ_KLAPAN_V_NORME + 1;
	PK_PIV_AVARIYA__SRABOTAL_PREDOHRANITELQNYJ_KLAPAN : INT := PK_PIV_SRABOTAL_PREDOHRANITELQNYJ_KLAPAN + 1;
	
	PK_PIV_ESTQ_STYK_1 : INT := PK_PIV_AVARIYA__SRABOTAL_PREDOHRANITELQNYJ_KLAPAN + 1;
	PK_PIV_ESTQ_STYK_2 : INT := PK_PIV_ESTQ_STYK_1 + 1;
	PK_PIV_ESTQ_STYK_3 : INT := PK_PIV_ESTQ_STYK_2 + 1;
	PK_PIV_ESTQ_STYK_4 : INT := PK_PIV_ESTQ_STYK_3 + 1;
	PK_PIV_ESTQ_STYK_5 : INT := PK_PIV_ESTQ_STYK_4 + 1;
	PK_PIV_ESTQ_STYK_6 : INT := PK_PIV_ESTQ_STYK_5 + 1;
	PK_PIV_ESTQ_STYK_7 : INT := PK_PIV_ESTQ_STYK_6 + 1;
	PK_PIV_ESTQ_STYK_8 : INT := PK_PIV_ESTQ_STYK_7 + 1;
	PK_PIV_NET_STYKA_1 : INT := PK_PIV_ESTQ_STYK_8 + 1;
	PK_PIV_NET_STYKA_2 : INT := PK_PIV_NET_STYKA_1 + 1;
	PK_PIV_NET_STYKA_3 : INT := PK_PIV_NET_STYKA_2 + 1;
	PK_PIV_NET_STYKA_4 : INT := PK_PIV_NET_STYKA_3 + 1;
	PK_PIV_NET_STYKA_5 : INT := PK_PIV_NET_STYKA_4 + 1;
	PK_PIV_NET_STYKA_6 : INT := PK_PIV_NET_STYKA_5 + 1;
	PK_PIV_NET_STYKA_7 : INT := PK_PIV_NET_STYKA_6 + 1;
	PK_PIV_NET_STYKA_8 : INT := PK_PIV_NET_STYKA_7 + 1;
	
	IBP_RAZRYAZHEN : INT := PK_PIV_NET_STYKA_8 + 1;
	IBP_V_NORME : INT := IBP_RAZRYAZHEN + 1;
	OTKLYUCHENIE_SISTEMY_PO_PITANIYU : INT := IBP_V_NORME + 1;
	ESTQ_220V_NA_VHODE_IBP : INT := OTKLYUCHENIE_SISTEMY_PO_PITANIYU + 1;
	NET_220V_NA_VHODE_IBP : INT := ESTQ_220V_NA_VHODE_IBP + 1;
	ESTQ_BLOKIROVKA_VK_NK : INT := NET_220V_NA_VHODE_IBP + 1;
	NET_BLOKIROVKI_VK_NK : INT := ESTQ_BLOKIROVKA_VK_NK + 1;
	OZHIDANIE_PROGRAMMNOGO_24_48V : INT := NET_BLOKIROVKI_VK_NK + 1;
	
	REG_RG_VKLYUCHEN : INT := OZHIDANIE_PROGRAMMNOGO_24_48V + 1;
	POGRESHNOSTQ_REG_RG_VYSHE_NORMY : INT := REG_RG_VKLYUCHEN + 1;
	REG_RG_VYKLYUCHEN : INT := POGRESHNOSTQ_REG_RG_VYSHE_NORMY + 1;
	REG_D_VKLYUCHEN : INT := REG_RG_VYKLYUCHEN + 1;
	REG_D_VYKLYUCHEN : INT := REG_D_VKLYUCHEN + 1;
	POGRESHNOSTQ_REG_D_VYSHE_NORMY : INT := REG_D_VYKLYUCHEN + 1;
	REG_W_IPN_K1_VKLYUCHEN : INT := POGRESHNOSTQ_REG_D_VYSHE_NORMY + 1;
	REG_W_IPN_K1_VYKLYUCHEN : INT := REG_W_IPN_K1_VKLYUCHEN + 1;
	POGRESHNOSTQ_REG_W_IPN_K1_VYSHE_NORMY : INT := REG_W_IPN_K1_VYKLYUCHEN + 1;
	REG_TN_VKLYUCHEN : INT := POGRESHNOSTQ_REG_W_IPN_K1_VYSHE_NORMY + 1;
	REG_TN_VYKLYUCHEN : INT := REG_TN_VKLYUCHEN + 1;
	POGRESHNOSTQ_REG_TN_VYSHE_NORMY : INT := REG_TN_VYKLYUCHEN + 1;
	REG_TR_VKLYUCHEN : INT := POGRESHNOSTQ_REG_TN_VYSHE_NORMY + 1;
	REG_TR_VYKLYUCHEN : INT := REG_TR_VKLYUCHEN + 1;
	REG_TN_VYKLYUCHEN__RABOTA_REG_TR_NEVOZMOZHNA : INT := REG_TR_VYKLYUCHEN + 1;
	POGRESHNOSTQ_REG_TR_VYSHE_NORMY : INT := REG_TN_VYKLYUCHEN__RABOTA_REG_TR_NEVOZMOZHNA + 1;
	REG_ROSTA_VKLYUCHEN : INT := POGRESHNOSTQ_REG_TR_VYSHE_NORMY + 1;
	REG_ROSTA_VYKLYUCHEN : INT := REG_ROSTA_VKLYUCHEN + 1;
	POGRESHNOSTQ_REG_ROSTA_VYSHE_NORMY : INT := REG_ROSTA_VYKLYUCHEN + 1;
	REG_DIAMETRA_VYKLYUCHEN__RABOTA_NEVOZMOZHNA : INT := POGRESHNOSTQ_REG_ROSTA_VYSHE_NORMY + 1;
	REG_TN_VYKLYUCHEN__RABOTA_REG_ROSTA_NEVOZMOZHNA : INT := REG_DIAMETRA_VYKLYUCHEN__RABOTA_NEVOZMOZHNA + 1;
	REG_W_IPN_K2_VKLYUCHEN : INT := REG_TN_VYKLYUCHEN__RABOTA_REG_ROSTA_NEVOZMOZHNA + 1;
	REG_W_IPN_K2_VYKLYUCHEN : INT := REG_W_IPN_K2_VKLYUCHEN + 1;
	POGRESHNOSTQ_REG_W_IPN_K2_VYSHE_NORMY : INT := REG_W_IPN_K2_VYKLYUCHEN + 1;
	REG_UR_VKLYUCHEN : INT := POGRESHNOSTQ_REG_W_IPN_K2_VYSHE_NORMY + 1;
	REG_UR_VYKLYUCHEN : INT := REG_UR_VKLYUCHEN + 1;
	REG_VtR_VYKLYUCHEN__REGUL_UROVNYA_NEVOZMOZHNO : INT := REG_UR_VYKLYUCHEN + 1;
	PREVYSHEN_DIAPAZON_Hur : INT := REG_VtR_VYKLYUCHEN__REGUL_UROVNYA_NEVOZMOZHNO + 1;
	PROLIV_RASPLAVA : INT := PREVYSHEN_DIAPAZON_Hur + 1;
	SKACHOK_UROVNYA_RASPLAVA : INT := PROLIV_RASPLAVA + 1;
	PREVYSH_DOPUST_RASSOGLASOVANIYA__REGUL_NEVOZMOZHNO : INT := SKACHOK_UROVNYA_RASPLAVA + 1;
	REG_DK_VKLYUCHEN : INT := PREVYSH_DOPUST_RASSOGLASOVANIYA__REGUL_NEVOZMOZHNO + 1;
	REG_DK_VYKLYUCHEN : INT := REG_DK_VKLYUCHEN + 1;
	POGRESHNOSTQ_REG_DK_VYSHE_NORMY : INT := REG_DK_VYKLYUCHEN + 1;
	REG_VzR_VYKLYUCHEN__RABOTA_REG_DK_NEVOZMOZHNA : INT := POGRESHNOSTQ_REG_DK_VYSHE_NORMY + 1;
	REG_UR_AKTIVEN__KOM_VPO_IZMN_ZD_VzR_IGNOR : INT := REG_VzR_VYKLYUCHEN__RABOTA_REG_DK_NEVOZMOZHNA + 1;
	NET_DOSTOVERNOSTI_DIAMETRA__RABOTA_REG_DK_PRIOSTANOVLENA : INT := REG_UR_AKTIVEN__KOM_VPO_IZMN_ZD_VzR_IGNOR + 1;
	NET_DOSTOVERNOSTI_T_NAGREVATELYA__RABOTA_REG_TN_PRIOSTANOVLENA : INT := NET_DOSTOVERNOSTI_DIAMETRA__RABOTA_REG_DK_PRIOSTANOVLENA + 1;
	NET_DOSTOVERNOSTI_T_RASPLAVA__RABOTA_REG_TR_PRIOSTANOVLENA : INT := NET_DOSTOVERNOSTI_T_NAGREVATELYA__RABOTA_REG_TN_PRIOSTANOVLENA + 1;
	REG_VzR_VKLYUCHEN : INT := NET_DOSTOVERNOSTI_T_RASPLAVA__RABOTA_REG_TR_PRIOSTANOVLENA + 1;
	REG_VzR_VYKLYUCHEN : INT := REG_VzR_VKLYUCHEN + 1;
	REG_XzR_VKLYUCHEN : INT := REG_VzR_VYKLYUCHEN + 1;
	REG_XzR_VYKLYUCHEN : INT := REG_XzR_VKLYUCHEN + 1;
	REG_VzU_VKLYUCHEN : INT := REG_XzR_VYKLYUCHEN + 1;
	REG_VzU_VYKLYUCHEN : INT := REG_VzU_VKLYUCHEN + 1;
	REG_XzU_VKLYUCHEN : INT := REG_VzU_VYKLYUCHEN + 1;
	REG_XzU_VYKLYUCHEN : INT := REG_XzU_VKLYUCHEN + 1;
	REG_Wz_VKLYUCHEN : INT := REG_XzU_VYKLYUCHEN + 1;
	REG_Wz_VYKLYUCHEN : INT := REG_Wz_VKLYUCHEN + 1;
	REG_Wz_UGOL_VKLYUCHEN : INT := REG_Wz_VYKLYUCHEN + 1;
	REG_Wz_UGOL_VYKLYUCHEN : INT := REG_Wz_UGOL_VKLYUCHEN + 1;
	REG_VtR_VKLYUCHEN : INT := REG_Wz_UGOL_VYKLYUCHEN + 1;
	REG_VtR_VYKLYUCHEN : INT := REG_VtR_VKLYUCHEN + 1;
	REG_XtR_VKLYUCHEN : INT := REG_VtR_VYKLYUCHEN + 1;
	REG_XtR_VYKLYUCHEN : INT := REG_XtR_VKLYUCHEN + 1;
	REG_VtU_VKLYUCHEN : INT := REG_XtR_VYKLYUCHEN + 1;
	REG_VtU_VYKLYUCHEN : INT := REG_VtU_VKLYUCHEN + 1;
	REG_XtU_VKLYUCHEN : INT := REG_VtU_VYKLYUCHEN + 1;
	REG_XtU_VYKLYUCHEN : INT := REG_XtU_VKLYUCHEN + 1;
	REG_Wt_VKLYUCHEN : INT := REG_XtU_VYKLYUCHEN + 1;
	REG_Wt_VYKLYUCHEN : INT := REG_Wt_VKLYUCHEN + 1;
	REG_Wt_UGOL_VKLYUCHEN : INT := REG_Wt_VYKLYUCHEN + 1;
	REG_Wt_UGOL_VYKLYUCHEN : INT := REG_Wt_UGOL_VKLYUCHEN + 1;
	
	PK_PIV_KACH_TARIROVKI_KONTSA_ZATRAVKI_NEUD : INT := REG_Wt_UGOL_VYKLYUCHEN + 1;
	PK_PIV_KACH_TARIROVKI_KONTSA_ZATRAVKI_UDOVL : INT := PK_PIV_KACH_TARIROVKI_KONTSA_ZATRAVKI_NEUD + 1;
	PK_PIV_KACH_TARIROVKI_KONTSA_ZATRAVKI_OTL : INT := PK_PIV_KACH_TARIROVKI_KONTSA_ZATRAVKI_UDOVL + 1;
	PK_PIV_OSHIBKA_KONTROLYA_KACH_TARIROVKI_KONTSA_ZATRAVKI : INT := PK_PIV_KACH_TARIROVKI_KONTSA_ZATRAVKI_OTL + 1;
	PK_PIV_KACH_TARIROVKI_UROVNYA_RASPLAVA_NEUD : INT := PK_PIV_OSHIBKA_KONTROLYA_KACH_TARIROVKI_KONTSA_ZATRAVKI + 1;
	PK_PIV_KACH_TARIROVKI_UROVNYA_RASPLAVA_UDOVL : INT := PK_PIV_KACH_TARIROVKI_UROVNYA_RASPLAVA_NEUD + 1;
	PK_PIV_KACH_TARIROVKI_UROVNYA_RASPLAVA_OTL : INT := PK_PIV_KACH_TARIROVKI_UROVNYA_RASPLAVA_UDOVL + 1;
	PK_PIV_OSHIBKA_KONTROLYA_KACH_TARIROVKI_UROVNYA_RASPLAVA : INT := PK_PIV_KACH_TARIROVKI_UROVNYA_RASPLAVA_OTL + 1;
	
	PK_PIV_KOORD_ZAT_NEOPREDELENA : INT := PK_PIV_OSHIBKA_KONTROLYA_KACH_TARIROVKI_UROVNYA_RASPLAVA + 1;
	PK_PIV_ZAT_V_KVP : INT := PK_PIV_KOORD_ZAT_NEOPREDELENA + 1;
	PK_PIV_ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA : INT := PK_PIV_ZAT_V_KVP + 1;
	PK_PIV_ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP : INT := PK_PIV_ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA + 1;
	PK_PIV_ZAT_V_POLOZHENII_PRIVYAZKI : INT := PK_PIV_ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP + 1;
	PK_PIV_ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI : INT := PK_PIV_ZAT_V_POLOZHENII_PRIVYAZKI + 1;
	PK_PIV_ZAT_V_POLOZHENII_PROGREVA : INT := PK_PIV_ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI + 1;
	PK_PIV_ZAT_NIZHE_POLOZHENIYA_PROGREVA : INT := PK_PIV_ZAT_V_POLOZHENII_PROGREVA + 1;
	PK_PIV_ZAT_V_KNP : INT := PK_PIV_ZAT_NIZHE_POLOZHENIYA_PROGREVA + 1;
	PK_PIV_OSHIBKA_INITSIALIZATSII_GEOMETRII_TIGLYA : INT := PK_PIV_ZAT_V_KNP + 1;
	PK_PIV_NEVOZMOZHNO_VYCHISLITQ_L_KZ_UR___NET_KOOR_ZAT : INT := PK_PIV_OSHIBKA_INITSIALIZATSII_GEOMETRII_TIGLYA + 1;
	PK_PIV_NEVOZMOZHNO_VYCHISLITQ_L_KZ_UR___NET_KOOR_TIG : INT := PK_PIV_NEVOZMOZHNO_VYCHISLITQ_L_KZ_UR___NET_KOOR_ZAT + 1;
	PK_PIV_L_KZ_UR_MENQSHE_NULYA : INT := PK_PIV_NEVOZMOZHNO_VYCHISLITQ_L_KZ_UR___NET_KOOR_TIG + 1;
	PK_PIV_KONTSEVIK_ZAT_KVP_NE_OBNARUZHEN : INT := PK_PIV_L_KZ_UR_MENQSHE_NULYA + 1;
	PK_PIV_KONTSEVIK_ZAT_KNP_NE_OBNARUZHEN : INT := PK_PIV_KONTSEVIK_ZAT_KVP_NE_OBNARUZHEN + 1;
	PK_PIV_POTERYA_KOORD_ZATR_PRI_DVIZHENII_K_KVP : INT := PK_PIV_KONTSEVIK_ZAT_KNP_NE_OBNARUZHEN + 1;
	PK_PIV_POTERYA_KOORD_ZATR_PRI_DVIZHENII_K_KNP : INT := PK_PIV_POTERYA_KOORD_ZATR_PRI_DVIZHENII_K_KVP + 1;
	PK_PIV_BOLQSHAYA_MASSA_ZATR_TARIROVKA_PO_DP_NEDOPUSTIMA : INT := PK_PIV_POTERYA_KOORD_ZATR_PRI_DVIZHENII_K_KNP + 1;
	PK_PIV_DP_NE_SRABOTAL_PRI_PODQEME_ZATRAVKI : INT := PK_PIV_BOLQSHAYA_MASSA_ZATR_TARIROVKA_PO_DP_NEDOPUSTIMA + 1;
	PK_PIV_DP_NE_SRABOTAL_PRI_PEREKRYTII_ZATRAVKODERZHATELEM : INT := PK_PIV_DP_NE_SRABOTAL_PRI_PODQEME_ZATRAVKI + 1;
	PK_PIV_DP_NE_SRABOTAL_PRI_OPUSKANII_ZATRAVKI : INT := PK_PIV_DP_NE_SRABOTAL_PRI_PEREKRYTII_ZATRAVKODERZHATELEM + 1;
	PK_PIV_NEOZHIDANNYJ_OSTANOV_ZATRAVKI_V_REZHIME_PRIVYAZKI : INT := PK_PIV_DP_NE_SRABOTAL_PRI_OPUSKANII_ZATRAVKI + 1;
	PK_PIV_NEOZHIDANNYJ_OSTANOV_ZATRAVKI_VO_VREMYA_PRIVYAZKI : INT := PK_PIV_NEOZHIDANNYJ_OSTANOV_ZATRAVKI_V_REZHIME_PRIVYAZKI + 1;
	PK_PIV_KOORDINATA_ZATRAVKI_PO_DP_OTTARIROVANA : INT := PK_PIV_NEOZHIDANNYJ_OSTANOV_ZATRAVKI_VO_VREMYA_PRIVYAZKI + 1;
	PK_PIV_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP : INT := PK_PIV_KOORDINATA_ZATRAVKI_PO_DP_OTTARIROVANA + 1;
	PK_PIV_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_PNUR : INT := PK_PIV_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP + 1;
	PK_PIV_DLINA_ZATRAVOCHNOGO_MONOKRISTALLA : INT := PK_PIV_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_PNUR + 1;
	PK_PIV_DVIZHENIE_ZATRAVKI_K_ZV : INT := PK_PIV_DLINA_ZATRAVOCHNOGO_MONOKRISTALLA + 1;
	PK_PIV_OSTANOV_VRASHENIYA_ZATRAVKI_ZAPRET_VRASHENIYA : INT := PK_PIV_DVIZHENIE_ZATRAVKI_K_ZV + 1;
	PK_PIV_PEREMESHENIE_ZATR_NEVOZMOZHNO_NET_KOORDINATY : INT := PK_PIV_OSTANOV_VRASHENIYA_ZATRAVKI_ZAPRET_VRASHENIYA + 1;
	
	PK_PIV_KOORD_TIG_NEOPREDELENA : INT := PK_PIV_PEREMESHENIE_ZATR_NEVOZMOZHNO_NET_KOORDINATY + 1;
	PK_PIV_TIG_V_KVP : INT := PK_PIV_KOORD_TIG_NEOPREDELENA + 1;
	PK_PIV_TIG_VYSHE_POLOZHENIYA_PZUR : INT := PK_PIV_TIG_V_KVP + 1;
	PK_PIV_TIG_V_POLOZHENII_PZUR : INT := PK_PIV_TIG_VYSHE_POLOZHENIYA_PZUR + 1;
	PK_PIV_TIG_NIZHE_POLOZHENIYA_PZUR : INT := PK_PIV_TIG_V_POLOZHENII_PZUR + 1;
	PK_PIV_TIG_V_KNP : INT := PK_PIV_TIG_NIZHE_POLOZHENIYA_PZUR + 1;
	PK_PIV_POTERYA_KOORD_TIG_PRI_DVIZHENII_K_KNP : INT := PK_PIV_TIG_V_KNP + 1;
	PK_PIV_POTERYA_KOORD_TIG_PRI_DVIZHENII_K_KVP : INT := PK_PIV_POTERYA_KOORD_TIG_PRI_DVIZHENII_K_KNP + 1;
	PK_PIV_KONTSEVIK_TIG_KVP_NE_OBNARUZHEN : INT := PK_PIV_POTERYA_KOORD_TIG_PRI_DVIZHENII_K_KVP + 1;
	PK_PIV_KONTSEVIK_TIG_KNP_NE_OBNARUZHEN : INT := PK_PIV_KONTSEVIK_TIG_KVP_NE_OBNARUZHEN + 1;
	PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_UROVNYA_RASPLAVA : INT := PK_PIV_KONTSEVIK_TIG_KNP_NE_OBNARUZHEN + 1;
	PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_KOORDINATY : INT := PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_UROVNYA_RASPLAVA + 1;
	
	PK_PIV_OSHIBKA_KODA_KOMANDY_OT_VPO : INT := PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_KOORDINATY + 1;
	
	PK_PIV_FP_Qgaza : INT := PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_KOORDINATY + 1;
	PK_PIV_FP_PotokOhlazhdVody_IP2K_K1 : INT := PK_PIV_FP_Qgaza + 1;
	PK_PIV_FP_TemperaturaOhlNaVhode_IP2K_K1 : INT := PK_PIV_FP_PotokOhlazhdVody_IP2K_K1 + 1;
	PK_PIV_FP_TemperaturaOhlNaVyhode_IP2K_K1 : INT := PK_PIV_FP_TemperaturaOhlNaVhode_IP2K_K1 + 1;
	PK_PIV_FP_Riz_IP2K_K1 : INT := PK_PIV_FP_TemperaturaOhlNaVyhode_IP2K_K1 + 1;
	PK_PIV_FP_TokModulya0_IP2K_K1 : INT := PK_PIV_FP_Riz_IP2K_K1 + 1;
	PK_PIV_FP_TokModulya1_IP2K_K1 : INT := PK_PIV_FP_TokModulya0_IP2K_K1 + 1;
	PK_PIV_FP_TokModulya2_IP2K_K1 : INT := PK_PIV_FP_TokModulya1_IP2K_K1 + 1;
	PK_PIV_FP_TokModulya3_IP2K_K1 : INT := PK_PIV_FP_TokModulya2_IP2K_K1 + 1;
	PK_PIV_FP_TokModulya4_IP2K_K1 : INT := PK_PIV_FP_TokModulya3_IP2K_K1 + 1;
	PK_PIV_FP_TokModulya5_IP2K_K1 : INT := PK_PIV_FP_TokModulya4_IP2K_K1 + 1;
	PK_PIV_FP_TempModulya0_IP2K_K1 : INT := PK_PIV_FP_TokModulya5_IP2K_K1 + 1;
	PK_PIV_FP_TempModulya1_IP2K_K1 : INT := PK_PIV_FP_TempModulya0_IP2K_K1 + 1;
	PK_PIV_FP_TempModulya2_IP2K_K1 : INT := PK_PIV_FP_TempModulya1_IP2K_K1 + 1;
	PK_PIV_FP_TempModulya3_IP2K_K1 : INT := PK_PIV_FP_TempModulya2_IP2K_K1 + 1;
	PK_PIV_FP_TempModulya4_IP2K_K1 : INT := PK_PIV_FP_TempModulya3_IP2K_K1 + 1;
	PK_PIV_FP_TempModulya5_IP2K_K1 : INT := PK_PIV_FP_TempModulya4_IP2K_K1 + 1;
	PK_PIV_FP_SostoyanieModulya_IP2K_K1 : INT := PK_PIV_FP_TempModulya5_IP2K_K1 + 1;
	PK_PIV_FP_U380_IP2K_K1 : INT := PK_PIV_FP_SostoyanieModulya_IP2K_K1 + 1;
	PK_PIV_FP_PSW_IP2K_K1 : INT := PK_PIV_FP_U380_IP2K_K1 + 1;
	PK_PIV_FP_Iipn_K1 : INT := PK_PIV_FP_PSW_IP2K_K1 + 1;
	PK_PIV_FP_Uipn_K1 : INT := PK_PIV_FP_Iipn_K1 + 1;
	PK_PIV_FP_Wipn_K1 : INT := PK_PIV_FP_Uipn_K1 + 1;
	PK_PIV_FP_Ripn_K1 : INT := PK_PIV_FP_Wipn_K1 + 1;
	PK_PIV_FP_Iipn_K2 : INT := PK_PIV_FP_Ripn_K1 + 1;
	PK_PIV_FP_Uipn_K2 : INT := PK_PIV_FP_Iipn_K2 + 1;
	PK_PIV_FP_Wipn_K2 : INT := PK_PIV_FP_Uipn_K2 + 1;
	PK_PIV_FP_Ripn_K2 : INT := PK_PIV_FP_Wipn_K2 + 1;
	PK_PIV_FP_Tdtn : INT := PK_PIV_FP_Ripn_K2 + 1;
	PK_PIV_FP_Tn : INT := PK_PIV_FP_Tdtn + 1;
	PK_PIV_FP_PSWdtn : INT := PK_PIV_FP_Tn + 1;
	PK_PIV_FP_Tdtr : INT := PK_PIV_FP_PSWdtn + 1;
	PK_PIV_FP_Tr : INT := PK_PIV_FP_Tdtr + 1;
	PK_PIV_FP_PSWdtr : INT := PK_PIV_FP_Tr + 1;
	PK_PIV_FP_Hur : INT := PK_PIV_FP_PSWdtr + 1;
	PK_PIV_FP_Hur_DU : INT := PK_PIV_FP_Hur + 1;
	PK_PIV_FP_Hur_DV : INT := PK_PIV_FP_Hur_DU + 1;
	PK_PIV_FP_STAT : INT := PK_PIV_FP_Hur_DV + 1;
	PK_PIV_FP_PEAKW : INT := PK_PIV_FP_STAT + 1;
	PK_PIV_FP_PEAKC : INT := PK_PIV_FP_PEAKW + 1;
	PK_PIV_FP_RANGE : INT := PK_PIV_FP_PEAKC + 1;
	PK_PIV_FP_DISP : INT := PK_PIV_FP_RANGE + 1;
	PK_PIV_FP_MEAN : INT := PK_PIV_FP_DISP + 1;
	PK_PIV_FP_LASER : INT := PK_PIV_FP_MEAN + 1;
	PK_PIV_FP_Vrosta : INT := PK_PIV_FP_LASER + 1;
	PK_PIV_FP_Vpodrezki : INT := PK_PIV_FP_Vrosta + 1;
	PK_PIV_FP_Dkr : INT := PK_PIV_FP_Vpodrezki + 1;
	PK_PIV_FP_Dkr_TDD : INT := PK_PIV_FP_Dkr + 1;
	PK_PIV_FP_Dkr_DV : INT := PK_PIV_FP_Dkr_TDD + 1;
	PK_PIV_FP_DeltaX : INT := PK_PIV_FP_Dkr_DV + 1;
	PK_PIV_FP_DeltaY : INT := PK_PIV_FP_DeltaX + 1;
	PK_PIV_FP_Tvk1 : INT := PK_PIV_FP_DeltaY + 1;
	PK_PIV_FP_Tvk2 : INT := PK_PIV_FP_Tvk1 + 1;
	PK_PIV_FP_Tvk3 : INT := PK_PIV_FP_Tvk2 + 1;
	PK_PIV_FP_Tvk4 : INT := PK_PIV_FP_Tvk3 + 1;
	PK_PIV_FP_Tvk5 : INT := PK_PIV_FP_Tvk4 + 1;
	PK_PIV_FP_Tvk6 : INT := PK_PIV_FP_Tvk5 + 1;
	PK_PIV_FP_Tvk7 : INT := PK_PIV_FP_Tvk6 + 1;
	PK_PIV_FP_Tvk8 : INT := PK_PIV_FP_Tvk7 + 1;
	PK_PIV_FP_Udk : INT := PK_PIV_FP_Tvk8 + 1;
	PK_PIV_FP_Pnk : INT := PK_PIV_FP_Udk + 1;
	PK_PIV_FP_Pvk : INT := PK_PIV_FP_Pnk + 1;
	PK_PIV_FP_Pavd1 : INT := PK_PIV_FP_Pvk + 1;
	PK_PIV_FP_Pavd2 : INT := PK_PIV_FP_Pavd1 + 1;
	PK_PIV_FP_VELICHINA_NATEKANIYA : INT := PK_PIV_FP_Pavd2 + 1;
	PK_PIV_FP_Mmonokristalla : INT := PK_PIV_FP_VELICHINA_NATEKANIYA + 1;
	PK_PIV_FP_Mkremniya_v_tigle : INT := PK_PIV_FP_Mmonokristalla + 1;
	PK_PIV_FP_GlubinaRasplava : INT := PK_PIV_FP_Mkremniya_v_tigle + 1;
	PK_PIV_OP_Dzerkala_rasplava : INT := PK_PIV_FP_GlubinaRasplava + 1;
	PK_PIV_FP_Lmonokristalla : INT := PK_PIV_OP_Dzerkala_rasplava + 1;
	PK_PIV_FP_Ltekushej_chasti_monokristalla : INT := PK_PIV_FP_Lmonokristalla + 1;
	PK_PIV_FP_VremyaTekushegoEtapa : INT := PK_PIV_FP_Ltekushej_chasti_monokristalla + 1;
	PK_PIV_FP_MassaZatravlivaniya : INT := PK_PIV_FP_VremyaTekushegoEtapa + 1;
	PK_PIV_FP_MassaPerehodaZatravka_SHejka : INT := PK_PIV_FP_MassaZatravlivaniya + 1;
	PK_PIV_FP_MassaSHejki : INT := PK_PIV_FP_MassaPerehodaZatravka_SHejka + 1;
	PK_PIV_FP_MassaPerehodaSHejka_Konus : INT := PK_PIV_FP_MassaSHejki + 1;
	PK_PIV_FP_MassaKonusa : INT := PK_PIV_FP_MassaPerehodaSHejka_Konus + 1;
	PK_PIV_FP_MassaPerehodaKonus_TSilindr : INT := PK_PIV_FP_MassaKonusa + 1;
	PK_PIV_FP_MassaStabilizatsiiTSilindra : INT := PK_PIV_FP_MassaPerehodaKonus_TSilindr + 1;
	PK_PIV_FP_MassaTSilindra : INT := PK_PIV_FP_MassaStabilizatsiiTSilindra + 1;
	PK_PIV_FP_MassaPerehodaTSilindr_ObrKonus : INT := PK_PIV_FP_MassaTSilindra + 1;
	PK_PIV_FP_MassaObratnogoKonusa : INT := PK_PIV_FP_MassaPerehodaTSilindr_ObrKonus + 1;
	PK_PIV_FP_DlinaZatravlivaniya : INT := PK_PIV_FP_MassaObratnogoKonusa + 1;
	PK_PIV_FP_DlinaPerehodaZatravka_SHejka : INT := PK_PIV_FP_DlinaZatravlivaniya + 1;
	PK_PIV_FP_DlinaSHejki : INT := PK_PIV_FP_DlinaPerehodaZatravka_SHejka + 1;
	PK_PIV_FP_DlinaPerehodaSHejka_Konus : INT := PK_PIV_FP_DlinaSHejki + 1;
	PK_PIV_FP_DlinaKonusa : INT := PK_PIV_FP_DlinaPerehodaSHejka_Konus + 1;
	PK_PIV_FP_DlinaPerehodaKonus_TSilindr : INT := PK_PIV_FP_DlinaKonusa + 1;
	PK_PIV_FP_DlinaStabilizatsiiTSilindra : INT := PK_PIV_FP_DlinaPerehodaKonus_TSilindr + 1;
	PK_PIV_FP_DlinaTSilindra : INT := PK_PIV_FP_DlinaStabilizatsiiTSilindra + 1;
	PK_PIV_FP_DlinaPerehodaTSilindr_ObrKonus : INT := PK_PIV_FP_DlinaTSilindra + 1;
	PK_PIV_FP_DlinaObratnogoKonusa : INT := PK_PIV_FP_DlinaPerehodaTSilindr_ObrKonus + 1;
	PK_PIV_FP_I_ZR : INT := PK_PIV_FP_DlinaObratnogoKonusa + 1;
	PK_PIV_FP_I_ZU : INT := PK_PIV_FP_I_ZR + 1;
	PK_PIV_FP_I_ZV : INT := PK_PIV_FP_I_ZU + 1;
	PK_PIV_FP_I_TR : INT := PK_PIV_FP_I_ZV + 1;
	PK_PIV_FP_I_TU : INT := PK_PIV_FP_I_TR + 1;
	PK_PIV_FP_I_TV : INT := PK_PIV_FP_I_TU + 1;
	PK_PIV_FP_VzR : INT := PK_PIV_FP_I_TV + 1;
	PK_PIV_FP_VzU : INT := PK_PIV_FP_VzR + 1;
	PK_PIV_ZD_Vz : INT := PK_PIV_FP_VzU + 1;
	PK_PIV_FP_Vz : INT := PK_PIV_ZD_Vz + 1;
	PK_PIV_FP_Xz : INT := PK_PIV_FP_Vz + 1;
	PK_PIV_FP_Wz : INT := PK_PIV_FP_Xz + 1;
	PK_PIV_FP_Wz_UGOL : INT := PK_PIV_FP_Wz + 1;
	PK_PIV_FP_VtR : INT := PK_PIV_FP_Wz_UGOL + 1;
	PK_PIV_FP_VtU : INT := PK_PIV_FP_VtR + 1;
	PK_PIV_ZD_Vt : INT := PK_PIV_FP_VtU + 1;
	PK_PIV_FP_Vt : INT := PK_PIV_ZD_Vt + 1;
	PK_PIV_FP_Xt : INT := PK_PIV_FP_Vt + 1;
	PK_PIV_FP_Wt : INT := PK_PIV_FP_Xt + 1;
	PK_PIV_FP_Wt_UGOL : INT := PK_PIV_FP_Wt + 1;
	PK_PIV_FP_L_KZ_UR : INT := PK_PIV_FP_Wt_UGOL + 1;
	
	PK_PIV_NP_L_OT_STYKA_NK_DO_PNUR_L1_VNE_DIAPAZONA : INT := PK_PIV_FP_L_KZ_UR + 1;
	PK_PIV_NP_L_OT_DP_DO_STYKA_NK_L2_VNE_DIAPAZONA : INT := PK_PIV_NP_L_OT_STYKA_NK_DO_PNUR_L1_VNE_DIAPAZONA + 1;
	PK_PIV_NP_MaksimalqnayaVzR_VNE_DIAPAZONA : INT := PK_PIV_NP_L_OT_DP_DO_STYKA_NK_L2_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Lz_OT_KVP_DO_DP_Lppz_VNE_DIAPAZONA : INT := PK_PIV_NP_MaksimalqnayaVzR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Lt_OT_KNP_DO_KVP_VNE_DIAPAZONA : INT := PK_PIV_NP_Lz_OT_KVP_DO_DP_Lppz_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaQgaza_VNE_DIAPAZONA : INT := PK_PIV_NP_Lt_OT_KNP_DO_KVP_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PogreshnostqQgaza_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaQgaza_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Ppor_VNE_DIAPAZONA : INT := PK_PIV_NP_PogreshnostqQgaza_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_NA_OTKR_VNE_DIAPAZONA : INT := PK_PIV_NP_Ppor_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_NA_ZAKR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_NA_OTKR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaPnk_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_NA_ZAKR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaWptd_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaPnk_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kp_Wipn_K1_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaWptd_VNE_DIAPAZONA + 1;
	PK_PIV_NP_TipIP_K1N_VNE_DIAPAZONA : INT := PK_PIV_NP_Kp_Wipn_K1_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Pauza_Wipn_K1_VNE_DIAPAZONA : INT := PK_PIV_NP_TipIP_K1N_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PogreshnostqWipn_K1_VNE_DIAPAZONA : INT := PK_PIV_NP_Pauza_Wipn_K1_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Iptd_MAH_VNE_DIAPAZONA : INT := PK_PIV_NP_PogreshnostqWipn_K1_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Wipn_K1_MAH_VNE_DIAPAZONA : INT := PK_PIV_NP_Iptd_MAH_VNE_DIAPAZONA + 1;
	PK_PIV_NP_DeltaW_Razogreva_VNE_DIAPAZONA : INT := PK_PIV_NP_Wipn_K1_MAH_VNE_DIAPAZONA + 1;
	PK_PIV_NP_DeltaVremeniRazogreva_VNE_DIAPAZONA : INT := PK_PIV_NP_DeltaW_Razogreva_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Tn_MAX_VNE_DIAPAZONA : INT := PK_PIV_NP_DeltaVremeniRazogreva_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kp_Tn_VNE_DIAPAZONA : INT := PK_PIV_NP_Tn_MAX_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kd_Tn_VNE_DIAPAZONA : INT := PK_PIV_NP_Kp_Tn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Ki_Tn_VNE_DIAPAZONA : INT := PK_PIV_NP_Kd_Tn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kz_Tn_VNE_DIAPAZONA : INT := PK_PIV_NP_Ki_Tn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaTn_VNE_DIAPAZONA : INT := PK_PIV_NP_Kz_Tn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PogreshnostqTn_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaTn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Pauza_Tn_VNE_DIAPAZONA : INT := PK_PIV_NP_PogreshnostqTn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kp_Tr_VNE_DIAPAZONA : INT := PK_PIV_NP_Pauza_Tn_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kd_Tr_VNE_DIAPAZONA : INT := PK_PIV_NP_Kp_Tr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Ki_Tr_VNE_DIAPAZONA : INT := PK_PIV_NP_Kd_Tr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kz_Tr_VNE_DIAPAZONA : INT := PK_PIV_NP_Ki_Tr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Pauza_Tr_VNE_DIAPAZONA : INT := PK_PIV_NP_Kz_Tr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Tr_MAX_VNE_DIAPAZONA : INT := PK_PIV_NP_Pauza_Tr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaTr_VNE_DIAPAZONA : INT := PK_PIV_NP_Tr_MAX_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PogreshnostqTr_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaTr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_DeltaTr_MAX_VNE_DIAPAZONA : INT := PK_PIV_NP_PogreshnostqTr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PopravkaVtR_Nur_VNE_DIAPAZONA : INT := PK_PIV_NP_DeltaTr_MAX_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Dk_VNE_DIAPAZONA : INT := PK_PIV_NP_PopravkaVtR_Nur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_V_ZR_VNE_DIAPAZONA : INT := PK_PIV_NP_Dk_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_X_ZR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_V_ZR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_V_ZU_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_X_ZR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_X_ZU_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_V_ZU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_V_ZV_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_X_ZU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_X_ZV_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_V_ZV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_V_TR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_X_ZV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_X_TR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_V_TR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_V_TU_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_X_TR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_X_TU_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_V_TU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_V_TV_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_X_TU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_X_TV_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_V_TV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_RAB_USK_ZR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_X_TV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_A_ZR_VNE_DIAPAZONA : INT := PK_PIV_NP_RAB_USK_ZR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AVR_TOR_ZR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_A_ZR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_RAB_USK_ZU_VNE_DIAPAZONA : INT := PK_PIV_NP_AVR_TOR_ZR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_A_ZU_VNE_DIAPAZONA : INT := PK_PIV_NP_RAB_USK_ZU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AVR_TOR_ZU_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_A_ZU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_RAB_USK_ZV_VNE_DIAPAZONA : INT := PK_PIV_NP_AVR_TOR_ZU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_A_ZV_VNE_DIAPAZONA : INT := PK_PIV_NP_RAB_USK_ZV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AVR_TOR_ZV_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_A_ZV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_RAB_USK_TR_VNE_DIAPAZONA : INT := PK_PIV_NP_AVR_TOR_ZV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_A_TR_VNE_DIAPAZONA : INT := PK_PIV_NP_RAB_USK_TR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AVR_TOR_TR_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_A_TR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_RAB_USK_TU_VNE_DIAPAZONA : INT := PK_PIV_NP_AVR_TOR_TR_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_A_TU_VNE_DIAPAZONA : INT := PK_PIV_NP_RAB_USK_TU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AVR_TOR_TU_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_A_TU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_RAB_USK_TV_VNE_DIAPAZONA : INT := PK_PIV_NP_AVR_TOR_TU_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KOEF_A_TV_VNE_DIAPAZONA : INT := PK_PIV_NP_RAB_USK_TV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AVR_TOR_TV_VNE_DIAPAZONA : INT := PK_PIV_NP_KOEF_A_TV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_MIN_DU_Hur_VNE_DIAPAZONA : INT := PK_PIV_NP_AVR_TOR_TV_VNE_DIAPAZONA + 1;
	PK_PIV_NP_MAX_DU_Hur_VNE_DIAPAZONA : INT := PK_PIV_NP_MIN_DU_Hur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_MIN_DUDD_Hur_VNE_DIAPAZONA : INT := PK_PIV_NP_MAX_DU_Hur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_MAX_DUDD_Hur_VNE_DIAPAZONA : INT := PK_PIV_NP_MIN_DUDD_Hur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kp_DU_Hur_VNE_DIAPAZONA : INT := PK_PIV_NP_MAX_DUDD_Hur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kp_DUDD_Hur_VNE_DIAPAZONA : INT := PK_PIV_NP_Kp_DU_Hur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PredupreditelqnyjHur_VNE_DIAPAZONA : INT := PK_PIV_NP_Kp_DUDD_Hur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_AvarijnayaOshibkaHur_VNE_DIAPAZONA : INT := PK_PIV_NP_PredupreditelqnyjHur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Dkr_MAX_VNE_DIAPAZONA : INT := PK_PIV_NP_AvarijnayaOshibkaHur_VNE_DIAPAZONA + 1;
	PK_PIV_NP_DeltaVzRS_MAH_VNE_DIAPAZONA : INT := PK_PIV_NP_Dkr_MAX_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaDkr_VNE_DIAPAZONA : INT := PK_PIV_NP_DeltaVzRS_MAH_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PogreshnostqDkr_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaDkr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Pauza_Dkr_VNE_DIAPAZONA : INT := PK_PIV_NP_PogreshnostqDkr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kp_Vrosta_VNE_DIAPAZONA : INT := PK_PIV_NP_Pauza_Dkr_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kd_Vrosta_VNE_DIAPAZONA : INT := PK_PIV_NP_Kp_Vrosta_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Ki_Vrosta_VNE_DIAPAZONA : INT := PK_PIV_NP_Kd_Vrosta_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Kz_Vrosta : INT := PK_PIV_NP_Ki_Vrosta_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Pauza_Vrosta : INT := PK_PIV_NP_Kz_Vrosta + 1;
	PK_PIV_NP_VremyaOsredneniyaVzVrosta : INT := PK_PIV_NP_Pauza_Vrosta + 1;
	PK_PIV_NP_VzR_MAX_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaOsredneniyaVzVrosta + 1;
	PK_PIV_NP_DeltaTn_MAX_VNE_DIAPAZONA : INT := PK_PIV_NP_VzR_MAX_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Pauza_REG_ROSTA_VNE_DIAPAZONA : INT := PK_PIV_NP_DeltaTn_MAX_VNE_DIAPAZONA + 1;
	PK_PIV_NP_VremyaPerehodnogoProtsessaVrosta : INT := PK_PIV_NP_Pauza_REG_ROSTA_VNE_DIAPAZONA + 1;
	PK_PIV_NP_PogreshnostqVrosta_VNE_DIAPAZONA : INT := PK_PIV_NP_VremyaPerehodnogoProtsessaVrosta + 1;
	PK_PIV_NP_KoefA_Pnk_VNE_DIAPAZONA : INT := PK_PIV_NP_PogreshnostqVrosta_VNE_DIAPAZONA + 1;
	PK_PIV_NP_KoefV_Pnk_VNE_DIAPAZONA : INT := PK_PIV_NP_KoefA_Pnk_VNE_DIAPAZONA + 1;
	PK_PIV_NP_Lz_OT_KVP_DO_KNP_VNE_DIAPAZONA : INT := PK_PIV_NP_KoefV_Pnk_VNE_DIAPAZONA + 1;
	PK_PIV_GEOMETRIYA_TIGLYA_RASSCHITANA_USPESHNO : INT := PK_PIV_NP_Lz_OT_KVP_DO_KNP_VNE_DIAPAZONA + 1;
	PK_PIV_VVEDENNYE_RADIUSY_NE_POZVOLYAYUT_RASSCHITATQ_GEOMETRIYU_TIGLYA : INT := PK_PIV_GEOMETRIYA_TIGLYA_RASSCHITANA_USPESHNO + 1;
	
	PK_PIV_ZD_DLYA_REG_RG_VNE_DIAPAZONA : INT := PK_PIV_VVEDENNYE_RADIUSY_NE_POZVOLYAYUT_RASSCHITATQ_GEOMETRIYU_TIGLYA + 1;
	PK_PIV_ZD_DLYA_REG_D_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_RG_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_W_IPN_K1_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_D_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_W_IPN_K2_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_W_IPN_K1_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_TN_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_W_IPN_K2_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_TR_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_TN_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_ROSTA_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_TR_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_BAZA_REG_ROSTA_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_ROSTA_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_UR_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_BAZA_REG_ROSTA_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_DK_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_UR_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_VzR_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_DK_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_VzU_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_VzR_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_Xz_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_VzU_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_Wz_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_Xz_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_VtR_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_Wz_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_VtU_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_VtR_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_Xt_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_VtU_VNE_DIAPAZONA + 1;
	PK_PIV_ZD_DLYA_REG_Wt_VNE_DIAPAZONA : INT := PK_PIV_ZD_DLYA_REG_Xt_VNE_DIAPAZONA + 1;
	
	PK_PIV_OTKAZ_DVIGATELYA_ZR : INT := PK_PIV_ZD_DLYA_REG_Wt_VNE_DIAPAZONA + 1;
	PK_PIV_OTKAZ_DATCHIKA_ZR : INT := PK_PIV_OTKAZ_DVIGATELYA_ZR + 1;
	PK_PIV_NACHALO_DVIZHENIYA_V_ZR : INT := PK_PIV_OTKAZ_DATCHIKA_ZR + 1;
	PK_PIV_NACHALO_DVIZHENIYA_X_ZR : INT := PK_PIV_NACHALO_DVIZHENIYA_V_ZR + 1;
	PK_PIV_OSTANOV_DVIZHENIYA_ZR : INT := PK_PIV_NACHALO_DVIZHENIYA_X_ZR + 1;
	PK_PIV_NEIZVESTNYJ_KOD_V_ZR : INT := PK_PIV_OSTANOV_DVIZHENIYA_ZR + 1;
	PK_PIV_OTKAZ_PRIVODA_ZR : INT := PK_PIV_NEIZVESTNYJ_KOD_V_ZR + 1;
	PK_PIV_ZR_RESTARTY : INT := PK_PIV_OTKAZ_PRIVODA_ZR + 1;
	PK_PIV_OTKAZ_DVIGATELYA_ZU : INT := PK_PIV_ZR_RESTARTY + 1;
	PK_PIV_OTKAZ_DATCHIKA_ZU : INT := PK_PIV_OTKAZ_DVIGATELYA_ZU + 1;
	PK_PIV_NACHALO_DVIZHENIYA_V_ZU : INT := PK_PIV_OTKAZ_DATCHIKA_ZU + 1;
	PK_PIV_NACHALO_DVIZHENIYA_X_ZU : INT := PK_PIV_NACHALO_DVIZHENIYA_V_ZU + 1;
	PK_PIV_OSTANOV_DVIZHENIYA_ZU : INT := PK_PIV_NACHALO_DVIZHENIYA_X_ZU + 1;
	PK_PIV_NEIZVESTNYJ_KOD_V_ZU : INT := PK_PIV_OSTANOV_DVIZHENIYA_ZU + 1;
	PK_PIV_OTKAZ_PRIVODA_ZU : INT := PK_PIV_NEIZVESTNYJ_KOD_V_ZU + 1;
	PK_PIV_ZU_RESTARTY : INT := PK_PIV_OTKAZ_PRIVODA_ZU + 1;
	PK_PIV_NAEZD_NA_KVP_Z : INT := PK_PIV_ZU_RESTARTY + 1;
	PK_PIV_NAEZD_NA_KNP_Z : INT := PK_PIV_NAEZD_NA_KVP_Z + 1;
	PK_PIV_SQEZD_S_DKP_Z : INT := PK_PIV_NAEZD_NA_KNP_Z + 1;
	PK_PIV_OTKAZ_DVIGATELYA_ZV : INT := PK_PIV_SQEZD_S_DKP_Z + 1;
	PK_PIV_OTKAZ_DATCHIKA_ZV : INT := PK_PIV_OTKAZ_DVIGATELYA_ZV + 1;
	PK_PIV_NACHALO_DVIZHENIYA_V_ZV : INT := PK_PIV_OTKAZ_DATCHIKA_ZV + 1;
	PK_PIV_NACHALO_DVIZHENIYA_X_ZV : INT := PK_PIV_NACHALO_DVIZHENIYA_V_ZV + 1;
	PK_PIV_OSTANOV_DVIZHENIYA_ZV : INT := PK_PIV_NACHALO_DVIZHENIYA_X_ZV + 1;
	PK_PIV_NEIZVESTNYJ_KOD_V_ZV : INT := PK_PIV_OSTANOV_DVIZHENIYA_ZV + 1;
	PK_PIV_OTKAZ_PRIVODA_ZV : INT := PK_PIV_NEIZVESTNYJ_KOD_V_ZV + 1;
	PK_PIV_ZV_RESTARTY : INT := PK_PIV_OTKAZ_PRIVODA_ZV + 1;
	PK_PIV_OTKAZ_DVIGATELYA_TR : INT := PK_PIV_ZV_RESTARTY + 1;
	PK_PIV_OTKAZ_DATCHIKA_TR : INT := PK_PIV_OTKAZ_DVIGATELYA_TR + 1;
	PK_PIV_NACHALO_DVIZHENIYA_V_TR : INT := PK_PIV_OTKAZ_DATCHIKA_TR + 1;
	PK_PIV_NACHALO_DVIZHENIYA_X_TR : INT := PK_PIV_NACHALO_DVIZHENIYA_V_TR + 1;
	PK_PIV_OSTANOV_DVIZHENIYA_TR : INT := PK_PIV_NACHALO_DVIZHENIYA_X_TR + 1;
	PK_PIV_NEIZVESTNYJ_KOD_V_TR : INT := PK_PIV_OSTANOV_DVIZHENIYA_TR + 1;
	PK_PIV_OTKAZ_PRIVODA_TR : INT := PK_PIV_NEIZVESTNYJ_KOD_V_TR + 1;
	PK_PIV_TR_RESTARTY : INT := PK_PIV_OTKAZ_PRIVODA_TR + 1;
	PK_PIV_OTKAZ_DVIGATELYA_TU : INT := PK_PIV_TR_RESTARTY + 1;
	PK_PIV_OTKAZ_DATCHIKA_TU : INT := PK_PIV_OTKAZ_DVIGATELYA_TU + 1;
	PK_PIV_NACHALO_DVIZHENIYA_V_TU : INT := PK_PIV_OTKAZ_DATCHIKA_TU + 1;
	PK_PIV_NACHALO_DVIZHENIYA_X_TU : INT := PK_PIV_NACHALO_DVIZHENIYA_V_TU + 1;
	PK_PIV_OSTANOV_DVIZHENIYA_TU : INT := PK_PIV_NACHALO_DVIZHENIYA_X_TU + 1;
	PK_PIV_NEIZVESTNYJ_KOD_V_TU : INT := PK_PIV_OSTANOV_DVIZHENIYA_TU + 1;
	PK_PIV_OTKAZ_PRIVODA_TU : INT := PK_PIV_NEIZVESTNYJ_KOD_V_TU + 1;
	PK_PIV_TU_RESTARTY : INT := PK_PIV_OTKAZ_PRIVODA_TU + 1;
	PK_PIV_NAEZD_NA_KVP_T : INT := PK_PIV_TU_RESTARTY + 1;
	PK_PIV_NAEZD_NA_KNP_T : INT := PK_PIV_NAEZD_NA_KVP_T + 1;
	PK_PIV_SQEZD_S_DKP_T : INT := PK_PIV_NAEZD_NA_KNP_T + 1;
	PK_PIV_OTKAZ_DVIGATELYA_TV : INT := PK_PIV_SQEZD_S_DKP_T + 1;
	PK_PIV_OTKAZ_DATCHIKA_TV : INT := PK_PIV_OTKAZ_DVIGATELYA_TV + 1;
	PK_PIV_NACHALO_DVIZHENIYA_V_TV : INT := PK_PIV_OTKAZ_DATCHIKA_TV + 1;
	PK_PIV_NACHALO_DVIZHENIYA_X_TV : INT := PK_PIV_NACHALO_DVIZHENIYA_V_TV + 1;
	PK_PIV_OSTANOV_DVIZHENIYA_TV : INT := PK_PIV_NACHALO_DVIZHENIYA_X_TV + 1;
	PK_PIV_NEIZVESTNYJ_KOD_V_TV : INT := PK_PIV_OSTANOV_DVIZHENIYA_TV + 1;
	PK_PIV_OTKAZ_PRIVODA_TV : INT := PK_PIV_NEIZVESTNYJ_KOD_V_TV + 1;
	PK_PIV_TV_RESTARTY : INT := PK_PIV_OTKAZ_PRIVODA_TV + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR : INT := PK_PIV_TV_RESTARTY + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU + 1;
	SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU + 1;
	SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV : INT := SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV + 1;
	
	KOMANDA_1_DATCHIKI : INT := SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur : INT := KOMANDA_1_DATCHIKI;
	PK_PIV_NET_DOSTOVERNOSTI_Hur : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur_DU : INT := PK_PIV_NET_DOSTOVERNOSTI_Hur + 1;
	PK_PIV_NET_DOSTOVERNOSTI_Hur_DU : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur_DU + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur_DV : INT := PK_PIV_NET_DOSTOVERNOSTI_Hur_DU + 1;
	PK_PIV_NET_DOSTOVERNOSTI_Hur_DV : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur_DV + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Lmonokristalla : INT := PK_PIV_NET_DOSTOVERNOSTI_Hur_DV + 1;
	PK_PIV_NET_DOSTOVERNOSTI_Lmonokristalla : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Lmonokristalla + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr : INT := PK_PIV_NET_DOSTOVERNOSTI_Lmonokristalla + 1;
	PK_PIV_NET_DOSTOVERNOSTI_Dkr : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr_TDD : INT := PK_PIV_NET_DOSTOVERNOSTI_Dkr + 1;
	PK_PIV_NET_DOSTOVERNOSTI_Dkr_TDD : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr_TDD + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr_DV : INT := PK_PIV_NET_DOSTOVERNOSTI_Dkr_TDD + 1;
	PK_PIV_NET_DOSTOVERNOSTI_Dkr_DV : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr_DV + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_DTN : INT := PK_PIV_NET_DOSTOVERNOSTI_Dkr_DV + 1;
	PK_PIV_NET_DOSTOVERNOSTI_DTN : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_DTN + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_DTR : INT := PK_PIV_NET_DOSTOVERNOSTI_DTN + 1;
	PK_PIV_NET_DOSTOVERNOSTI_DTR : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_DTR + 1;
	PK_PIV_ESTQ_DOSTOVERNOSTQ_L_KZ_UR : INT := PK_PIV_NET_DOSTOVERNOSTI_DTR + 1;
	PK_PIV_NET_DOSTOVERNOSTI_L_KZ_UR : INT := PK_PIV_ESTQ_DOSTOVERNOSTQ_L_KZ_UR + 1;
	PK_PIV_DU_ZAPUSK_TESTA : INT := PK_PIV_NET_DOSTOVERNOSTI_L_KZ_UR + 1;
	PK_PIV_DU_GOTOV_K_RABOTE : INT := PK_PIV_DU_ZAPUSK_TESTA + 1;
	PK_PIV_DU_SNYATQ_KOEFFITSIENTY : INT := PK_PIV_DU_GOTOV_K_RABOTE + 1;
	PK_PIV_DU_NACHALO_SNYATIYA_KOEFFITSIENTOV : INT := PK_PIV_DU_SNYATQ_KOEFFITSIENTY + 1;
	PK_PIV_DU_KONETS_SNYATIYA_KOEFFITSIENTOV : INT := PK_PIV_DU_NACHALO_SNYATIYA_KOEFFITSIENTOV + 1;
	PK_PIV_DU_TAJMAUT_SNYATIYA_KOEFFITSIENTOV_ISTEK : INT := PK_PIV_DU_KONETS_SNYATIYA_KOEFFITSIENTOV + 1;
	PK_PIV_DU_SNYATQ_VREMYA_EKSPOZITSII_LAZERA_0 : INT := PK_PIV_DU_TAJMAUT_SNYATIYA_KOEFFITSIENTOV_ISTEK + 1;
	PK_PIV_DU_SNYATQ_VREMYA_EKSPOZITSII_LAZERA_1 : INT := PK_PIV_DU_SNYATQ_VREMYA_EKSPOZITSII_LAZERA_0 + 1;
	PK_PIV_DU_NACHALO_SNYATIYA_EKSPOZITSII_LAZERA : INT := PK_PIV_DU_SNYATQ_VREMYA_EKSPOZITSII_LAZERA_1 + 1;
	PK_PIV_DU_KONETS_SNYATIYA_VREMENI_EKSPOZITSII_LAZERA : INT := PK_PIV_DU_NACHALO_SNYATIYA_EKSPOZITSII_LAZERA + 1;
	PK_PIV_DU_TAJMAUT_SNYATIYA_VREMENI_EKSPOZ_LAZ_ISTEK : INT := PK_PIV_DU_KONETS_SNYATIYA_VREMENI_EKSPOZITSII_LAZERA + 1;
	PK_PIV_DU_UROVENQ_DOSTOVEREN : INT := PK_PIV_DU_TAJMAUT_SNYATIYA_VREMENI_EKSPOZ_LAZ_ISTEK + 1;
	PK_PIV_DU_UROVENQ_NE_DOSTOVEREN : INT := PK_PIV_DU_UROVENQ_DOSTOVEREN + 1;
	PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_0 : INT := PK_PIV_DU_UROVENQ_NE_DOSTOVEREN + 1;
	PK_PIV_DU_ADAPTATSIYA_LAZERA_0_USPESHNA : INT := PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_0 + 1;
	PK_PIV_DU_ADAPTATSIYA_LAZERA_0_NE_USPESHNA : INT := PK_PIV_DU_ADAPTATSIYA_LAZERA_0_USPESHNA + 1;
	PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_1 : INT := PK_PIV_DU_ADAPTATSIYA_LAZERA_0_NE_USPESHNA + 1;
	PK_PIV_DU_ADAPTATSIYA_LAZERA_1_USPESHNA : INT := PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_1 + 1;
	PK_PIV_DU_ADAPTATSIYA_LAZERA_1_NE_USPESHNA : INT := PK_PIV_DU_ADAPTATSIYA_LAZERA_1_USPESHNA + 1;
	PK_PIV_DU_PRERVATQ_ADARPTATSIYU : INT := PK_PIV_DU_ADAPTATSIYA_LAZERA_1_NE_USPESHNA + 1;
	PK_PIV_DU_VKL_VYCHISLENIE_TEMNOVOGO_SIGNALA : INT := PK_PIV_DU_PRERVATQ_ADARPTATSIYU + 1;
	PK_PIV_DU_VYK_VYCHISLENIE_TEMNOVOGO_SIGNALA : INT := PK_PIV_DU_VKL_VYCHISLENIE_TEMNOVOGO_SIGNALA + 1;
	PK_PIV_DU_NACHALO_KALIBROVKI : INT := PK_PIV_DU_VYK_VYCHISLENIE_TEMNOVOGO_SIGNALA + 1;
	PK_PIV_DU_KALIBROVKA_VYPOLNYAETSYA : INT := PK_PIV_DU_NACHALO_KALIBROVKI + 1;
	PK_PIV_DU_KONETS_KALIBROVKI_PO_TOCHKE : INT := PK_PIV_DU_KALIBROVKA_VYPOLNYAETSYA + 1;
	PK_PIV_DU_KALIBROVKA_ZAVERSHENA_USPESHNO : INT := PK_PIV_DU_KONETS_KALIBROVKI_PO_TOCHKE + 1;
	PK_PIV_DU_REZHIM_IZMERENIYA : INT := PK_PIV_DU_KALIBROVKA_ZAVERSHENA_USPESHNO + 1;
	PK_PIV_DU_KOD_RESTARTA : INT := PK_PIV_DU_REZHIM_IZMERENIYA + 1;
	PK_PIV_DU_RESTARTY : INT := PK_PIV_DU_KOD_RESTARTA + 1;
	PK_PIV_DU_NACHALO_REZHIMA_OTLADKI : INT := PK_PIV_DU_RESTARTY + 1;
	PK_PIV_DU_KONETS_REZHIMA_OTLADKI : INT := PK_PIV_DU_NACHALO_REZHIMA_OTLADKI + 1;
	PK_PIV_DU_VKLYUCHITQ_LAZER_0 : INT := PK_PIV_DU_KONETS_REZHIMA_OTLADKI + 1;
	PK_PIV_DU_VKLYUCHITQ_LAZER_1 : INT := PK_PIV_DU_VKLYUCHITQ_LAZER_0 + 1;
	PK_PIV_DU_VYKLYUCHITQ_LAZER_0 : INT := PK_PIV_DU_VKLYUCHITQ_LAZER_1 + 1;
	PK_PIV_DU_VYKLYUCHITQ_LAZER_1 : INT := PK_PIV_DU_VYKLYUCHITQ_LAZER_0 + 1;
	PK_PIV_NEIZVESTNYJ_KOD_DU : INT := PK_PIV_DU_VYKLYUCHITQ_LAZER_1 + 1;
	PK_PIV_DU_REZHIM_ADAPTATSII : INT := PK_PIV_NEIZVESTNYJ_KOD_DU + 1;
	PK_PIV_DU_PRERVATQ_KALIBROVKU : INT := PK_PIV_DU_REZHIM_ADAPTATSII + 1;
	PK_PIV_DU_KALIBROVKA_PO_TOCHKE : INT := PK_PIV_DU_PRERVATQ_KALIBROVKU + 1;
	PK_PIV_NESPETSIFITSIROVANNOE_SOSTOYANIE_DU : INT := PK_PIV_DU_KALIBROVKA_PO_TOCHKE + 1;
	PK_PIV_DU_KONETS_RABOTY : INT := PK_PIV_NESPETSIFITSIROVANNOE_SOSTOYANIE_DU + 1;
	
	PK_PIV_TDD_GOTOV_K_RABOTE : INT := PK_PIV_DU_KONETS_RABOTY + 1;
	PK_PIV_TDD_OSHIBKA_FATALQNAYA : INT := PK_PIV_TDD_GOTOV_K_RABOTE + 1;
	PK_PIV_TDD_OSHIBKA_VNUTRENNYAYA : INT := PK_PIV_TDD_OSHIBKA_FATALQNAYA + 1;
	PK_PIV_TDD_KOD_RESTARTA : INT := PK_PIV_TDD_OSHIBKA_VNUTRENNYAYA + 1;
	PK_PIV_TDD_RESTARTY : INT := PK_PIV_TDD_KOD_RESTARTA + 1;
	PK_PIV_TDD_SNYATQ_KOEFFITSIENTY : INT := PK_PIV_TDD_RESTARTY + 1;
	PK_PIV_TDD_NACHALO_SNYATIYA_KOEFFITSIENTOV : INT := PK_PIV_TDD_SNYATQ_KOEFFITSIENTY + 1;
	PK_PIV_TDD_KONETS_SNYATIYA_KOEFFITSIENTOV : INT := PK_PIV_TDD_NACHALO_SNYATIYA_KOEFFITSIENTOV + 1;
	PK_PIV_TDD_TAJMAUT_SNYATIYA_KOEFFITSIENTOV_ISTEK : INT := PK_PIV_TDD_KONETS_SNYATIYA_KOEFFITSIENTOV + 1;
	PK_PIV_TDD_TEST_OZU : INT := PK_PIV_TDD_TAJMAUT_SNYATIYA_KOEFFITSIENTOV_ISTEK + 1;
	PK_PIV_TDD_TEST_OZU_BEZ_OSHIBOK : INT := PK_PIV_TDD_TEST_OZU + 1;
	PK_PIV_TDD_OSHIBKA_TESTA_OZU : INT := PK_PIV_TDD_TEST_OZU_BEZ_OSHIBOK + 1;
	PK_PIV_TDD_REZHIM_IZMERENIYA_MP : INT := PK_PIV_TDD_OSHIBKA_TESTA_OZU + 1;
	PK_PIV_TDD_REZHIM_IZMERENIYA_BP : INT := PK_PIV_TDD_REZHIM_IZMERENIYA_MP + 1;
	PK_PIV_TDD_POISK_DIAMETRA : INT := PK_PIV_TDD_REZHIM_IZMERENIYA_BP + 1;
	PK_PIV_TDD_DIAMETR_NE_NAJDEN : INT := PK_PIV_TDD_POISK_DIAMETRA + 1;
	PK_PIV_TDD_DIAMETR_NE_DOSTOVEREN : INT := PK_PIV_TDD_DIAMETR_NE_NAJDEN + 1;
	PK_PIV_TDD_DIAMETR_DOSTOVEREN : INT := PK_PIV_TDD_DIAMETR_NE_DOSTOVEREN + 1;
	PK_PIV_NEIZVESTNYJ_KOD_TDD : INT := PK_PIV_TDD_DIAMETR_DOSTOVEREN + 1;
	PK_PIV_NESPETSIFITSIROVANNOE_SOSTOYANIE_TDD : INT := PK_PIV_NEIZVESTNYJ_KOD_TDD + 1;
	PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_BP : INT := PK_PIV_NESPETSIFITSIROVANNOE_SOSTOYANIE_TDD + 1;
	PK_PIV_TDD_REZHIM_ATTESTATSII_BP : INT := PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_BP + 1;
	PK_PIV_TDD_TEST_BP : INT := PK_PIV_TDD_REZHIM_ATTESTATSII_BP + 1;
	PK_PIV_TDD_TEST_BP_BEZ_OSHIBOK : INT := PK_PIV_TDD_TEST_BP + 1;
	PK_PIV_TDD_OSHIBKA_TESTA_BP : INT := PK_PIV_TDD_TEST_BP_BEZ_OSHIBOK + 1;
	PK_PIV_TDD_KAMERA_BP : INT := PK_PIV_TDD_OSHIBKA_TESTA_BP + 1;
	PK_PIV_TDD_NACHALO_KALIBROVKI_BP : INT := PK_PIV_TDD_KAMERA_BP + 1;
	PK_PIV_TDD_REZHIM_KALIBROVKI_BP : INT := PK_PIV_TDD_NACHALO_KALIBROVKI_BP + 1;
	PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP : INT := PK_PIV_TDD_REZHIM_KALIBROVKI_BP + 1;
	PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_BP : INT := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP + 1;
	PK_PIV_TDD_NACHALO_KALIBROVKI_BP_PLYUS : INT := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_BP + 1;
	PK_PIV_TDD_REZHIM_KALIBROVKI_BP_PLYUS : INT := PK_PIV_TDD_NACHALO_KALIBROVKI_BP_PLYUS + 1;
	PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP_PLYUS : INT := PK_PIV_TDD_REZHIM_KALIBROVKI_BP_PLYUS + 1;
	PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_BP_PLYUS : INT := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP_PLYUS + 1;
	PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_MP : INT := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_BP_PLYUS + 1;
	PK_PIV_TDD_REZHIM_ATTESTATSII_MP : INT := PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_MP + 1;
	PK_PIV_TDD_TEST_MP : INT := PK_PIV_TDD_REZHIM_ATTESTATSII_MP + 1;
	PK_PIV_TDD_TEST_MP_BEZ_OSHIBOK : INT := PK_PIV_TDD_TEST_MP + 1;
	PK_PIV_TDD_OSHIBKA_TESTA_MP : INT := PK_PIV_TDD_TEST_MP_BEZ_OSHIBOK + 1;
	PK_PIV_TDD_KAMERA_MP : INT := PK_PIV_TDD_OSHIBKA_TESTA_MP + 1;
	PK_PIV_TDD_NACHALO_KALIBROVKI_MP : INT := PK_PIV_TDD_KAMERA_MP + 1;
	PK_PIV_TDD_REZHIM_KALIBROVKI_MP : INT := PK_PIV_TDD_NACHALO_KALIBROVKI_MP + 1;
	PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP : INT := PK_PIV_TDD_REZHIM_KALIBROVKI_MP + 1;
	PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_MP : INT := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP + 1;
	PK_PIV_TDD_NACHALO_KALIBROVKI_MP_PLYUS : INT := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_MP + 1;
	PK_PIV_TDD_REZHIM_KALIBROVKI_MP_PLYUS : INT := PK_PIV_TDD_NACHALO_KALIBROVKI_MP_PLYUS + 1;
	PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP_PLYUS : INT := PK_PIV_TDD_REZHIM_KALIBROVKI_MP_PLYUS + 1;
	PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_MP_PLYUS : INT := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP_PLYUS + 1;
	PK_PIV_TDD_KONETS_RABOTY : INT := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_MP_PLYUS + 1;
	
	PK_PIV_DTN_ZAPUSK_TESTA : INT := PK_PIV_TDD_KONETS_RABOTY + 1;
	PK_PIV_DTN_TEST_BEZ_OSHIBKI : INT := PK_PIV_DTN_ZAPUSK_TESTA + 1;
	PK_PIV_DTN_OSHIBKA_TESTA : INT := PK_PIV_DTN_TEST_BEZ_OSHIBKI + 1;
	PK_PIV_DTN_GOTOV_K_RABOTE : INT := PK_PIV_DTN_OSHIBKA_TESTA + 1;
	PK_PIV_NEIZVESTNYJ_KOD_DTN : INT := PK_PIV_DTN_GOTOV_K_RABOTE + 1;
	PK_PIV_DTN_RESTARTY : INT := PK_PIV_NEIZVESTNYJ_KOD_DTN + 1;
	PK_PIV_T_SMESHENIYA_NE_RASSCHITANA_NET_ISHODNOGO_DTN : INT := PK_PIV_DTN_RESTARTY + 1;
	PK_PIV_DTN_OSHIBKA_FATALQNAYA : INT := PK_PIV_T_SMESHENIYA_NE_RASSCHITANA_NET_ISHODNOGO_DTN + 1;
	PK_PIV_DTN_DANNYE_PO_TEMPERATURE_USTARELI : INT := PK_PIV_DTN_OSHIBKA_FATALQNAYA + 1;
	PK_PIV_DTN_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ : INT := PK_PIV_DTN_DANNYE_PO_TEMPERATURE_USTARELI + 1;
	PK_PIV_DTN_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ : INT := PK_PIV_DTN_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ + 1;
	PK_PIV_DTN_TEMPERATURA_V_NORME : INT := PK_PIV_DTN_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ + 1;
	
	PK_PIV_DTR_ZAPUSK_TESTA : INT := PK_PIV_DTN_TEMPERATURA_V_NORME + 1;
	PK_PIV_DTR_TEST_BEZ_OSHIBKI : INT := PK_PIV_DTR_ZAPUSK_TESTA + 1;
	PK_PIV_DTR_OSHIBKA_TESTA : INT := PK_PIV_DTR_TEST_BEZ_OSHIBKI + 1;
	PK_PIV_DTR_GOTOV_K_RABOTE : INT := PK_PIV_DTR_OSHIBKA_TESTA + 1;
	PK_PIV_NEIZVESTNYJ_KOD_DTR : INT := PK_PIV_DTR_GOTOV_K_RABOTE + 1;
	PK_PIV_DTR_RESTARTY : INT := PK_PIV_NEIZVESTNYJ_KOD_DTR + 1;
	PK_PIV_T_SMESHENIYA_NE_RASSCHITANA_NET_ISHODNOGO_DTR : INT := PK_PIV_DTR_RESTARTY + 1;
	PK_PIV_DTR_OSHIBKA_FATALQNAYA : INT := PK_PIV_T_SMESHENIYA_NE_RASSCHITANA_NET_ISHODNOGO_DTR + 1;
	PK_PIV_DTR_DANNYE_PO_TEMPERATURE_USTARELI : INT := PK_PIV_DTR_OSHIBKA_FATALQNAYA + 1;
	PK_PIV_DTR_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ : INT := PK_PIV_DTR_DANNYE_PO_TEMPERATURE_USTARELI + 1;
	PK_PIV_DTR_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ : INT := PK_PIV_DTR_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ + 1;
	PK_PIV_DTR_TEMPERATURA_V_NORME : INT := PK_PIV_DTR_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ + 1;
	
	PK_PIV_OTKAZ_IP2K_K1 : INT := PK_PIV_DTR_TEMPERATURA_V_NORME + 1;
	PK_PIV_IP2K_K1_GOTOV_K_RABOTE : INT := PK_PIV_OTKAZ_IP2K_K1 + 1;
	PK_PIV_VKLYUCHEN_IP2K_K1 : INT := PK_PIV_IP2K_K1_GOTOV_K_RABOTE + 1;
	PK_PIV_VYKLYUCHEN_IP2K_K1 : INT := PK_PIV_VKLYUCHEN_IP2K_K1 + 1;
	PK_PIV_IP2K_K1_RESTARTY : INT := PK_PIV_VYKLYUCHEN_IP2K_K1 + 1;
	PK_PIV_NEIZVESTNYJ_KOD_IP2K_K1 : INT := PK_PIV_IP2K_K1_RESTARTY + 1;
	
	PK_PIV_VKL_LAZER_DP : INT := PK_PIV_NEIZVESTNYJ_KOD_IP2K_K1 + 1;
	PK_PIV_DP_VYKLYUCHEN : INT := PK_PIV_VKL_LAZER_DP + 1;
	PK_PIV_LUCH_DP_DOSTIG_FOTOPRIEMNIKA : INT := PK_PIV_DP_VYKLYUCHEN + 1;
	PK_PIV_LUCH_DP_PEREKRYT_PREPYATSTVIEM : INT := PK_PIV_LUCH_DP_DOSTIG_FOTOPRIEMNIKA + 1;
	KOMANDA_N_DATCHIKI : INT := PK_PIV_LUCH_DP_PEREKRYT_PREPYATSTVIEM;
	
	PK_PIV_DK_ESTQ_KASANIE : INT := KOMANDA_N_DATCHIKI + 1;
	PK_PIV_DK_NET_KASANIYA : INT := PK_PIV_DK_ESTQ_KASANIE + 1;
	PK_PIV_DK_V_NORME : INT := PK_PIV_DK_NET_KASANIYA + 1;
	PK_PIV_OSHIBKA_DK : INT := PK_PIV_DK_V_NORME + 1;
	
	PK_PIV_KOORDINATA_KASANIYA_RASPLAVA_PRI_ZATRAVLIVANII : INT := PK_PIV_OSHIBKA_DK + 1;
	PK_PIV_KOORDINATA_NACHALA_ZATRAVLIVANIYA : INT := PK_PIV_KOORDINATA_KASANIYA_RASPLAVA_PRI_ZATRAVLIVANII + 1;
	PK_PIV_KOORDINATA_NACHALA_PEREHODA_ZATRAVKA_SHEJKA : INT := PK_PIV_KOORDINATA_NACHALA_ZATRAVLIVANIYA + 1;
	PK_PIV_KOORDINATA_NACHALA_SHEJKI : INT := PK_PIV_KOORDINATA_NACHALA_PEREHODA_ZATRAVKA_SHEJKA + 1;
	PK_PIV_KOORDINATA_NACHALA_PEREHODA_SHEJKA_KONUS : INT := PK_PIV_KOORDINATA_NACHALA_SHEJKI + 1;
	PK_PIV_KOORDINATA_NACHALA_KONUSA : INT := PK_PIV_KOORDINATA_NACHALA_PEREHODA_SHEJKA_KONUS + 1;
	PK_PIV_KOORDINATA_NACHALA_PEREHODA_KONUS_TSILINDR : INT := PK_PIV_KOORDINATA_NACHALA_KONUSA + 1;
	PK_PIV_KOORDINATA_NACHALA_STABILIZATSII_TSILINDRA : INT := PK_PIV_KOORDINATA_NACHALA_PEREHODA_KONUS_TSILINDR + 1;
	PK_PIV_KOORDINATA_NACHALA_TSILINDRA : INT := PK_PIV_KOORDINATA_NACHALA_STABILIZATSII_TSILINDRA + 1;
	PK_PIV_KOORDINATA_NACHALA_PEREHODA_TSILINDR_OBR_KONUS : INT := PK_PIV_KOORDINATA_NACHALA_TSILINDRA + 1;
	PK_PIV_KOORDINATA_NACHALA_OBR_KONUSA : INT := PK_PIV_KOORDINATA_NACHALA_PEREHODA_TSILINDR_OBR_KONUS + 1;
	PK_PIV_KOORDINATA_NACHALA_TEK_CHASTI : INT := PK_PIV_KOORDINATA_NACHALA_OBR_KONUSA + 1;
	PK_PIV_KOORDINATA_OTRYVA_MONOKRISTALLA : INT := PK_PIV_KOORDINATA_NACHALA_TEK_CHASTI + 1;
	
	PK_PIV_RA_T2_ISTEKLO_P2_NE_DOSTIGNUTO : INT := PK_PIV_KOORDINATA_OTRYVA_MONOKRISTALLA + 1;
	PK_PIV_RA_T5_ISTEKLO_P2_NE_DOSTIGNUTO : INT := PK_PIV_RA_T2_ISTEKLO_P2_NE_DOSTIGNUTO + 1;
	PK_PIV_RA_GERMETICHNOSTQ_USTANOVKI_V_NORME : INT := PK_PIV_RA_T5_ISTEKLO_P2_NE_DOSTIGNUTO + 1;
	PK_PIV_RA_USTANOVKA_NEGERMETICHNA : INT := PK_PIV_RA_GERMETICHNOSTQ_USTANOVKI_V_NORME + 1;
	PK_PIV_RA_VELICHINA_NATEKANIYA : INT := PK_PIV_RA_USTANOVKA_NEGERMETICHNA + 1;
	PK_PIV_RA_T7_ISTEKLO_P2_NE_DOSTIGNUTO : INT := PK_PIV_RA_VELICHINA_NATEKANIYA + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_PLAVLENIE_ZAGRUZKI : INT := PK_PIV_RA_T7_ISTEKLO_P2_NE_DOSTIGNUTO + 1;
	PK_PIV_RA_POYAVILSYA_RASPLAV : INT := PK_PIV_RA_ZAPUSTITQ_TP_PLAVLENIE_ZAGRUZKI + 1;
	PK_PIV_RA_ZAGRUZKA_V_OSNOVNOM_RASPLAVLENA : INT := PK_PIV_RA_POYAVILSYA_RASPLAV + 1;
	PK_PIV_RA_STAB_RASPLAVA_ZAVERSHENA : INT := PK_PIV_RA_ZAGRUZKA_V_OSNOVNOM_RASPLAVLENA + 1;
	PK_PIV_RA_VREMYA_NA_STAB_RASPLAVA_ISTEKLO : INT := PK_PIV_RA_STAB_RASPLAVA_ZAVERSHENA + 1;
	PK_PIV_RA_STAB_RASPLAVA_OTKAZ_DTN_POPRAVKA_TN_NEOPREDELENA : INT := PK_PIV_RA_VREMYA_NA_STAB_RASPLAVA_ISTEKLO + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_PROGREV_ZATRAVKI : INT := PK_PIV_RA_STAB_RASPLAVA_OTKAZ_DTN_POPRAVKA_TN_NEOPREDELENA + 1;
	PK_PIV_RA_KOORDINATA_NACHALA_SHEJKI : INT := PK_PIV_RA_ZAPUSTITQ_TP_PROGREV_ZATRAVKI + 1;
	PK_PIV_RA_RASPLAV_NE_OBNARUZHEN : INT := PK_PIV_RA_KOORDINATA_NACHALA_SHEJKI + 1;
	PK_PIV_RA_KOORDINATA_KASANIYA : INT := PK_PIV_RA_RASPLAV_NE_OBNARUZHEN + 1;
	PK_PIV_RA_ESTQ_KASANIE : INT := PK_PIV_RA_KOORDINATA_KASANIYA + 1;
	PK_PIV_RA_PRI_PLAVL_ZATR_DIAMETR_V_ZAD_DIAPAZONE_NE_OBNARUZHEN : INT := PK_PIV_RA_ESTQ_KASANIE + 1;
	PK_PIV_RA_DENDRITY__TREBUETSYA_VMESHATELQSTVO_OPERATORA : INT := PK_PIV_RA_PRI_PLAVL_ZATR_DIAMETR_V_ZAD_DIAPAZONE_NE_OBNARUZHEN + 1;
	PK_PIV_RA_OTSUTSTVIE_KONTAKTA_KRISTALL_RASPLAV : INT := PK_PIV_RA_DENDRITY__TREBUETSYA_VMESHATELQSTVO_OPERATORA + 1;
	PK_PIV_RA_ESTQ_KONTAKT_KRISTALL_RASPLAV : INT := PK_PIV_RA_OTSUTSTVIE_KONTAKTA_KRISTALL_RASPLAV + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_ZATRAVKA_SHEJKA : INT := PK_PIV_RA_ESTQ_KONTAKT_KRISTALL_RASPLAV + 1;
	PK_PIV_RA_SHEJKA_POPRAVKA_DTN : INT := PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_ZATRAVKA_SHEJKA + 1;
	PK_PIV_RA_VKLYUCHEN_BEZOPASNYJ_REZHIM_VYRASHIVANIYA_SHEJKI : INT := PK_PIV_RA_SHEJKA_POPRAVKA_DTN + 1;
	PK_PIV_RA_VYKLYUCHEN_BEZOPASNYJ_REZHIM_VYRASHIVANIYA_SHEJKI : INT := PK_PIV_RA_VKLYUCHEN_BEZOPASNYJ_REZHIM_VYRASHIVANIYA_SHEJKI + 1;
	PK_PIV_RA_DIAMETR_KRISTALLA_MENQSHE_BEZOPASNOGO : INT := PK_PIV_RA_VYKLYUCHEN_BEZOPASNYJ_REZHIM_VYRASHIVANIYA_SHEJKI + 1;
	PK_PIV_RA_SHEJKA_NE_UTONCHAETSYA : INT := PK_PIV_RA_DIAMETR_KRISTALLA_MENQSHE_BEZOPASNOGO + 1;
	PK_PIV_RA_KACHESTVENNAYA_SHEJKA_NE_RASTET : INT := PK_PIV_RA_SHEJKA_NE_UTONCHAETSYA + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_SHEJKA_KONUS : INT := PK_PIV_RA_KACHESTVENNAYA_SHEJKA_NE_RASTET + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_KONUSA : INT := PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_SHEJKA_KONUS + 1;
	PK_PIV_RA_KOORDINATA_NACHALA_KONUSA : INT := PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_KONUSA + 1;
	PK_PIV_RA_KONUS_POPRAVKA_DTN : INT := PK_PIV_RA_KOORDINATA_NACHALA_KONUSA + 1;
	PK_PIV_RA_PREDUPR__FORM_PEREHODA_K_TS_ZA_ZAD_VREMYA_NEVOZMOZHNO : INT := PK_PIV_RA_KONUS_POPRAVKA_DTN + 1;
	PK_PIV_RA_KOORDINATA_NACHALA_TSILINDRA : INT := PK_PIV_RA_PREDUPR__FORM_PEREHODA_K_TS_ZA_ZAD_VREMYA_NEVOZMOZHNO + 1;
	PK_PIV_RA_OGRANICHENIE_PO_MASSE_TSIL_PEREHOD_NA_OBR_KONUS : INT := PK_PIV_RA_KOORDINATA_NACHALA_TSILINDRA + 1;
	PK_PIV_RA_OGRANICHENIE_PO_DLINE_TSIL_PEREHOD_NA_OBR_KONUS : INT := PK_PIV_RA_OGRANICHENIE_PO_MASSE_TSIL_PEREHOD_NA_OBR_KONUS + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_TSILINDRA : INT := PK_PIV_RA_OGRANICHENIE_PO_DLINE_TSIL_PEREHOD_NA_OBR_KONUS + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_TSILINDR_OBR_KONUS : INT := PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_TSILINDRA + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_OBRATNOGO_KONUSA : INT := PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_TSILINDR_OBR_KONUS + 1;
	PK_PIV_RA_KOORDINATA_NACHALA_OBRATNOGO_KONUSA : INT := PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_OBRATNOGO_KONUSA + 1;
	PK_PIV_RA_NET_OTRYVA_KRISTALLA : INT := PK_PIV_RA_KOORDINATA_NACHALA_OBRATNOGO_KONUSA + 1;
	PK_PIV_RA_ZAPUSTITQ_TP_OHLAZHDENIE_KRISTALLA : INT := PK_PIV_RA_NET_OTRYVA_KRISTALLA + 1;
	PK_PIV_RA_PREKRATITQ_OTRABOTKU_TP : INT := PK_PIV_RA_ZAPUSTITQ_TP_OHLAZHDENIE_KRISTALLA + 1;
	PK_PIV_KOMANDA_PROIGNORIROVANA__IDET_ISPOLNENIE_ETAPA_RA : INT := PK_PIV_RA_PREKRATITQ_OTRABOTKU_TP + 1;
	PK_PIV_ZAFIKSIROVANA_OSHIBKA_RA : INT := PK_PIV_KOMANDA_PROIGNORIROVANA__IDET_ISPOLNENIE_ETAPA_RA + 1;
	
	PK_PIV_USTANOVITQ_ZATRAVKU_V_KVP : INT := PK_PIV_ZAFIKSIROVANA_OSHIBKA_RA + 1;
	PK_PIV_USTANOVITQ_TIGELQ_V_KNP : INT := PK_PIV_USTANOVITQ_ZATRAVKU_V_KVP + 1;
	PK_PIV_ZAKRYTQ_VE5_VE6_VE8 : INT := PK_PIV_USTANOVITQ_TIGELQ_V_KNP + 1;
	PK_PIV_OTKRYTQ_BPK : INT := PK_PIV_ZAKRYTQ_VE5_VE6_VE8 + 1;
	PK_PIV_ZAKRYTQ_BPK : INT := PK_PIV_OTKRYTQ_BPK + 1;
	PK_PIV_ZAKRYTQ_VE9 : INT := PK_PIV_ZAKRYTQ_BPK + 1;
	PK_PIV_OTKRYTQ_VE9 : INT := PK_PIV_ZAKRYTQ_VE9 + 1;
	PK_PIV_ZAKRYTQ_VE12 : INT := PK_PIV_OTKRYTQ_VE9 + 1;
	PK_PIV_OTKRYTQ_VE12 : INT := PK_PIV_ZAKRYTQ_VE12 + 1;
	PK_PIV_VKLYUCHITQ_REG_D : INT := PK_PIV_OTKRYTQ_VE12 + 1;
	PK_PIV_VKLYUCHITQ_REG_RG : INT := PK_PIV_VKLYUCHITQ_REG_D + 1;
	PK_PIV_VYKLYUCHITQ_REG_RG : INT := PK_PIV_VKLYUCHITQ_REG_RG + 1;
	PK_PIV_VYKLYUCHITQ_NAGREVATELQ : INT := PK_PIV_VYKLYUCHITQ_REG_RG + 1;
	PK_PIV_VKLYUCHITQ_NAGREVATELQ : INT := PK_PIV_VYKLYUCHITQ_NAGREVATELQ + 1;
	PK_PIV_VKLYUCHITQ_REG_TN : INT := PK_PIV_VKLYUCHITQ_NAGREVATELQ + 1;
	PK_PIV_VKLYUCHITQ_REG_UR : INT := PK_PIV_VKLYUCHITQ_REG_TN + 1;
	PK_PIV_VYKLYUCHITQ_REG_UR : INT := PK_PIV_VKLYUCHITQ_REG_UR + 1;
	PK_PIV_USTANOVITQ_ZATRAVKU_V_P_PROGREVA : INT := PK_PIV_VYKLYUCHITQ_REG_UR + 1;
	PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA : INT := PK_PIV_USTANOVITQ_ZATRAVKU_V_P_PROGREVA + 1;
	PK_PIV_SOZDATQ_ATMOSFERNOE_V_NK : INT := PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA + 1;
	PK_PIV_SOZDATQ_VAKUUM_V_NK : INT := PK_PIV_SOZDATQ_ATMOSFERNOE_V_NK + 1;
	PK_PIV_VYKLYUCHITQ_NASOSY : INT := PK_PIV_SOZDATQ_VAKUUM_V_NK + 1;
	PK_PIV_VKLYUCHITQ_NASOSY : INT := PK_PIV_VYKLYUCHITQ_NASOSY + 1;
	
	PK_PIV_NORMALQNYJ_KONETS_TP : INT := PK_PIV_VKLYUCHITQ_NASOSY + 1;
	PK_PIV_KONETS_TP_PO_OSHIBKE : INT := PK_PIV_NORMALQNYJ_KONETS_TP + 1;
	
	PK_VPO_VKL_VPO : INT := 1;
	PK_VPO_VYK_VPO : INT := PK_VPO_VKL_VPO + 1;
	PK_VPO_VKL_REG_TN : INT := PK_VPO_VYK_VPO + 1;
	PK_VPO_VYK_REG_TN : INT := PK_VPO_VKL_REG_TN + 1;
	PK_VPO_ZAT_RS : INT := PK_VPO_VYK_REG_TN + 1;
	PK_VPO_ZAT_US : INT := PK_VPO_ZAT_RS + 1;
	PK_VPO_VYK_REG_Vz : INT := PK_VPO_ZAT_US + 1;
	PK_VPO_TIG_RS : INT := PK_VPO_VYK_REG_Vz + 1;
	PK_VPO_TIG_US : INT := PK_VPO_TIG_RS + 1;
	PK_VPO_VYK_REG_Vt : INT := PK_VPO_TIG_US + 1;
	PK_VPO_ZAT_VR : INT := PK_VPO_VYK_REG_Vt + 1;
	PK_VPO_VYK_ZAT_VR : INT := PK_VPO_ZAT_VR + 1;
	PK_VPO_TIG_VR : INT := PK_VPO_VYK_ZAT_VR + 1;
	PK_VPO_VYK_TIG_VR : INT := PK_VPO_TIG_VR + 1;
	PK_VPO_INITSIALIZATSIYA : INT := PK_VPO_VYK_TIG_VR + 1;
	PK_VPO_IZMN_ZD_Tn : INT := PK_VPO_INITSIALIZATSIYA + 1;
	PK_VPO_IZMN_ZD_VzR : INT := PK_VPO_IZMN_ZD_Tn + 1;
	PK_VPO_IZMN_ZD_VtR : INT := PK_VPO_IZMN_ZD_VzR + 1;
	PK_VPO_IZMN_ZD_VzU : INT := PK_VPO_IZMN_ZD_VtR + 1;
	PK_VPO_IZMN_ZD_VtU : INT := PK_VPO_IZMN_ZD_VzU + 1;
	PK_VPO_IZMN_ZD_Wt : INT := PK_VPO_IZMN_ZD_VtU + 1;
	PK_VPO_IZMN_ZD_Wz : INT := PK_VPO_IZMN_ZD_Wt + 1;
	PK_VPO_IZMN_FP_Dkr : INT := PK_VPO_IZMN_ZD_Wz + 1;
	
	NOMER_KANALA_TSAP_ZD_Iptd : INT := 0;
	NOMER_KANALA_ATSP_REZERV21 : INT := NOMER_KANALA_TSAP_ZD_Iptd + 1;
	NOMER_KANALA_ATSP_FP_Iptd : INT := NOMER_KANALA_ATSP_REZERV21 + 1;
	NOMER_KANALA_ATSP_FP_Uptd : INT := NOMER_KANALA_ATSP_FP_Iptd + 1;
	NOMER_KANALA_ATSP_FP_Qgaza : INT := NOMER_KANALA_ATSP_FP_Uptd + 1;
	NOMER_KANALA_ATSP_REZERV5 : INT := NOMER_KANALA_ATSP_FP_Qgaza + 1;
	NOMER_KANALA_ATSP_VK_0_1 : INT := NOMER_KANALA_ATSP_REZERV5 + 1;
	NOMER_KANALA_ATSP_NK_0_45 : INT := NOMER_KANALA_ATSP_VK_0_1 + 1;
	NOMER_KANALA_ATSP_FP_Ravd1 : INT := NOMER_KANALA_ATSP_NK_0_45 + 1;
	NOMER_KANALA_ATSP_FP_Ravd2 : INT := NOMER_KANALA_ATSP_FP_Ravd1 + 1;
	NOMER_KANALA_ATSP_Rvk : INT := NOMER_KANALA_ATSP_FP_Ravd2 + 1;
	NOMER_KANALA_ATSP_PokazaniyaDatchikaVesa : INT := NOMER_KANALA_ATSP_Rvk + 1;
	NOMER_KANALA_ATSP_Tvk1 : INT := NOMER_KANALA_ATSP_PokazaniyaDatchikaVesa + 1;
	NOMER_KANALA_ATSP_Tvk2 : INT := NOMER_KANALA_ATSP_Tvk1 + 1;
	NOMER_KANALA_ATSP_Tvk3 : INT := NOMER_KANALA_ATSP_Tvk2 + 1;
	NOMER_KANALA_ATSP_Tvk4 : INT := NOMER_KANALA_ATSP_Tvk3 + 1;
	NOMER_KANALA_ATSP_Tvk5 : INT := NOMER_KANALA_ATSP_Tvk4 + 1;
	NOMER_KANALA_ATSP_Tvk6 : INT := NOMER_KANALA_ATSP_Tvk5 + 1;
	NOMER_KANALA_ATSP_Tvk7 : INT := NOMER_KANALA_ATSP_Tvk6 + 1;
	NOMER_KANALA_ATSP_Tvk8 : INT := NOMER_KANALA_ATSP_Tvk7 + 1;
	NOMER_KANALA_TSAP_ZD_Qgaza : INT := NOMER_KANALA_ATSP_Tvk8 + 1;
	NOMER_KANALA_ATSP_REZERV23 : INT := NOMER_KANALA_TSAP_ZD_Qgaza + 1;
	NOMER_KANALA_ATSP_Udk : INT := NOMER_KANALA_ATSP_REZERV23 + 1;
	
	KOORD_ZAT_NEOPREDELENA : INT := 0;
	ZAT_VYSHE_KVP : INT := KOORD_ZAT_NEOPREDELENA + 1;
	ZAT_V_KVP : INT := ZAT_VYSHE_KVP + 1;
	ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA : INT := ZAT_V_KVP + 1;
	ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP : INT := ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA + 1;
	ZAT_V_POLOZHENII_PRIVYAZKI : INT := ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP + 1;
	ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI : INT := ZAT_V_POLOZHENII_PRIVYAZKI + 1;
	ZAT_V_POLOZHENII_PROGREVA : INT := ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI + 1;
	ZAT_NIZHE_POLOZHENIYA_PROGREVA : INT := ZAT_V_POLOZHENII_PROGREVA + 1;
	ZAT_V_KNP : INT := ZAT_NIZHE_POLOZHENIYA_PROGREVA + 1;
	ZAT_NIZHE_KNP : INT := ZAT_V_KNP + 1;
	
	KOORD_TIG_NEOPREDELENA : INT := 0;
	TIG_V_KVP : INT := KOORD_TIG_NEOPREDELENA + 1;
	TIG_VYSHE_POLOZHENIYA_PZUR : INT := TIG_V_KVP + 1;
	TIG_V_POLOZHENII_PZUR : INT := TIG_VYSHE_POLOZHENIYA_PZUR + 1;
	TIG_NIZHE_POLOZHENIYA_PZUR : INT := TIG_V_POLOZHENII_PZUR + 1;
	TIG_V_KNP : INT := TIG_NIZHE_POLOZHENIYA_PZUR + 1;
	
	PK_ZR_INITSIALIZATSIYA : INT := 1;
	PK_ZR_GOTOV_K_RABOTE : INT := PK_ZR_INITSIALIZATSIYA + 1;
	PK_ZR_OTKAZ_DVIGATELYA : INT := PK_ZR_GOTOV_K_RABOTE + 1;
	PK_ZR_OTKAZ_DATCHIKA : INT := PK_ZR_OTKAZ_DVIGATELYA + 1;
	PK_ZR_NAEZD_NA_KVP : INT := PK_ZR_OTKAZ_DATCHIKA + 1;
	PK_ZR_NAEZD_NA_KNP : INT := PK_ZR_NAEZD_NA_KVP + 1;
	PK_ZR_SQEZD_S_DKP : INT := PK_ZR_NAEZD_NA_KNP + 1;
	PK_ZR_NACHALO_DVIZHENIYA_V : INT := PK_ZR_SQEZD_S_DKP + 1;
	PK_ZR_NACHALO_DVIZHENIYA_X : INT := PK_ZR_NACHALO_DVIZHENIYA_V + 1;
	PK_ZR_OSTANOV_DVIZHENIYA : INT := PK_ZR_NACHALO_DVIZHENIYA_X + 1;
	PK_ZR_IZMN_ZD_V : INT := PK_ZR_OSTANOV_DVIZHENIYA + 1;
	PK_ZR_IZMN_ZD_X : INT := PK_ZR_IZMN_ZD_V + 1;
	PK_ZR_IZMN_NP_NOMINAL_KOEF_V : INT := PK_ZR_IZMN_ZD_X + 1;
	PK_ZR_IZMN_NP_NOMINAL_KOEF_X : INT := PK_ZR_IZMN_NP_NOMINAL_KOEF_V + 1;
	PK_ZR_IZMN_NP_KOEF_V : INT := PK_ZR_IZMN_NP_NOMINAL_KOEF_X + 1;
	PK_ZR_IZMN_NP_KOEF_X : INT := PK_ZR_IZMN_NP_KOEF_V + 1;
	PK_ZR_IZMN_NP_RAB_USK : INT := PK_ZR_IZMN_NP_KOEF_X + 1;
	PK_ZR_IZMN_NP_KOEF_A : INT := PK_ZR_IZMN_NP_RAB_USK + 1;
	PK_ZR_IZMN_NP_AVR_TOR : INT := PK_ZR_IZMN_NP_KOEF_A + 1;
	
	PK_ZU_INITSIALIZATSIYA : INT := 1;
	PK_ZU_GOTOV_K_RABOTE : INT := PK_ZU_INITSIALIZATSIYA + 1;
	PK_ZU_OTKAZ_DVIGATELYA : INT := PK_ZU_GOTOV_K_RABOTE + 1;
	PK_ZU_OTKAZ_DATCHIKA : INT := PK_ZU_OTKAZ_DVIGATELYA + 1;
	PK_ZU_NAEZD_NA_KVP : INT := PK_ZU_OTKAZ_DATCHIKA + 1;
	PK_ZU_NAEZD_NA_KNP : INT := PK_ZU_NAEZD_NA_KVP + 1;
	PK_ZU_SQEZD_S_DKP : INT := PK_ZU_NAEZD_NA_KNP + 1;
	PK_ZU_NACHALO_DVIZHENIYA_V : INT := PK_ZU_SQEZD_S_DKP + 1;
	PK_ZU_NACHALO_DVIZHENIYA_X : INT := PK_ZU_NACHALO_DVIZHENIYA_V + 1;
	PK_ZU_OSTANOV_DVIZHENIYA : INT := PK_ZU_NACHALO_DVIZHENIYA_X + 1;
	PK_ZU_IZMN_ZD_V : INT := PK_ZU_OSTANOV_DVIZHENIYA + 1;
	PK_ZU_IZMN_ZD_X : INT := PK_ZU_IZMN_ZD_V + 1;
	PK_ZU_IZMN_NP_KOEF_V : INT := PK_ZU_IZMN_ZD_X + 1;
	PK_ZU_IZMN_NP_KOEF_X : INT := PK_ZU_IZMN_NP_KOEF_V + 1;
	PK_ZU_IZMN_NP_RAB_USK : INT := PK_ZU_IZMN_NP_KOEF_X + 1;
	PK_ZU_IZMN_NP_KOEF_A : INT := PK_ZU_IZMN_NP_RAB_USK + 1;
	PK_ZU_IZMN_NP_AVR_TOR : INT := PK_ZU_IZMN_NP_KOEF_A + 1;
	PK_ZU_IZMN_NP_NOMINAL_KOEF_V : INT := PK_ZU_IZMN_NP_AVR_TOR + 1;
	PK_ZU_IZMN_NP_NOMINAL_KOEF_X : INT := PK_ZU_IZMN_NP_NOMINAL_KOEF_V + 1;
	PK_ZU_DVIZHENIE_PO_NOMINALQNYM_KOEFFITSIENTAM : INT := PK_ZU_IZMN_NP_NOMINAL_KOEF_X + 1;
	PK_ZU_INITSIALIZIROVATQ_KOORDINATU : INT := PK_ZU_DVIZHENIE_PO_NOMINALQNYM_KOEFFITSIENTAM + 1;
	
	PK_ZV_INITSIALIZATSIYA : INT := 1;
	PK_ZV_GOTOV_K_RABOTE : INT := PK_ZV_INITSIALIZATSIYA + 1;
	PK_ZV_OTKAZ_DVIGATELYA : INT := PK_ZV_GOTOV_K_RABOTE + 1;
	PK_ZV_OTKAZ_DATCHIKA : INT := PK_ZV_OTKAZ_DVIGATELYA + 1;
	PK_ZV_NAEZD_NA_KVP : INT := PK_ZV_OTKAZ_DATCHIKA + 1;
	PK_ZV_NAEZD_NA_KNP : INT := PK_ZV_NAEZD_NA_KVP + 1;
	PK_ZV_SQEZD_S_DKP : INT := PK_ZV_NAEZD_NA_KNP + 1;
	PK_ZV_NACHALO_DVIZHENIYA_V : INT := PK_ZV_SQEZD_S_DKP + 1;
	PK_ZV_NACHALO_DVIZHENIYA_X : INT := PK_ZV_NACHALO_DVIZHENIYA_V + 1;
	PK_ZV_OSTANOV_DVIZHENIYA : INT := PK_ZV_NACHALO_DVIZHENIYA_X + 1;
	PK_ZV_IZMN_ZD_V : INT := PK_ZV_OSTANOV_DVIZHENIYA + 1;
	PK_ZV_IZMN_ZD_X : INT := PK_ZV_IZMN_ZD_V + 1;
	PK_ZV_IZMN_NP_KOEF_V : INT := PK_ZV_IZMN_ZD_X + 1;
	PK_ZV_IZMN_NP_KOEF_X : INT := PK_ZV_IZMN_NP_KOEF_V + 1;
	PK_ZV_IZMN_NP_RAB_USK : INT := PK_ZV_IZMN_NP_KOEF_X + 1;
	PK_ZV_IZMN_NP_KOEF_A : INT := PK_ZV_IZMN_NP_RAB_USK + 1;
	PK_ZV_IZMN_NP_AVR_TOR : INT := PK_ZV_IZMN_NP_KOEF_A + 1;
	
	PK_TR_INITSIALIZATSIYA : INT := 1;
	PK_TR_GOTOV_K_RABOTE : INT := PK_TR_INITSIALIZATSIYA + 1;
	PK_TR_OTKAZ_DVIGATELYA : INT := PK_TR_GOTOV_K_RABOTE + 1;
	PK_TR_OTKAZ_DATCHIKA : INT := PK_TR_OTKAZ_DVIGATELYA + 1;
	PK_TR_NAEZD_NA_KVP : INT := PK_TR_OTKAZ_DATCHIKA + 1;
	PK_TR_NAEZD_NA_KNP : INT := PK_TR_NAEZD_NA_KVP + 1;
	PK_TR_SQEZD_S_DKP : INT := PK_TR_NAEZD_NA_KNP + 1;
	PK_TR_NACHALO_DVIZHENIYA_V : INT := PK_TR_SQEZD_S_DKP + 1;
	PK_TR_NACHALO_DVIZHENIYA_X : INT := PK_TR_NACHALO_DVIZHENIYA_V + 1;
	PK_TR_OSTANOV_DVIZHENIYA : INT := PK_TR_NACHALO_DVIZHENIYA_X + 1;
	PK_TR_IZMN_ZD_V : INT := PK_TR_OSTANOV_DVIZHENIYA + 1;
	PK_TR_IZMN_ZD_X : INT := PK_TR_IZMN_ZD_V + 1;
	PK_TR_IZMN_NP_KOEF_V : INT := PK_TR_IZMN_ZD_X + 1;
	PK_TR_IZMN_NP_KOEF_X : INT := PK_TR_IZMN_NP_KOEF_V + 1;
	PK_TR_IZMN_NP_RAB_USK : INT := PK_TR_IZMN_NP_KOEF_X + 1;
	PK_TR_IZMN_NP_KOEF_A : INT := PK_TR_IZMN_NP_RAB_USK + 1;
	PK_TR_IZMN_NP_AVR_TOR : INT := PK_TR_IZMN_NP_KOEF_A + 1;
	
	PK_TU_INITSIALIZATSIYA : INT := 1;
	PK_TU_GOTOV_K_RABOTE : INT := PK_TU_INITSIALIZATSIYA + 1;
	PK_TU_OTKAZ_DVIGATELYA : INT := PK_TU_GOTOV_K_RABOTE + 1;
	PK_TU_OTKAZ_DATCHIKA : INT := PK_TU_OTKAZ_DVIGATELYA + 1;
	PK_TU_NAEZD_NA_KVP : INT := PK_TU_OTKAZ_DATCHIKA + 1;
	PK_TU_NAEZD_NA_KNP : INT := PK_TU_NAEZD_NA_KVP + 1;
	PK_TU_SQEZD_S_DKP : INT := PK_TU_NAEZD_NA_KNP + 1;
	PK_TU_NACHALO_DVIZHENIYA_V : INT := PK_TU_SQEZD_S_DKP + 1;
	PK_TU_NACHALO_DVIZHENIYA_X : INT := PK_TU_NACHALO_DVIZHENIYA_V + 1;
	PK_TU_OSTANOV_DVIZHENIYA : INT := PK_TU_NACHALO_DVIZHENIYA_X + 1;
	PK_TU_IZMN_ZD_V : INT := PK_TU_OSTANOV_DVIZHENIYA + 1;
	PK_TU_IZMN_ZD_X : INT := PK_TU_IZMN_ZD_V + 1;
	PK_TU_IZMN_NP_KOEF_V : INT := PK_TU_IZMN_ZD_X + 1;
	PK_TU_IZMN_NP_KOEF_X : INT := PK_TU_IZMN_NP_KOEF_V + 1;
	PK_TU_IZMN_NP_RAB_USK : INT := PK_TU_IZMN_NP_KOEF_X + 1;
	PK_TU_IZMN_NP_KOEF_A : INT := PK_TU_IZMN_NP_RAB_USK + 1;
	PK_TU_IZMN_NP_AVR_TOR : INT := PK_TU_IZMN_NP_KOEF_A + 1;
	PK_TU_INITSIALIZIROVATQ_KOORDINATU : INT := PK_TU_IZMN_NP_AVR_TOR + 1;
	
	PK_TV_INITSIALIZATSIYA : INT := 1;
	PK_TV_GOTOV_K_RABOTE : INT := PK_TV_INITSIALIZATSIYA + 1;
	PK_TV_OTKAZ_DVIGATELYA : INT := PK_TV_GOTOV_K_RABOTE + 1;
	PK_TV_OTKAZ_DATCHIKA : INT := PK_TV_OTKAZ_DVIGATELYA + 1;
	PK_TV_NAEZD_NA_KVP : INT := PK_TV_OTKAZ_DATCHIKA + 1;
	PK_TV_NAEZD_NA_KNP : INT := PK_TV_NAEZD_NA_KVP + 1;
	PK_TV_SQEZD_S_DKP : INT := PK_TV_NAEZD_NA_KNP + 1;
	PK_TV_NACHALO_DVIZHENIYA_V : INT := PK_TV_SQEZD_S_DKP + 1;
	PK_TV_NACHALO_DVIZHENIYA_X : INT := PK_TV_NACHALO_DVIZHENIYA_V + 1;
	PK_TV_OSTANOV_DVIZHENIYA : INT := PK_TV_NACHALO_DVIZHENIYA_X + 1;
	PK_TV_IZMN_ZD_V : INT := PK_TV_OSTANOV_DVIZHENIYA + 1;
	PK_TV_IZMN_ZD_X : INT := PK_TV_IZMN_ZD_V + 1;
	PK_TV_IZMN_NP_KOEF_V : INT := PK_TV_IZMN_ZD_X + 1;
	PK_TV_IZMN_NP_KOEF_X : INT := PK_TV_IZMN_NP_KOEF_V + 1;
	PK_TV_IZMN_NP_RAB_USK : INT := PK_TV_IZMN_NP_KOEF_X + 1;
	PK_TV_IZMN_NP_KOEF_A : INT := PK_TV_IZMN_NP_RAB_USK + 1;
	PK_TV_IZMN_NP_AVR_TOR : INT := PK_TV_IZMN_NP_KOEF_A + 1;
	
	PK_DU_INITSIALIZATSIYA : INT := 1;
	PK_DU_GOTOV_K_RABOTE : INT := PK_DU_INITSIALIZATSIYA + 1;
	PK_DU_UROVENQ_DOSTOVEREN : INT := PK_DU_GOTOV_K_RABOTE + 1;
	PK_DU_UROVENQ_NE_DOSTOVEREN : INT := PK_DU_UROVENQ_DOSTOVEREN + 1;
	PK_DU_NACHALO_ADAPTATSII_LAZERA_0 : INT := PK_DU_UROVENQ_NE_DOSTOVEREN + 1;
	PK_DU_ADAPTATSIYA_LAZERA_0_USPESHNA : INT := PK_DU_NACHALO_ADAPTATSII_LAZERA_0 + 1;
	PK_DU_ADAPTATSIYA_LAZERA_0_NE_USPESHNA : INT := PK_DU_ADAPTATSIYA_LAZERA_0_USPESHNA + 1;
	PK_DU_NACHALO_ADAPTATSII_LAZERA_1 : INT := PK_DU_ADAPTATSIYA_LAZERA_0_NE_USPESHNA + 1;
	PK_DU_ADAPTATSIYA_LAZERA_1_USPESHNA : INT := PK_DU_NACHALO_ADAPTATSII_LAZERA_1 + 1;
	PK_DU_ADAPTATSIYA_LAZERA_1_NE_USPESHNA : INT := PK_DU_ADAPTATSIYA_LAZERA_1_USPESHNA + 1;
	PK_DU_PRERVATQ_ADARPTATSIYU : INT := PK_DU_ADAPTATSIYA_LAZERA_1_NE_USPESHNA + 1;
	PK_DU_VKL_VYCHISLENIE_TEMNOVOGO_SIGNALA : INT := PK_DU_PRERVATQ_ADARPTATSIYU + 1;
	PK_DU_VYK_VYCHISLENIE_TEMNOVOGO_SIGNALA : INT := PK_DU_VKL_VYCHISLENIE_TEMNOVOGO_SIGNALA + 1;
	PK_DU_NACHALO_KALIBROVKI : INT := PK_DU_VYK_VYCHISLENIE_TEMNOVOGO_SIGNALA + 1;
	PK_DU_KALIBROVKA_VYPOLNYAETSYA : INT := PK_DU_NACHALO_KALIBROVKI + 1;
	PK_DU_KONETS_KALIBROVKI_PO_TOCHKE : INT := PK_DU_KALIBROVKA_VYPOLNYAETSYA + 1;
	PK_DU_KALIBROVKA_PO_TOCHKE : INT := PK_DU_KONETS_KALIBROVKI_PO_TOCHKE + 1;
	PK_DU_KALIBROVKA_ZAVERSHENA_USPESHNO : INT := PK_DU_KALIBROVKA_PO_TOCHKE + 1;
	PK_DU_PRERVATQ_KALIBROVKU : INT := PK_DU_KALIBROVKA_ZAVERSHENA_USPESHNO + 1;
	PK_DU_REZHIM_IZMERENIYA : INT := PK_DU_PRERVATQ_KALIBROVKU + 1;
	PK_DU_KOD_RESTARTA : INT := PK_DU_REZHIM_IZMERENIYA + 1;
	PK_DU_NACHALO_REZHIMA_OTLADKI : INT := PK_DU_KOD_RESTARTA + 1;
	PK_DU_KONETS_REZHIMA_OTLADKI : INT := PK_DU_NACHALO_REZHIMA_OTLADKI + 1;
	PK_DU_VKLYUCHITQ_LAZER_0 : INT := PK_DU_KONETS_REZHIMA_OTLADKI + 1;
	PK_DU_VKLYUCHITQ_LAZER_1 : INT := PK_DU_VKLYUCHITQ_LAZER_0 + 1;
	PK_DU_VYKLYUCHITQ_LAZER_0 : INT := PK_DU_VKLYUCHITQ_LAZER_1 + 1;
	PK_DU_VYKLYUCHITQ_LAZER_1 : INT := PK_DU_VYKLYUCHITQ_LAZER_0 + 1;
	PK_DU_REZHIM_ADAPTATSII : INT := PK_DU_VYKLYUCHITQ_LAZER_1 + 1;
	PK_DU_IZMN_NP_THRESH : INT := PK_DU_REZHIM_ADAPTATSII + 1;
	PK_DU_IZMN_NP_DRELQ : INT := PK_DU_IZMN_NP_THRESH + 1;
	PK_DU_IZMN_NP_THRETH_GIST : INT := PK_DU_IZMN_NP_DRELQ + 1;
	PK_DU_IZMN_NP_RELATIV_QUALITY : INT := PK_DU_IZMN_NP_THRETH_GIST + 1;
	PK_DU_IZMN_NP_AH_NACHALO_PEREDACHI : INT := PK_DU_IZMN_NP_RELATIV_QUALITY + 1;
	PK_DU_IZMN_NP_BH : INT := PK_DU_IZMN_NP_AH_NACHALO_PEREDACHI + 1;
	PK_DU_IZMN_NP_CH_POSLEDNIJ_PARAMETR : INT := PK_DU_IZMN_NP_BH + 1;
	PK_DU_IZMN_NP_MIN_SIGN_RANGE : INT := PK_DU_IZMN_NP_CH_POSLEDNIJ_PARAMETR + 1;
	PK_DU_IZMN_NP_MIDDLE : INT := PK_DU_IZMN_NP_MIN_SIGN_RANGE + 1;
	PK_DU_IZMN_NP_MIDDLE_SIGN : INT := PK_DU_IZMN_NP_MIDDLE + 1;
	PK_DU_IZMN_NP_MAX_SIGNAL_VALUE : INT := PK_DU_IZMN_NP_MIDDLE_SIGN + 1;
	PK_DU_IZMN_NP_T_MAX : INT := PK_DU_IZMN_NP_MAX_SIGNAL_VALUE + 1;
	PK_DU_IZMN_NP_BAD_NUMB : INT := PK_DU_IZMN_NP_T_MAX + 1;
	PK_DU_IZMN_NP_H_MAX : INT := PK_DU_IZMN_NP_BAD_NUMB + 1;
	PK_DU_IZMN_NP_H_MIN : INT := PK_DU_IZMN_NP_H_MAX + 1;
	PK_DU_IZMN_NP_WIDTH_PEAK_MAX : INT := PK_DU_IZMN_NP_H_MIN + 1;
	PK_DU_IZMN_NP_ADAPT_LENGTH : INT := PK_DU_IZMN_NP_WIDTH_PEAK_MAX + 1;
	PK_DU_IZMN_NP_KOL_KALIBR : INT := PK_DU_IZMN_NP_ADAPT_LENGTH + 1;
	PK_DU_IZMN_NP_CORRECT_LEVEL_LASER_1 : INT := PK_DU_IZMN_NP_KOL_KALIBR + 1;
	PK_DU_IZMN_NP_NLINE1 : INT := PK_DU_IZMN_NP_CORRECT_LEVEL_LASER_1 + 1;
	PK_DU_IZMN_NP_NLINE2 : INT := PK_DU_IZMN_NP_NLINE1 + 1;
	PK_DU_IZMN_NP_EXPOSURE_TIME0 : INT := PK_DU_IZMN_NP_NLINE2 + 1;
	PK_DU_IZMN_NP_EXPOSURE_TIME1 : INT := PK_DU_IZMN_NP_EXPOSURE_TIME0 + 1;
	PK_DU_NESPETSIFITSIROVANNOE_SOSTOYANIE_DU : INT := PK_DU_IZMN_NP_EXPOSURE_TIME1 + 1;
	PK_DU_ZAPUSK_TESTA : INT := PK_DU_NESPETSIFITSIROVANNOE_SOSTOYANIE_DU + 1;
	PK_DU_KONETS_RABOTY : INT := PK_DU_ZAPUSK_TESTA + 1;
	
	PK_TDD_INITSIALIZATSIYA : INT := 1;
	PK_TDD_GOTOV_K_RABOTE : INT := PK_TDD_INITSIALIZATSIYA + 1;
	PK_TDD_OSHIBKA_FATALQNAYA : INT := PK_TDD_GOTOV_K_RABOTE + 1;
	PK_TDD_KOD_RESTARTA : INT := PK_TDD_OSHIBKA_FATALQNAYA + 1;
	PK_TDD_TEST_OZU : INT := PK_TDD_KOD_RESTARTA + 1;
	PK_TDD_TEST_OZU_BEZ_OSHIBOK : INT := PK_TDD_TEST_OZU + 1;
	PK_TDD_OSHIBKA_TESTA_OZU : INT := PK_TDD_TEST_OZU_BEZ_OSHIBOK + 1;
	PK_TDD_REZHIM_IZMERENIYA_MP : INT := PK_TDD_OSHIBKA_TESTA_OZU + 1;
	PK_TDD_REZHIM_IZMERENIYA_BP : INT := PK_TDD_REZHIM_IZMERENIYA_MP + 1;
	PK_TDD_POISK_DIAMETRA : INT := PK_TDD_REZHIM_IZMERENIYA_BP + 1;
	PK_TDD_DIAMETR_NE_NAJDEN : INT := PK_TDD_POISK_DIAMETRA + 1;
	PK_TDD_DIAMETR_NE_DOSTOVEREN : INT := PK_TDD_DIAMETR_NE_NAJDEN + 1;
	PK_TDD_DIAMETR_DOSTOVEREN : INT := PK_TDD_DIAMETR_NE_DOSTOVEREN + 1;
	PK_TDD_FP_Wz : INT := PK_TDD_DIAMETR_DOSTOVEREN + 1;
	PK_TDD_FP_Wt : INT := PK_TDD_FP_Wz + 1;
	PK_TDD_FP_Hur : INT := PK_TDD_FP_Wt + 1;
	PK_TDD_ZD_Hur : INT := PK_TDD_FP_Hur + 1;
	PK_NEIZVESTNYJ_KOD_TDD : INT := PK_TDD_ZD_Hur + 1;
	PK_TDD_NESPETSIFITSIROVANNOE_SOSTOYANIE_TDD : INT := PK_NEIZVESTNYJ_KOD_TDD + 1;
	PK_TDD_VIDEOVYHOD_NA_KAMERU_BP : INT := PK_TDD_NESPETSIFITSIROVANNOE_SOSTOYANIE_TDD + 1;
	PK_TDD_REZHIM_ATTESTATSII_BP : INT := PK_TDD_VIDEOVYHOD_NA_KAMERU_BP + 1;
	PK_TDD_TEST_BP : INT := PK_TDD_REZHIM_ATTESTATSII_BP + 1;
	PK_TDD_TEST_BP_BEZ_OSHIBOK : INT := PK_TDD_TEST_BP + 1;
	PK_TDD_OSHIBKA_TESTA_BP : INT := PK_TDD_TEST_BP_BEZ_OSHIBOK + 1;
	PK_TDD_KAMERA_BP : INT := PK_TDD_OSHIBKA_TESTA_BP + 1;
	PK_TDD_NACHALO_KALIBROVKI_BP : INT := PK_TDD_KAMERA_BP + 1;
	PK_TDD_REZHIM_KALIBROVKI_BP : INT := PK_TDD_NACHALO_KALIBROVKI_BP + 1;
	PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP : INT := PK_TDD_REZHIM_KALIBROVKI_BP + 1;
	PK_TDD_KALIBROVKA_NE_USPESHNA_BP : INT := PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP + 1;
	PK_TDD_NACHALO_KALIBROVKI_BP_PLYUS : INT := PK_TDD_KALIBROVKA_NE_USPESHNA_BP + 1;
	PK_TDD_REZHIM_KALIBROVKI_BP_PLYUS : INT := PK_TDD_NACHALO_KALIBROVKI_BP_PLYUS + 1;
	PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP_PLYUS : INT := PK_TDD_REZHIM_KALIBROVKI_BP_PLYUS + 1;
	PK_TDD_KALIBROVKA_NE_USPESHNA_BP_PLYUS : INT := PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP_PLYUS + 1;
	PK_TDD_IZMN_NP_XTOLER : INT := PK_TDD_KALIBROVKA_NE_USPESHNA_BP_PLYUS + 1;
	PK_TDD_IZMN_NP_YTOLER : INT := PK_TDD_IZMN_NP_XTOLER + 1;
	PK_TDD_IZMN_NP_YDOWNTOLER : INT := PK_TDD_IZMN_NP_YTOLER + 1;
	PK_TDD_IZMN_NP_NUMOFSTR : INT := PK_TDD_IZMN_NP_YDOWNTOLER + 1;
	PK_TDD_IZMN_NP_THRRELIAB : INT := PK_TDD_IZMN_NP_NUMOFSTR + 1;
	PK_TDD_IZMN_NP_THRDERIV : INT := PK_TDD_IZMN_NP_THRRELIAB + 1;
	PK_TDD_IZMN_NP_THRDERIVCLB : INT := PK_TDD_IZMN_NP_THRDERIV + 1;
	PK_TDD_IZMN_NP_BIGZERO_LVL : INT := PK_TDD_IZMN_NP_THRDERIVCLB + 1;
	PK_TDD_IZMN_NP_BIGPLUS_LVL : INT := PK_TDD_IZMN_NP_BIGZERO_LVL + 1;
	PK_TDD_IZMN_NP_SMALLZERO_LVL : INT := PK_TDD_IZMN_NP_BIGPLUS_LVL + 1;
	PK_TDD_IZMN_NP_SMALLPLUS_LVL : INT := PK_TDD_IZMN_NP_SMALLZERO_LVL + 1;
	PK_TDD_IZMN_NP_MINAVERTIME : INT := PK_TDD_IZMN_NP_SMALLPLUS_LVL + 1;
	PK_TDD_IZMN_NP_BIGZERO_CTG_NACHALO_PEREDACHI : INT := PK_TDD_IZMN_NP_MINAVERTIME + 1;
	PK_TDD_IZMN_NP_BIGZERO_KY : INT := PK_TDD_IZMN_NP_BIGZERO_CTG_NACHALO_PEREDACHI + 1;
	PK_TDD_IZMN_NP_BIGZERO_X : INT := PK_TDD_IZMN_NP_BIGZERO_KY + 1;
	PK_TDD_IZMN_NP_BIGZERO_TG : INT := PK_TDD_IZMN_NP_BIGZERO_X + 1;
	PK_TDD_IZMN_NP_BIGPLUS_CTG : INT := PK_TDD_IZMN_NP_BIGZERO_TG + 1;
	PK_TDD_IZMN_NP_BIGPLUS_KY : INT := PK_TDD_IZMN_NP_BIGPLUS_CTG + 1;
	PK_TDD_IZMN_NP_BIGPLUS_X : INT := PK_TDD_IZMN_NP_BIGPLUS_KY + 1;
	PK_TDD_IZMN_NP_BIGPLUS_TG : INT := PK_TDD_IZMN_NP_BIGPLUS_X + 1;
	PK_TDD_VIDEOVYHOD_NA_KAMERU_MP : INT := PK_TDD_IZMN_NP_BIGPLUS_TG + 1;
	PK_TDD_REZHIM_ATTESTATSII_MP : INT := PK_TDD_VIDEOVYHOD_NA_KAMERU_MP + 1;
	PK_TDD_TEST_MP : INT := PK_TDD_REZHIM_ATTESTATSII_MP + 1;
	PK_TDD_TEST_MP_BEZ_OSHIBOK : INT := PK_TDD_TEST_MP + 1;
	PK_TDD_OSHIBKA_TESTA_MP : INT := PK_TDD_TEST_MP_BEZ_OSHIBOK + 1;
	PK_TDD_KAMERA_MP : INT := PK_TDD_OSHIBKA_TESTA_MP + 1;
	PK_TDD_NACHALO_KALIBROVKI_MP : INT := PK_TDD_KAMERA_MP + 1;
	PK_TDD_REZHIM_KALIBROVKI_MP : INT := PK_TDD_NACHALO_KALIBROVKI_MP + 1;
	PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP : INT := PK_TDD_REZHIM_KALIBROVKI_MP + 1;
	PK_TDD_KALIBROVKA_NE_USPESHNA_MP : INT := PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP + 1;
	PK_TDD_NACHALO_KALIBROVKI_MP_PLYUS : INT := PK_TDD_KALIBROVKA_NE_USPESHNA_MP + 1;
	PK_TDD_REZHIM_KALIBROVKI_MP_PLYUS : INT := PK_TDD_NACHALO_KALIBROVKI_MP_PLYUS + 1;
	PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP_PLYUS : INT := PK_TDD_REZHIM_KALIBROVKI_MP_PLYUS + 1;
	PK_TDD_KALIBROVKA_NE_USPESHNA_MP_PLYUS : INT := PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP_PLYUS + 1;
	PK_TDD_IZMN_NP_SMALLZERO_CTG : INT := PK_TDD_KALIBROVKA_NE_USPESHNA_MP_PLYUS + 1;
	PK_TDD_IZMN_NP_SMALLZERO_KY : INT := PK_TDD_IZMN_NP_SMALLZERO_CTG + 1;
	PK_TDD_IZMN_NP_SMALLZERO_X : INT := PK_TDD_IZMN_NP_SMALLZERO_KY + 1;
	PK_TDD_IZMN_NP_SMALLZERO_TG : INT := PK_TDD_IZMN_NP_SMALLZERO_X + 1;
	PK_TDD_IZMN_NP_SMALLPLUS_CTG : INT := PK_TDD_IZMN_NP_SMALLZERO_TG + 1;
	PK_TDD_IZMN_NP_SMALLPLUS_KY : INT := PK_TDD_IZMN_NP_SMALLPLUS_CTG + 1;
	PK_TDD_IZMN_NP_SMALLPLUS_X : INT := PK_TDD_IZMN_NP_SMALLPLUS_KY + 1;
	PK_TDD_IZMN_NP_SMALLPLUS_TG_POSLEDNIJ_PARAMETR : INT := PK_TDD_IZMN_NP_SMALLPLUS_X + 1;
	PK_TDD_KONETS_RABOTY : INT := PK_TDD_IZMN_NP_SMALLPLUS_TG_POSLEDNIJ_PARAMETR + 1;
	PK_TDD_OSHIBKA_VNUTRENNYAYA : INT := PK_TDD_KONETS_RABOTY + 1;
	PK_TDD_SBROS_OSHIBKI_VNUTRENNEJ : INT := PK_TDD_OSHIBKA_VNUTRENNYAYA + 1;
	
	PK_DTN_INITSIALIZATSIYA : INT := 1;
	PK_DTN_GOTOV_K_RABOTE : INT := PK_DTN_INITSIALIZATSIYA + 1;
	PK_DTN_ZAPUSK_TESTA : INT := PK_DTN_GOTOV_K_RABOTE + 1;
	PK_DTN_TEST_BEZ_OSHIBKI : INT := PK_DTN_ZAPUSK_TESTA + 1;
	PK_DTN_OSHIBKA_TESTA : INT := PK_DTN_TEST_BEZ_OSHIBKI + 1;
	PK_DTN_OSHIBKA_FATALQNAYA : INT := PK_DTN_OSHIBKA_TESTA + 1;
	PK_DTN_IZMN_NP_VremyaOsredneniya_DTN : INT := PK_DTN_OSHIBKA_FATALQNAYA + 1;
	PK_DTN_DANNYE_PO_TEMPERATURE_USTARELI : INT := PK_DTN_IZMN_NP_VremyaOsredneniya_DTN + 1;
	PK_DTN_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ : INT := PK_DTN_DANNYE_PO_TEMPERATURE_USTARELI + 1;
	PK_DTN_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ : INT := PK_DTN_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ + 1;
	PK_DTN_TEMPERATURA_V_NORME : INT := PK_DTN_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ + 1;
	
	PK_DTR_INITSIALIZATSIYA : INT := 1;
	PK_DTR_GOTOV_K_RABOTE : INT := PK_DTR_INITSIALIZATSIYA + 1;
	PK_DTR_ZAPUSK_TESTA : INT := PK_DTR_GOTOV_K_RABOTE + 1;
	PK_DTR_TEST_BEZ_OSHIBKI : INT := PK_DTR_ZAPUSK_TESTA + 1;
	PK_DTR_OSHIBKA_TESTA : INT := PK_DTR_TEST_BEZ_OSHIBKI + 1;
	PK_DTR_OSHIBKA_FATALQNAYA : INT := PK_DTR_OSHIBKA_TESTA + 1;
	PK_DTR_IZMN_NP_VremyaOsredneniya_DTR : INT := PK_DTR_OSHIBKA_FATALQNAYA + 1;
	PK_DTR_DANNYE_PO_TEMPERATURE_USTARELI : INT := PK_DTR_IZMN_NP_VremyaOsredneniya_DTR + 1;
	PK_DTR_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ : INT := PK_DTR_DANNYE_PO_TEMPERATURE_USTARELI + 1;
	PK_DTR_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ : INT := PK_DTR_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ + 1;
	PK_DTR_TEMPERATURA_V_NORME : INT := PK_DTR_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ + 1;
	
	PK_IP2K_K1_INITSIALIZATSIYA : INT := 1;
	PK_IP2K_K1_GOTOV_K_RABOTE : INT := PK_IP2K_K1_INITSIALIZATSIYA + 1;
	PK_IP2K_K1_OTKAZ : INT := PK_IP2K_K1_GOTOV_K_RABOTE + 1;
	PK_IP2K_K1_VKLYUCHITQ : INT := PK_IP2K_K1_OTKAZ + 1;
	PK_IP2K_K1_VYKLYUCHITQ : INT := PK_IP2K_K1_VKLYUCHITQ + 1;
	PK_IP2K_K1_AVTONOMNYJ_REZHIM : INT := PK_IP2K_K1_VYKLYUCHITQ + 1;
	PK_IP2K_K1_NEAVTONOMNYJ_REZHIM : INT := PK_IP2K_K1_AVTONOMNYJ_REZHIM + 1;
	PK_IP2K_K1_IZMN_ZD_Wipn_K1 : INT := PK_IP2K_K1_NEAVTONOMNYJ_REZHIM + 1;
	PK_IP2K_K1_IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1 : INT := PK_IP2K_K1_IZMN_ZD_Wipn_K1 + 1;
	PK_IP2K_K1_IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1 : INT := PK_IP2K_K1_IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1 + 1;
	PK_IP2K_K1_IZMN_NP_TokZashityModulya_IP2K_K1 : INT := PK_IP2K_K1_IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1 + 1;
	PK_IP2K_K1_IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1 : INT := PK_IP2K_K1_IZMN_NP_TokZashityModulya_IP2K_K1 + 1;
	PK_IP2K_K1_IZMN_NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA : INT := PK_IP2K_K1_IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1 + 1;
	
END_VAR

VAR
	_BREAK_ : BOOL;
	_FUNCTION_ : INT;
	_VOID_ : INT;
	TekushijRezhim : INT;
	TekushijEtap : INT;
	PriznakVakuum : INT;
	RezhimIspolneniyaRA : INT;
	Flag_KonetsTP : INT;
	FlagPovtornojZagruzki : BOOL;
	FlagL_KZ_UR : BOOL;
	FlagHur : BOOL;
	FlagHur_DU : BOOL;
	FlagHur_DV : BOOL;
	FlagDkr : BOOL;
	FlagDkr_TDD : BOOL;
	FlagDkr_DV : BOOL;
	FlagDTN : BOOL;
	FlagDTR : BOOL;
	FlagVPO : BOOL;
	FlagGotovnostiVrosta : BOOL;
	FlagRegulyatora_V_ZR : BOOL;
	FlagRegulyatora_X_ZR : BOOL;
	FlagRegulyatora_V_ZU : BOOL;
	FlagRegulyatora_X_ZU : BOOL;
	FlagRegulyatora_V_ZV : BOOL;
	FlagRegulyatora_X_ZV : BOOL;
	FlagRegulyatora_V_TR : BOOL;
	FlagRegulyatora_X_TR : BOOL;
	FlagRegulyatora_V_TU : BOOL;
	FlagRegulyatora_X_TU : BOOL;
	FlagRegulyatora_V_TV : BOOL;
	FlagRegulyatora_X_TV : BOOL;
	K_KVP_Z : BOOL;
	K_KNP_Z : BOOL;
	K_KVP_T : BOOL;
	K_KNP_T : BOOL;
	Flag_IP2K_K1 : BOOL;
	Flag_IP2K_K2 : BOOL;
	Flag_NalichiyaModulya0_IP2K_K1 : BOOL;
	Flag_NalichiyaModulya1_IP2K_K1 : BOOL;
	Flag_NalichiyaModulya2_IP2K_K1 : BOOL;
	Flag_NalichiyaModulya3_IP2K_K1 : BOOL;
	Flag_NalichiyaModulya4_IP2K_K1 : BOOL;
	Flag_NalichiyaModulya5_IP2K_K1 : BOOL;
	Flag_AVD1 : BOOL;
	Flag_AVD2 : BOOL;
	K_VE1 : BOOL;
	K_VE2 : BOOL;
	T_NA_SRABATYVANIE_USTROJSTV_GVS : LINT;
	ZADERZHKA_NA_RAZGRUZKU_TRAFIKA : LINT;
	KodSobytiya_ot_PIV : INT;
	KodSobytiya_k_PIV : INT;
	KOORD_ZAT : INT;
	KOORD_TIG : INT;
	FP_Qgaza : REAL;
	FP_PotokOhlazhdVody_IP2K_K1 : REAL;
	FP_TemperaturaOhlNaVhode_IP2K_K1 : REAL;
	FP_TemperaturaOhlNaVyhode_IP2K_K1 : REAL;
	FP_Riz_IP2K_K1 : REAL;
	FP_TokModulya0_IP2K_K1 : REAL;
	FP_TokModulya1_IP2K_K1 : REAL;
	FP_TokModulya2_IP2K_K1 : REAL;
	FP_TokModulya3_IP2K_K1 : REAL;
	FP_TokModulya4_IP2K_K1 : REAL;
	FP_TokModulya5_IP2K_K1 : REAL;
	FP_TempModulya0_IP2K_K1 : REAL;
	FP_TempModulya1_IP2K_K1 : REAL;
	FP_TempModulya2_IP2K_K1 : REAL;
	FP_TempModulya3_IP2K_K1 : REAL;
	FP_TempModulya4_IP2K_K1 : REAL;
	FP_TempModulya5_IP2K_K1 : REAL;
	FP_SostoyanieModulya_IP2K_K1 : LINT;
	FP_U380_IP2K_K1 : REAL;
	FP_Iipn_K1 : REAL;
	FP_Uipn_K1 : REAL;
	FP_Wipn_K1 : REAL;
	FP_Ripn_K1 : REAL;
	FP_Iipn_K2 : REAL;
	FP_Uipn_K2 : REAL;
	FP_Wipn_K2 : REAL;
	FP_Ripn_K2 : REAL;
	FP_Tdtn : REAL;
	FP_Tn : REAL;
	FP_PSWdtn : LINT;
	FP_Tdtr : REAL;
	FP_Tr : REAL;
	FP_PSWdtr : LINT;
	FP_Hur : REAL;
	FP_Hur_DU : REAL;
	FP_Hur_DV : REAL;
	FP_TochkiDlya_DU : REAL;
	FP_STAT : LINT;
	FP_PEAKW : LINT;
	FP_PEAKC : LINT;
	FP_RANGE : LINT;
	FP_DISP : LINT;
	FP_MEAN : LINT;
	FP_LASER : LINT;
	FP_Dkr : REAL;
	FP_Dkr_TDD : REAL;
	FP_Dkr_DV : REAL;
	FP_DeltaX : REAL;
	FP_DeltaY : REAL;
	FP_Vrosta : REAL;
	FP_Tvk1 : REAL;
	FP_Tvk2 : REAL;
	FP_Tvk3 : REAL;
	FP_Tvk4 : REAL;
	FP_Tvk5 : REAL;
	FP_Tvk6 : REAL;
	FP_Tvk7 : REAL;
	FP_Tvk8 : REAL;
	FP_Udk : REAL;
	FP_Pnk : REAL;
	FP_Pvk : REAL;
	FP_Pavd1 : REAL;
	FP_Pavd2 : REAL;
	FP_Mmonokristalla : REAL;
	FP_Mkremniya_v_tigle : REAL;
	TK_MnachalqnojZagruzki : REAL;
	OP_Mzatravki : REAL;
	OP_Lzatravki : REAL;
	FP_GlubinaRasplava : REAL;
	OP_Dzerkala_rasplava : REAL;
	FP_Lmonokristalla : REAL;
	FP_Lnachala_tekushej_chasti_monokristalla : REAL;
	FP_Mnachala_tekushej_chasti_monokristalla : REAL;
	FP_VremyaTekushegoEtapa : LINT;
	FP_DlinaZatravlivaniya : REAL;
	FP_DlinaPerehodaZatravka_SHejka : REAL;
	FP_DlinaSHejki : REAL;
	FP_DlinaPerehodaSHejka_Konus : REAL;
	FP_DlinaKonusa : REAL;
	FP_DlinaPerehodaKonus_TSilindr : REAL;
	FP_DlinaStabilizatsiiTSilindra : REAL;
	FP_DlinaTSilindra : REAL;
	FP_DlinaPerehodaTSilindr_ObrKonus : REAL;
	FP_DlinaObratnogoKonusa : REAL;
	FP_MassaZatravlivaniya : REAL;
	FP_MassaPerehodaZatravka_SHejka : REAL;
	FP_MassaSHejki : REAL;
	FP_MassaPerehodaSHejka_Konus : REAL;
	FP_MassaKonusa : REAL;
	FP_MassaPerehodaKonus_TSilindr : REAL;
	FP_MassaStabilizatsiiTSilindra : REAL;
	FP_MassaTSilindra : REAL;
	FP_MassaPerehodaTSilindr_ObrKonus : REAL;
	FP_MassaObratnogoKonusa : REAL;
	FP_I_ZR : REAL;
	FP_I_ZU : REAL;
	FP_I_ZV : REAL;
	FP_I_TR : REAL;
	FP_I_TU : REAL;
	FP_I_TV : REAL;
	FP_VzR : REAL;
	FP_VzU : REAL;
	FP_Vz : REAL;
	FP_Xz : REAL;
	FP_Wz : REAL;
	FP_Wz_UGOL : REAL;
	FP_VtR : REAL;
	FP_VtU : REAL;
	FP_Vt : REAL;
	FP_Xt : REAL;
	FP_Wt : REAL;
	FP_Wt_UGOL : REAL;
	FP_L_KZ_UR : REAL;
	ZD_Qgaza : REAL;
	ZD_Pnk : REAL;
	ZD_Iptd : REAL;
	ZD_Wipn_K1 : REAL;
	ZD_Wipn_K2 : REAL;
	ZD_Baza_REG_ROSTA : REAL;
	ZD_Baza_Tn_dlya_REG_ROSTA_Predydushee : REAL;
	ZD_Tn : REAL;
	ZD_Tr : REAL;
	ZD_Hur : REAL;
	ZD_Dkr : REAL;
	ZD_Vrosta : REAL;
	ZD_VzR : REAL;
	ZD_VzU : REAL;
	ZD_Xz : REAL;
	ZD_Wz : REAL;
	ZD_Wz_UGOL : REAL;
	ZD_VtR : REAL;
	ZD_VtU : REAL;
	ZD_Xt : REAL;
	ZD_Wt : REAL;
	ZD_Wt_UGOL : REAL;
	ZD_VzR_PRIVOD : REAL;
	ZD_VzU_PRIVOD : REAL;
	ZD_Wz_PRIVOD : REAL;
	ZD_VtR_PRIVOD : REAL;
	ZD_VtU_PRIVOD : REAL;
	ZD_Wt_PRIVOD : REAL;
	ZD_Vz : REAL;
	ZD_Vt : REAL;
	TK_GlubokijVakuum_R2 : REAL;
	TK_TotkachkiDopustimoe_T2doP2 : LINT;
	TK_VremyaProduvki_T3 : LINT;
	TK_TotkachkiArgona_T4 : LINT;
	TK_CHisloTSiklovOsushki_Nts : LINT;
	TK_VremyaOtkachkiPosleOsushki_T5 : LINT;
	TK_PredelDopRnkPosleKontrolyaNatek_R3 : REAL;
	TK_Totgazovki_KontrNat : LINT;
	TK_PeriodKontrolya_KontrNat : LINT;
	TK_DopustimoeNatekanie_KntrNat : REAL;
	TK_VremyaOtkachkiDopustimoe_T7 : LINT;
	TK_ZD_Qgaza_PPZ : REAL;
	TK_ZD_Pnk_PPZ : REAL;
	TK_ZD_Wipn_K1_PPZ : REAL;
	TK_ZD_Wipn_K2_PPZ : REAL;
	TK_ZD_Tr_PPZ : REAL;
	TK_ZD_Vrosta_PPZ : REAL;
	TK_ZD_Hur_PPZ : REAL;
	TK_ZD_Dkr_PPZ : REAL;
	TK_ZD_VzR_PPZ : REAL;
	TK_ZD_VzU_PPZ : REAL;
	TK_ZD_Xz_PPZ : REAL;
	TK_ZD_Wz_PPZ : REAL;
	TK_ZD_Wz_UGOL_PPZ : REAL;
	TK_ZD_VtR_PPZ : REAL;
	TK_ZD_VtU_PPZ : REAL;
	TK_ZD_Xt_PPZ : REAL;
	TK_ZD_Wt_PPZ : REAL;
	TK_ZD_Wt_UGOL_PPZ : REAL;
	TK_Qgaza_PodgStabRaspl : REAL;
	TK_Pnk_PodgStabRaspl : REAL;
	TK_Hur_PodgStabRaspl : REAL;
	TK_Wt_PodgStabRaspl : REAL;
	TK_Wipn_K1_PodgStabRaspl : REAL;
	TK_Rezhim_StabRaspl : INT;
	TK_Vremya_StabRaspl : LINT;
	TK_Tr_StabRaspl : REAL;
	TK_TnOzh_StabRasp : REAL;
	TK_VremyaOsred_Tn_StabRaspl : LINT;
	TK_RasstoyanieDoRasplava_Lpp : REAL;
	TK_VzDvizheniya_kRasplavu_Vpp : REAL;
	TK_Dmin_Zatravl : REAL;
	TK_Dmaks_Zatravl : REAL;
	TK_TclepogoPlavleniya_Zatravl : LINT;
	TK_TozhidaniyaDiametra_Zatravl : LINT;
	TK_Wz_Zatravl : REAL;
	TK_Vz_Pogruzheniya_Zatravl : REAL;
	TK_Wt_Zatravl : REAL;
	TK_Hur_Zatravl : REAL;
	TK_Tn_Zatravl : REAL;
	TK_Pnk_Zatravl : REAL;
	TK_Qgaza_Zatravl : REAL;
	TK_Hpogr_Zatravl : REAL;
	TK_VzVytyagivaniya_Zatravl : REAL;
	TK_DiametrDendrita : REAL;
	TK_Ki_Dkr_SHejka : REAL;
	TK_Kd_Dkr_SHejka : REAL;
	TK_Kp_Dkr_SHejka : REAL;
	TK_Kz_Dkr_SHejka : REAL;
	TK_Pauza_Dkr_SHejka : LINT;
	TK_VslepogoVyrashivaniya_SHejka : REAL;
	TK_PopravkaTn_SHejka : REAL;
	TK_TclepogoVyrashivaniya_SHejka : LINT;
	TK_DkrOzhidaemyj_SHejka : REAL;
	TK_Popr_kTn_poDkro_SHejka : REAL;
	TK_ZD_Dkr_SHejka : REAL;
	TK_Ki_Vrosta_SHejka : REAL;
	TK_Kd_Vrosta_SHejka : REAL;
	TK_Kp_Vrosta_SHejka : REAL;
	TK_Kz_Vrosta_SHejka : REAL;
	TK_Pauza_Vrosta_SHejka : LINT;
	TK_ZD_Vrosta_SHejka : REAL;
	TK_Dkr_NachalaSchetaDliny_SHejka : REAL;
	TK_DkrOtbrakovki_SHejka : REAL;
	TK_DlinaHoroshejCHasti_SHejka : REAL;
	TK_VponizheniyaTemperatury_SHejka : REAL;
	TK_BezopasnyjDkr_SHejka : REAL;
	TK_VzBezopasnoeSrednee : REAL;
	TK_VzBezopasnoe_SHejka : REAL;
	TK_TbezopasnojSkorosti_SHejka : LINT;
	TK_TstabilizatsiiDkr_SHejka : LINT;
	TK_VerhnijPorogPodrezkiDkr_SHejka : REAL;
	TK_PopravkaTn_Konus : REAL;
	TK_Vz_Konus : REAL;
	TK_DkonusaKonechnyj_Konus : REAL;
	TK_K1_Konusa : REAL;
	TK_K2_Konusa : REAL;
	TK_Ki_Dkr_StabTSil : REAL;
	TK_Kp_Dkr_StabTSil : REAL;
	TK_Kd_Dkr_StabTSil : REAL;
	TK_Kz_Dkr_StabTSil : REAL;
	TK_Pauza_Dkr_StabTSil : LINT;
	TK_VremyaPerehodaKonusTSilindr : LINT;
	TK_DkrTSilindra_KonTSil : REAL;
	TK_K1_KonTSil : REAL;
	TK_K2_KonTSil : REAL;
	TK_VrazrashivaniyaGr_KonTSil : REAL;
	TK_PopravkaTn_StabTSil : REAL;
	TK_VzStabNachalqnaya_StabTSil : REAL;
	TK_VremyaStabTSil : LINT;
	TK_Ki_Dkr_TSilindr : REAL;
	TK_Kp_Dkr_TSilindr : REAL;
	TK_Kd_Dkr_TSilindr : REAL;
	TK_Kz_Dkr_TSilindr : REAL;
	TK_Pauza_Dkr_TSilindr : LINT;
	TK_Kp_Vrosta_TSilindr : REAL;
	TK_Ki_Vrosta_TSilindr : REAL;
	TK_Kd_Vrosta_TSilindr : REAL;
	TK_Kz_Vrosta_TSilindr : REAL;
	TK_Pauza_Vrosta_TSilindr : LINT;
	TK_VzBezopasnoe_TSilindr : REAL;
	TK_VerhnijPorogPodrezkiDkr_TSilindr : REAL;
	TK_REZERV_1 : REAL;
	TK_REZERV_2 : REAL;
	TK_REZERV_3 : REAL;
	TK_REZERV_4 : REAL;
	TK_REZERV_5 : REAL;
	TK_PorogovayaLkr_TSilindr : REAL;
	TK_Zagruzki : REAL;
	TK_PorogovayaMrasplava_TSilindr : REAL;
	TK_Normirovanie_Vremeni : LINT;
	TK_VremyaIzmeneniya_V_Diametra : LINT;
	TK_KorrektsiiSkorosti : REAL;
	TK_AvarijnayaSkorostqPodrezki : REAL;
	TK_SlabayaPodrezka : REAL;
	TK_SilqnayaPodrezka : REAL;
	TK_DlinaPerehodaTSilindrKonus : REAL;
	TK_DELQTA_Wt_OTRYV_KRISTALLA : REAL;
	TK_UskoreniePriOtryveKristalla : REAL;
	TK_VzPosleOtryvaKristalla : REAL;
	NP_FlagRaschetaHur_poDU : BOOL;
	NP_FlagRaschetaHur_poDV : BOOL;
	NP_FlagRaschetaDkr_poTDD : BOOL;
	NP_FlagRaschetaDkr_poDV : BOOL;
	NP_Tizmereniya_Dkr_DV : LINT;
	NP_Lz_OT_KVP_DO_DP_Lppz : REAL;
	NP_Lz_OT_KVP_DO_STYKA_NK : REAL;
	NP_L_OT_STYKA_NK_DO_PNUR_L1 : REAL;
	NP_Lz_OT_KVP_DO_KNP : REAL;
	Realqnaya_Xz_Izmerennaya_Operatorom : REAL;
	NP_Kdv : REAL;
	NP_Mzatravkoderzhatelya : REAL;
	NP_Mtrosa : REAL;
	OP_Lsumm_TSilindrov : REAL;
	OP_Tsumm_TSilindrov : LINT;
	OP_Msumm_TSilindrov : REAL;
	NP_Lt_OT_KNP_DO_KVP : REAL;
	NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR : REAL;
	NP_ObqemVakPolosti_V : REAL;
	NP_DavlenieVklyucheniyaDVN_P1 : REAL;
	NP_KontrolqnoeVremyaDostizheniyaP1_T1 : LINT;
	NP_Patmosf : REAL;
	NP_VremyaPerehodnogoProtsessaQgaza : LINT;
	NP_PogreshnostqQgaza : REAL;
	NP_Ppor : REAL;
	NP_KOEF_NA_OTKR : LINT;
	NP_KOEF_NA_ZAKR : LINT;
	NP_VremyaPerehodnogoProtsessaPnk : LINT;
	OP_PogreshnostqPnk : REAL;
	NP_KoefA_Pnk : REAL;
	NP_KoefV_Pnk : REAL;
	NP_VremyaPerehodnogoProtsessaWptd : LINT;
	NP_Kp_Wptd : REAL;
	NP_TipIPN : LINT;
	NP_Pauza_Wptd : LINT;
	NP_PogreshnostqWipn_K1 : REAL;
	NP_Iptd_MAH : REAL;
	NP_Wipn_K1_MAH : REAL;
	NP_DeltaW_Razogreva : REAL;
	NP_DeltaVremeniRazogreva : LINT;
	NP_Tn_MAX : REAL;
	NP_Kp_Tn : REAL;
	NP_Kd_Tn : REAL;
	NP_Ki_Tn : REAL;
	NP_Kz_Tn : REAL;
	NP_VremyaPerehodnogoProtsessaTn : LINT;
	NP_PogreshnostqTn : REAL;
	NP_Pauza_Tn : LINT;
	NP_Kp_Tr : REAL;
	NP_Kd_Tr : REAL;
	NP_Ki_Tr : REAL;
	NP_Kz_Tr : REAL;
	NP_Pauza_Tr : LINT;
	NP_Tr_MAX : REAL;
	NP_VremyaPerehodnogoProtsessaTr : LINT;
	NP_PogreshnostqTr : REAL;
	NP_DeltaTr_MAX : REAL;
	NP_MIN_DU_Hur : REAL;
	NP_MAX_DU_Hur : REAL;
	NP_MIN_DUDD_Hur : REAL;
	NP_MAX_DUDD_Hur : REAL;
	NP_Kp_DU_Hur : REAL;
	NP_Kp_DUDD_Hur : REAL;
	NP_PredupreditelqnyjHur : REAL;
	NP_AvarijnayaOshibkaHur : REAL;
	NP_Kp_Dkr : REAL;
	NP_Kd_Dkr : REAL;
	NP_Ki_Dkr : REAL;
	NP_Kz_Dkr : REAL;
	NP_Dkr_MAX : REAL;
	NP_DeltaVzRS_MAH : REAL;
	NP_VremyaPerehodnogoProtsessaDkr : LINT;
	NP_PogreshnostqDkr : REAL;
	NP_Pauza_Dkr : LINT;
	NP_Kp_Vrosta : REAL;
	NP_Kd_Vrosta : REAL;
	NP_Ki_Vrosta : REAL;
	NP_Kz_Vrosta : REAL;
	NP_Pauza_Vrosta : LINT;
	NP_VremyaOsredneniyaVzVrosta : LINT;
	NP_VzR_MAX : REAL;
	NP_DeltaTn_MAX : REAL;
	NP_Pauza_REG_ROSTA : LINT;
	NP_VremyaPerehodnogoProtsessaVrosta : LINT;
	NP_PogreshnostqVrosta : REAL;
	NP_PopravkaVtR_Nur : REAL;
	NP_THRESH_DU : REAL;
	NP_DRELQ_DU : REAL;
	NP_THRESH_GIST_DU : REAL;
	NP_RELATIV_QUALITY_DU : REAL;
	NP_AH_DU : REAL;
	NP_BH_DU : REAL;
	NP_CH_DU : REAL;
	NP_MIN_SIGN_RANGE_DU : REAL;
	NP_MIDDLE_DU : REAL;
	NP_MIDDLE_SIGN_DU : REAL;
	NP_MAX_SIGNAL_VALUE_DU : REAL;
	NP_T_MAX_DU : REAL;
	NP_BAD_NUMB_DU : REAL;
	NP_H_MAX_DU : REAL;
	NP_H_MIN_DU : REAL;
	NP_WIDTH_PEAK_MAX_DU : REAL;
	NP_ADAPT_LENGTH_DU : REAL;
	NP_KOL_KALIBR_DU : REAL;
	NP_CORRECT_LEVEL_LASER_1_DU : REAL;
	NP_NLINE1_DU : REAL;
	NP_NLINE2_DU : REAL;
	NP_EXPOSURE_TIME0_DU : REAL;
	NP_EXPOSURE_TIME1_DU : REAL;
	NP_XTOLER : REAL;
	NP_YTOLER : REAL;
	NP_YDOWNTOLER : REAL;
	NP_NUMOFSTR : REAL;
	NP_THRRELIAB : REAL;
	NP_THRDERIV : REAL;
	NP_THRDERIVCLB : REAL;
	NP_BIGZERO_LVL : REAL;
	NP_BIGPLUS_LVL : REAL;
	NP_SMALLZERO_LVL : REAL;
	NP_SMALLPLUS_LVL : REAL;
	NP_MINAVERTIME : REAL;
	NP_BIGZERO_CTG : REAL;
	NP_BIGZERO_KY : REAL;
	NP_BIGZERO_X : REAL;
	NP_BIGZERO_TG : REAL;
	NP_BIGPLUS_CTG : REAL;
	NP_BIGPLUS_KY : REAL;
	NP_BIGPLUS_X : REAL;
	NP_BIGPLUS_TG : REAL;
	NP_SMALLZERO_CTG : REAL;
	NP_SMALLZERO_KY : REAL;
	NP_SMALLZERO_X : REAL;
	NP_SMALLZERO_TG : REAL;
	NP_SMALLPLUS_CTG : REAL;
	NP_SMALLPLUS_KY : REAL;
	NP_SMALLPLUS_X : REAL;
	NP_SMALLPLUS_TG : REAL;
	NP_POPRAVKA_K_TDD_TSILINDR : REAL;
	NP_POPRAVKA_K_TDD_SHEJKA : REAL;
	NP_Tsm_DTN : REAL;
	NP_VremyaOsredneniya_DTN : LINT;
	NP_Tsm_DTR : REAL;
	NP_VremyaOsredneniya_DTR : LINT;
	NP_Nominalqnyj_Koef_V_ZR : REAL;
	NP_Nominalqnyj_Koef_X_ZR : REAL;
	NP_Nominalqnyj_Koef_V_ZU : REAL;
	NP_Nominalqnyj_Koef_X_ZU : REAL;
	NP_Koef_V_ZR : REAL;
	NP_Koef_X_ZR : REAL;
	NP_Koef_V_ZU : REAL;
	NP_Koef_X_ZU : REAL;
	NP_Koef_V_ZV : REAL;
	NP_Koef_X_ZV : REAL;
	NP_Koef_V_TR : REAL;
	NP_Koef_X_TR : REAL;
	NP_Koef_V_TU : REAL;
	NP_Koef_X_TU : REAL;
	NP_Koef_V_TV : REAL;
	NP_Koef_X_TV : REAL;
	NP_RAB_USK_ZR : REAL;
	NP_KOEF_A_ZR : REAL;
	NP_AVR_TOR_ZR : REAL;
	NP_RAB_USK_ZU : REAL;
	NP_KOEF_A_ZU : REAL;
	NP_AVR_TOR_ZU : REAL;
	NP_RAB_USK_ZV : REAL;
	NP_KOEF_A_ZV : REAL;
	NP_AVR_TOR_ZV : REAL;
	NP_RAB_USK_TR : REAL;
	NP_KOEF_A_TR : REAL;
	NP_AVR_TOR_TR : REAL;
	NP_RAB_USK_TU : REAL;
	NP_KOEF_A_TU : REAL;
	NP_AVR_TOR_TU : REAL;
	NP_RAB_USK_TV : REAL;
	NP_KOEF_A_TV : REAL;
	NP_AVR_TOR_TV : REAL;
	NP_TokZashityModulya_IP2K_K1 : REAL;
	NP_SkorostqIzmeneniya_W_IP2K_K1 : REAL;
	NP_MinimalqnoeKolichestvoModulej_IP2K_K1 : LINT;
	NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE : REAL;
	NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA : REAL;
	NP_UstavkaPotokaOhlZHidkosti_IP2K_K1 : REAL;
	NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1 : REAL;
	NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1 : REAL;
	NP_NizhnyayaGranitsaRiz_IP2K_K1 : REAL;
	NP_NizhnyayaGranitsaRn_IP2K_K1 : REAL;
	NP_VerhnyayaGranitsaRn_IP2K_K1 : REAL;
	NP_REZH_ISPOLN_RA : INT;
	NP_RADIUS_STENKI_TIGLYA : REAL;
	NP_RADIUS_DNA_TIGLYA : REAL;
	NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE : REAL;
	NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA : REAL;
	NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM : REAL;
	NP_OTZHIG_DELQTA_W_OTZHIGA : REAL;
	NP_OTZHIG_DELQTA_T_OTZHIGA : LINT;
	NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS : REAL;
	NP_OTZHIG_DAVLENIE_OTZHIGA_MIN : REAL;
	NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA : REAL;
	NP_OTZHIG_VREMYA_OTZHIGA : LINT;
	NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN : REAL;
	NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN : LINT;
	FlagLmonokristalla : BOOL;
	NP_MaksimalqnayaVzR : REAL;
	OP_Lt_OT_KNP_DO_PNUR : REAL;
	OP_KoordinataTekCHastiMonokristalla : REAL;
	OP_KoordinataNachalaZatravlivaniya : REAL;
	OP_KoordinataNachalaPerehodaZatravka_SHejka : REAL;
	OP_KoordinataNachalaSHejki : REAL;
	OP_KoordinataNachalaPerehodaSHejka_Konus : REAL;
	OP_KoordinataNachalaKonusa : REAL;
	OP_KoordinataNachalaPerehodaKonus_TSilindr : REAL;
	OP_KoordinataNachalaStabilizatsiiTSilindra : REAL;
	OP_KoordinataNachalaTSilindra : REAL;
	OP_KoordinataNachalaPerehodaTSilindr_ObrKonus : REAL;
	OP_KoordinataNachalaObratnogoKonusa : REAL;
	OP_KoordinataOryvaMonokristalla : REAL;
	LP_SchetchikSekund : INT;
	SchetchikRestartovDU : INT;
	SchetchikRestartovTDD : INT;
	OP_Mkr_NaNachaloRazregermetizatsiiVK : REAL;
	UstanovochnayaKoordinataZatravki : REAL;
	UstanovochnayaKoordinataTiglya : REAL;
	FP_VrazrashivaniyaDkr : REAL;
	FP_SkorostqRostaKonusa : REAL;
	FP_TangensUgolaRostaDiametra : REAL;
	OP_Dkr_NachaloKonusa : REAL;
END_VAR

VAR_INPUT
	K_OTMENA : BOOL;
	K_ZASHITA_PTD : BOOL;
	K_IZOL_PTD : BOOL;
	K_VKL_KONT_PTD : BOOL;
	K_VKL_PTD : BOOL;
	K_VE1_ISH : BOOL;
	K_VE2_ISH : BOOL;
	K_VE3 : BOOL;
	K_VE4 : BOOL;
	K_VE5 : BOOL;
	K_VE6 : BOOL;
	K_VE7 : BOOL;
	K_OTKR_VM14 : BOOL;
	K_ZAKR_VM14 : BOOL;
	K_MNmah : BOOL;
	K_MNmin : BOOL;
	K_RP1 : BOOL;
	K_RP2 : BOOL;
	K_RP3 : BOOL;
	K_RP4 : BOOL;
	K_RP5 : BOOL;
	K_RP6 : BOOL;
	K_RP7 : BOOL;
	K_DATCHIKA_KASANIYA : BOOL;
	K_DP : BOOL;
	K_OTKR_ZATVOR_V : BOOL;
	K_ZAKR_ZATVOR_V : BOOL;
	K_STYKOVKI_1 : BOOL;
	K_STYKOVKI_2 : BOOL;
	K_STYKOVKI_3 : BOOL;
	K_STYKOVKI_4 : BOOL;
	K_STYKOVKI_5 : BOOL;
	K_STYKOVKI_6 : BOOL;
	K_STYKOVKI_7 : BOOL;
	K_STYKOVKI_8 : BOOL;
	K_VE10 : BOOL;
	K_VE11 : BOOL;
	K_220_NA_VHODE_IBP : BOOL;
	K_IBP_RAZRYAZHEN : BOOL;
	K_V1 : BOOL;
	K_NVR1 : BOOL;
	K_DVN1 : BOOL;
	K_NVR2 : BOOL;
	K_DVN2 : BOOL;
	K_PROGR_VKL_24V_48V : BOOL;
	K_Zakr_RRG : BOOL;
	K_RP8 : BOOL;
	K_Otkr_RRG : BOOL;
END_VAR

VAR_OUTPUT
	U_VKL_PTD : BOOL;
	U_VYK_PTD : BOOL;
	U_VKL_RV_PTD : BOOL;
	U_VKL_ASS : BOOL;
	U_VE12 : BOOL;
	FPGA3_N5 : BOOL;
	FPGA3_N6 : BOOL;
	FPGA3_N7 : BOOL;
	U_LAZERA_DP : BOOL;
	FPGA3_N9 : BOOL;
	FPGA3_N10 : BOOL;
	FPGA3_N11 : BOOL;
	FPGA3_N12 : BOOL;
	FPGA3_N13 : BOOL;
	FPGA3_N14 : BOOL;
	FPGA3_N15 : BOOL;
	FPGA3_N16 : BOOL;
	FPGA3_N17 : BOOL;
	FPGA3_N18 : BOOL;
	FPGA3_N19 : BOOL;
	FPGA3_N20 : BOOL;
	FPGA3_N21 : BOOL;
	FPGA3_N22 : BOOL;
	FPGA3_N23 : BOOL;
	U_NVR2 : BOOL;
	U_NVR1 : BOOL;
	U_RAZBLOKIROVKA_VK_NK : BOOL;
	U_TEST_DK : BOOL;
	U_ZAKR_RRG : BOOL;
	U_OTKR_RRG : BOOL;
	U_VT3 : BOOL;
	U_VKL_48V : BOOL;
	U_VE1 : BOOL;
	U_VE2 : BOOL;
	U_VE3 : BOOL;
	U_VE4 : BOOL;
	U_VE5 : BOOL;
	U_VE6 : BOOL;
	U_VE7 : BOOL;
	U_VKL_24V : BOOL;
	U_DVN2 : BOOL;
	U_DVN1 : BOOL;
	U_VE10 : BOOL;
	U_VE11 : BOOL;
	U_OTKR_VM14 : BOOL;
	U_ZAKR_VM14 : BOOL;
	U_VE8 : BOOL;
	U_VE9 : BOOL;
END_VAR

PROCESS Initsializatsiya
	STATE Nachalo 
		TekushijRezhim := REZHIM_INITSIALIZATSII;
		TekushijEtap := ETAP_KIP;
		FlagPovtornojZagruzki := VKL;
		FP_MassaZatravlivaniya := 0.0;
		FP_MassaPerehodaZatravka_SHejka := 0.0;
		FP_MassaSHejki := 0.0;
		FP_MassaPerehodaSHejka_Konus := 0.0;
		FP_MassaKonusa := 0.0;
		FP_MassaPerehodaKonus_TSilindr := 0.0;
		FP_MassaStabilizatsiiTSilindra := 0.0;
		FP_MassaTSilindra := 0.0;
		FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
		FP_MassaObratnogoKonusa := 0.0;
		FP_DlinaZatravlivaniya := 0.0;
		FP_DlinaPerehodaZatravka_SHejka := 0.0;
		FP_DlinaSHejki := 0.0;
		FP_DlinaPerehodaSHejka_Konus := 0.0;
		FP_DlinaKonusa := 0.0;
		FP_DlinaPerehodaKonus_TSilindr := 0.0;
		FP_DlinaStabilizatsiiTSilindra := 0.0;
		FP_DlinaTSilindra := 0.0;
		FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
		FP_DlinaObratnogoKonusa := 0.0;
		KOORD_ZAT := KOORD_ZAT_NEOPREDELENA;
		KOORD_TIG := KOORD_TIG_NEOPREDELENA;
		Flag_KonetsTP := VYKL;
		FlagL_KZ_UR := VKL;
		FlagHur := VKL;
		FlagHur_DU := VKL;
		FlagHur_DV := VKL;
		FlagDkr := VKL;
		FlagDkr_TDD := VKL;
		FlagDkr_DV := VKL;
		FlagDTN := VKL;
		FlagDTR := VKL;
		FlagVPO := VKL;
		FlagRegulyatora_V_ZR := VYKL;
		FlagRegulyatora_X_ZR := VYKL;
		FlagRegulyatora_V_ZU := VYKL;
		FlagRegulyatora_X_ZU := VYKL;
		FlagRegulyatora_V_ZV := VYKL;
		FlagRegulyatora_X_ZV := VYKL;
		FlagRegulyatora_V_TR := VYKL;
		FlagRegulyatora_X_TR := VYKL;
		FlagRegulyatora_V_TU := VYKL;
		FlagRegulyatora_X_TU := VYKL;
		FlagRegulyatora_V_TV := VYKL;
		FlagRegulyatora_X_TV := VYKL;
		K_KVP_Z := VYKL;
		K_KNP_Z := VYKL;
		K_KVP_T := VYKL;
		K_KNP_T := VYKL;
		NP_REZH_ISPOLN_RA := NEPRERYVNO;
		NP_RADIUS_STENKI_TIGLYA := 219.5;
		NP_RADIUS_DNA_TIGLYA := 448.0;
		NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE := 82.0;
		_VOID_ := _FUNCTION_ + NP_RADIUS_STENKI_TIGLYA + NP_RADIUS_DNA_TIGLYA + NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE + KOEF_PLOTNOSTI_ZHD_SI;
		NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA := OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA;
		NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM := OTZHIG_DAVLENIE_PERED_OTZHIGOM;
		NP_OTZHIG_DELQTA_W_OTZHIGA := OTZHIG_DELQTA_W_OTZHIGA;
		NP_OTZHIG_DELQTA_T_OTZHIGA := OTZHIG_DELQTA_T_OTZHIGA;
		NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS := OTZHIG_DAVLENIE_OTZHIGA_MAKS;
		NP_OTZHIG_DAVLENIE_OTZHIGA_MIN := OTZHIG_DAVLENIE_OTZHIGA_MIN;
		NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA := OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA;
		NP_OTZHIG_VREMYA_OTZHIGA := OTZHIG_VREMYA_OTZHIGA;
		NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN := OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN;
		NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN := OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN;
		FlagLmonokristalla := VYKL;
		Flag_IP2K_K1 := VYKL;
		Flag_IP2K_K2 := VYKL;
		Flag_NalichiyaModulya0_IP2K_K1 := VYKL;
		Flag_NalichiyaModulya1_IP2K_K1 := VYKL;
		Flag_NalichiyaModulya2_IP2K_K1 := VYKL;
		Flag_NalichiyaModulya3_IP2K_K1 := VYKL;
		Flag_NalichiyaModulya4_IP2K_K1 := VYKL;
		Flag_NalichiyaModulya5_IP2K_K1 := VYKL;
		NP_TokZashityModulya_IP2K_K1 := 1000.0;
		NP_SkorostqIzmeneniya_W_IP2K_K1 := 64000.0;
		NP_MinimalqnoeKolichestvoModulej_IP2K_K1 := 6;
		NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE := 60.0;
		NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA := 80.0;
		NP_UstavkaPotokaOhlZHidkosti_IP2K_K1 := 25.0;
		NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1 := 30.0;
		NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1 := 70.0;
		NP_NizhnyayaGranitsaRiz_IP2K_K1 := 1000.0;
		NP_NizhnyayaGranitsaRn_IP2K_K1 := 0.015;
		NP_VerhnyayaGranitsaRn_IP2K_K1 := 0.035;
		Flag_AVD1 := VYKL;
		Flag_AVD2 := VYKL;
		T_NA_SRABATYVANIE_USTROJSTV_GVS := 10;
		ZADERZHKA_NA_RAZGRUZKU_TRAFIKA := 1;
		U_VE1 := ZAKR;
		U_VE2 := ZAKR;
		U_VE3 := ZAKR;
		U_VE4 := ZAKR;
		U_VE5 := ZAKR;
		U_VE6 := ZAKR;
		U_VE7 := ZAKR;
		U_VE8 := ZAKR;
		U_VE9 := ZAKR;
		U_VE10 := ZAKR;
		U_VE11 := ZAKR;
		U_OTKR_VM14 := VYKL;
		U_ZAKR_VM14 := VYKL;
		U_VKL_PTD := VYKL;
		U_VYK_PTD := VYKL;
		U_VKL_RV_PTD := VYKL;
		U_VKL_ASS := VYKL;
		U_VE12 := ZAKR;
		U_NVR1 := VYKL;
		U_NVR2 := VYKL;
		U_RAZBLOKIROVKA_VK_NK := VYKL;
		U_ZAKR_RRG := VYKL;
		U_OTKR_RRG := VYKL;
		U_VT3 := VYKL;
		U_VKL_48V := VYKL;
		U_TEST_DK := VYKL;
		U_DVN1 := VYKL;
		U_DVN2 := VYKL;
		FPGA3_N5 := VYKL;
		FPGA3_N6 := VYKL;
		FPGA3_N7 := VYKL;
		U_LAZERA_DP := VYKL;
		FPGA3_N9 := VYKL;
		FPGA3_N10 := VYKL;
		FPGA3_N11 := VYKL;
		FPGA3_N12 := VYKL;
		FPGA3_N13 := VYKL;
		FPGA3_N14 := VYKL;
		FPGA3_N15 := VYKL;
		FPGA3_N16 := VYKL;
		FPGA3_N17 := VYKL;
		FPGA3_N18 := VYKL;
		FPGA3_N19 := VYKL;
		FPGA3_N20 := VYKL;
		FPGA3_N21 := VYKL;
		FPGA3_N22 := VYKL;
		FPGA3_N23 := VYKL;
		U_VKL_24V := VYKL;
		RezhimIspolneniyaRA := PO_TERMINATORAM;
		TK_GlubokijVakuum_R2 := 0.01;
		TK_TotkachkiDopustimoe_T2doP2 := 30 * ODNA_MINUTA;
		TK_VremyaOtkachkiPosleOsushki_T5 := ODNA_MINUTA;
		TK_VremyaOtkachkiDopustimoe_T7 := 2 * ODNA_MINUTA;
		TK_CHisloTSiklovOsushki_Nts := 3;
		TK_VremyaProduvki_T3 := 10 * ODNA_MINUTA;
		TK_TotkachkiArgona_T4 := 20 * ODNA_MINUTA;
		TK_PredelDopRnkPosleKontrolyaNatek_R3 := 1.0;
		TK_REZERV_1 := 1.0;
		TK_Totgazovki_KontrNat := ODNA_MINUTA;
		TK_PeriodKontrolya_KontrNat := DESYATQ_MINUT;
		TK_DopustimoeNatekanie_KntrNat := 1000.0;
		TK_ZD_Qgaza_PPZ := 2000.0;
		TK_ZD_Pnk_PPZ := 12.0;
		TK_ZD_Wipn_K1_PPZ := 0.0;
		TK_ZD_Wipn_K2_PPZ := 0.0;
		TK_ZD_Tr_PPZ := 1420.0;
		TK_ZD_Vrosta_PPZ := 1.0;
		TK_ZD_Hur_PPZ := 0.0;
		TK_ZD_Dkr_PPZ := 150.0;
		TK_ZD_VzR_PPZ := 0.0;
		TK_ZD_VzU_PPZ := 0.0;
		TK_ZD_Xz_PPZ := 0.0;
		TK_ZD_Wz_PPZ := 0.0;
		TK_ZD_Wz_UGOL_PPZ := 0.0;
		TK_ZD_VtR_PPZ := 0.0;
		TK_ZD_VtU_PPZ := 0.0;
		TK_ZD_Xt_PPZ := 0.0;
		TK_ZD_Wt_PPZ := 0.0;
		TK_ZD_Wt_UGOL_PPZ := 0.0;
		TK_Qgaza_PodgStabRaspl := 2000.0;
		TK_Pnk_PodgStabRaspl := 12.0;
		TK_Hur_PodgStabRaspl := 0.0;
		TK_Rezhim_StabRaspl := STABILIZATSIYA_PO_MOSHNOSTI;
		TK_Vremya_StabRaspl := TRI_CHASA;
		TK_Wt_PodgStabRaspl := -10.0;
		TK_Wipn_K1_PodgStabRaspl := 55000.0;
		TK_Tr_StabRaspl := 1450.0;
		TK_TnOzh_StabRasp := 1700.0;
		TK_VremyaOsred_Tn_StabRaspl := N_IZMERENIJ_TN_DLYA_RASCHETA_POPRAVKI_STAB;
		TK_RasstoyanieDoRasplava_Lpp := 50.0;
		TK_VzDvizheniya_kRasplavu_Vpp := 10.0;
		TK_PopravkaTn_SHejka := 0.0;
		TK_DkrOzhidaemyj_SHejka := 8.0;
		TK_Popr_kTn_poDkro_SHejka := 0.01;
		TK_PopravkaTn_Konus := 0.0;
		TK_PorogovayaLkr_TSilindr := 1700.0;
		ZD_Qgaza := 0.0;
		ZD_Pnk := 12.0;
		ZD_Wipn_K1 := 0.0;
		ZD_Wipn_K2 := 0.0;
		ZD_Baza_REG_ROSTA := 0.0;
		ZD_Baza_Tn_dlya_REG_ROSTA_Predydushee := 0.0;
		ZD_Tn := MINIMALQNOE_ZADANIE_REG_TN;
		ZD_Tr := MINIMALQNOE_ZADANIE_REG_TR;
		ZD_Vrosta := MINIMALQNOE_ZADANIE_REG_ROSTA;
		ZD_Hur := 0.0;
		ZD_Dkr := MINIMALQNOE_ZADANIE_REG_DK;
		ZD_VzR := 0.0;
		ZD_VzU := 0.0;
		ZD_Xz := 0.0;
		ZD_Wz := 0.0;
		ZD_VtR := 0.0;
		ZD_VtU := 0.0;
		ZD_Xt := 0.0;
		ZD_Wt := 0.0;
		ZD_VzR_PRIVOD := 0.0;
		ZD_VzU_PRIVOD := 0.0;
		ZD_Wz_PRIVOD := 0.0;
		ZD_VtR_PRIVOD := 0.0;
		ZD_VtU_PRIVOD := 0.0;
		ZD_Wt_PRIVOD := 0.0;
		NP_FlagRaschetaHur_poDU := VKL;
		NP_FlagRaschetaHur_poDV := VKL;
		NP_FlagRaschetaDkr_poTDD := VKL;
		NP_FlagRaschetaDkr_poDV := VKL;
		NP_Tizmereniya_Dkr_DV := ODNA_SEKUNDA;
		NP_Lz_OT_KVP_DO_DP_Lppz := 1500.0;
		NP_Lz_OT_KVP_DO_STYKA_NK := 2000.0;
		NP_L_OT_STYKA_NK_DO_PNUR_L1 := 514.0;
		NP_Lz_OT_KVP_DO_KNP := 2900.0;
		TK_MnachalqnojZagruzki := 60.09;
		NP_Kdv := 1.0;
		NP_Mzatravkoderzhatelya := 0.0;
		OP_Mzatravki := 0.0;
		NP_Mtrosa := 0.0;
		OP_Lsumm_TSilindrov := 0.0;
		OP_Tsumm_TSilindrov := 0;
		OP_Msumm_TSilindrov := 0.0;
		OP_Lzatravki := 0.0;
		FP_GlubinaRasplava := 10.0;
		OP_Dzerkala_rasplava := 436.6;
		FP_Lmonokristalla := 0.1;
		NP_Lt_OT_KNP_DO_KVP := 425.0;
		NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR := 400.0;
		NP_ObqemVakPolosti_V := 1300.0;
		NP_DavlenieVklyucheniyaDVN_P1 := 3.0;
		NP_KontrolqnoeVremyaDostizheniyaP1_T1 := DESYATQ_MINUT;
		NP_Patmosf := 700.00;
		NP_VremyaPerehodnogoProtsessaQgaza := ODNA_MINUTA;
		NP_PogreshnostqQgaza := 75.0;
		NP_KoefA_Pnk := 0.075;
		NP_KoefV_Pnk := 0.01;
		NP_Ppor := 0.05;
		NP_KOEF_NA_OTKR := 3000;
		NP_KOEF_NA_ZAKR := 3000;
		NP_VremyaPerehodnogoProtsessaPnk := 7 * ODNA_MINUTA;
		NP_VremyaPerehodnogoProtsessaWptd := DVE_MINUTY;
		NP_Kp_Wptd := -0.017;
		NP_TipIPN := IPN_PTD;
		NP_Pauza_Wptd := ODNA_SEKUNDA;
		NP_PogreshnostqWipn_K1 := 4000.0;
		NP_Iptd_MAH := 2400.0;
		NP_Wipn_K1_MAH := 180000.0;
		NP_DeltaW_Razogreva := 10.0;
		NP_DeltaVremeniRazogreva := 3;
		NP_Tn_MAX := 2200.0;
		NP_Kp_Tn := 50.0;
		NP_Kd_Tn := 0.0;
		NP_Ki_Tn := 0.0;
		NP_Kz_Tn := 0.0;
		NP_VremyaPerehodnogoProtsessaTn := 7 * ODNA_MINUTA;
		NP_PogreshnostqTn := 3.0;
		NP_Pauza_Tn := DESYATQ_SEKUND;
		NP_Kp_Tr := 1.0;
		NP_Kd_Tr := 0.0;
		NP_Ki_Tr := 0.0;
		NP_Kz_Tr := 0.0;
		NP_Pauza_Tr := DESYATQ_MINUT;
		NP_Tr_MAX := 1500.0;
		NP_VremyaPerehodnogoProtsessaTr := 3 * DESYATQ_MINUT;
		NP_PogreshnostqTr := 5.0;
		NP_DeltaTr_MAX := 2.0;
		NP_MIN_DU_Hur := 0.5;
		NP_MAX_DU_Hur := 3.0;
		NP_MIN_DUDD_Hur := 0.5;
		NP_MAX_DUDD_Hur := 3.0;
		NP_Kp_DU_Hur := -0.2;
		NP_Kp_DUDD_Hur := -0.04;
		NP_PredupreditelqnyjHur := 1.5;
		NP_AvarijnayaOshibkaHur := 3.1;
		NP_PopravkaVtR_Nur := 0.0;
		NP_Kp_Dkr := 0.1;
		NP_Kd_Dkr := 0.0;
		NP_Ki_Dkr := 0.0;
		NP_Kz_Dkr := 0.0;
		NP_Dkr_MAX := 250.0;
		NP_DeltaVzRS_MAH := 2.0;
		NP_VremyaPerehodnogoProtsessaDkr := 30 * ODNA_MINUTA;
		NP_PogreshnostqDkr := 1.5;
		NP_Pauza_Dkr := DESYATQ_SEKUND;
		NP_Kp_Vrosta := 0.0;
		NP_Kd_Vrosta := 0.0;
		NP_Ki_Vrosta := 0.1;
		NP_Kz_Vrosta := 0.0;
		NP_Pauza_REG_ROSTA := DESYATQ_MINUT;
		NP_Pauza_Vrosta := ODNA_SEKUNDA;
		NP_VremyaOsredneniyaVzVrosta := DESYATQ_MINUT / ODNA_SEKUNDA;
		NP_VzR_MAX := 5.0;
		NP_DeltaTn_MAX := 0.1;
		NP_VremyaPerehodnogoProtsessaVrosta := ODIN_CHAS;
		NP_PogreshnostqVrosta := 0.1;
		NP_POPRAVKA_K_TDD_TSILINDR := 0.0;
		NP_POPRAVKA_K_TDD_SHEJKA := 0.0;
		NP_Tsm_DTN := 0.0;
		NP_Tsm_DTR := 0.0;
		NP_VremyaOsredneniya_DTN := 1;
		NP_VremyaOsredneniya_DTR := 1;
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_;
		NP_Nominalqnyj_Koef_V_ZR := 0.0001395708;
		NP_Nominalqnyj_Koef_X_ZR := 1.0;
		NP_Nominalqnyj_Koef_V_ZU := 0.01216672;
		NP_Nominalqnyj_Koef_X_ZU := 0.0314453125;
		NP_Koef_V_ZR := 0.0001395708;
		NP_Koef_X_ZR := 1.0;
		NP_Koef_V_ZU := 0.01216672;
		NP_Koef_X_ZU := 0.0314453125;
		START PROCESS UstanovkaSvyaziS_PIV_PoVklyucheniyuPitaniya;
		SET NEXT;
	END_STATE
	
	STATE ProverkaPodklyucheniyaPIV 
		IF (PROCESS UstanovkaSvyaziS_PIV_PoVklyucheniyuPitaniya IN STATE STOP) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ProverkaVklyucheniya24_48V 
		SET NEXT;
	END_STATE
	
	STATE ZaprosInitsializatsii 
		IF (_FUNCTION_ + ZAPROS_INITSIALIZATSII_PK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE NachaloRaboty 
		START PROCESS SNYATIE_DANNYH_S_ATSP;
		START PROCESS ZAPISQ_DANNYH_V_TSAP;
		START PROCESS ParirovaniePomeh_VE1;
		START PROCESS ParirovaniePomeh_VE2;
		START PROCESS REGULYATOR_TRAFIKA;
		START PROCESS KontrolqPitaniyaSistemyIBP;
		START PROCESS Kontrolq220naVhodeIBP;
		START PROCESS KontrolqResursovIBP;
		START PROCESS Blokirovka_VK_NK;
		START PROCESS KontrolqUslovijRabotyIPN;
		START PROCESS KontrolqOtmenyPoKnopke;
		START PROCESS OpredelenieKoordinatyZatravki;
		START PROCESS OpredelenieKoordinatyTiglya;
		START PROCESS IzmerenieNatekaniya;
		START PROCESS KontrolqIzmeneniya_OP_Lsumm_TSilindrov;
		START PROCESS KontrolqIzmeneniya_OP_Msumm_TSilindrov;
		START PROCESS KontrolqIzmeneniya_OP_Tsumm_TSilindrov;
		START PROCESS KontrolqMassI_Dlin;
		START PROCESS RaschetFP_Dkr;
		START PROCESS RaschetSkorostiRostaDiametra;
		START PROCESS RaschetFP_Dkr_DV;
		START PROCESS RaschetFP_Hur_DV;
		START PROCESS RaschetFP_Hur;
		START PROCESS ZapuskProtsessovKontrolyaStykovok;
		START PROCESS KontrolqObnovleniyaSostoyaniyaIspolnitelqnyhUstrojstv;
		START PROCESS ZapuskProtsessovKontrolyaIzmeneniyaZadanij;
		START PROCESS CHtenieFaktParametrov_s_Datchikov_i_Privodov;
		START PROCESS RaschetRasstoyaniyaZatravka_Rasplav;
		START PROCESS ZapuskProtsessovKontrolyaIzmeneniyaFaktParametrov;
		START PROCESS KontrolqSostoyaniyaRegulyatorov;
		START PROCESS MonitoringStatusaKanalov;
		START PROCESS MonitoringSistemnyhOshibok;
		START PROCESS ZapuskProtsessovVosstanovleniyaSvyazi;
		START PROCESS ZapuskObrabotkiKomandOtUstrojstv;
		SET NEXT;
	END_STATE
	
	STATE ZapuskRR 
		START PROCESS RezhimNachalqnayaInitsializatsiya;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS TestDatchikaKasaniya
	VAR
		FlagVozvrata_vKVP : BOOL;
		FlagOshibki : BOOL;
	END_VAR
	
	STATE Nachalo 
		IF (FP_Xz >= -360.0) THEN
			FlagVozvrata_vKVP := VKL;
			ZD_Xz := -400.0;
			START PROCESS ZAT_UK;
			SET NEXT;
		ELSE 
			FlagVozvrata_vKVP := VYKL;
			SET STATE ZapuskTesta;
		END_IF
	END_STATE
	
	STATE KontrolqVyezda 
		IF (PROCESS ZAT_UK IN STATE INACTIVE) THEN
			IF (PROCESS ZAT_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskTesta 
		STOP PROCESS KontrolqSostoyaniyaDatchikaKasaniya;
		U_TEST_DK := VKL;
		SET NEXT;
	END_STATE
	
	STATE Pauza_dlya_DK 
		TIMEOUT DVE_SEKUNDY THEN
			SET STATE TestDK;
		END_TIMEOUT
	END_STATE
	
	STATE TestDK 
		IF (K_DATCHIKA_KASANIYA) THEN
			FlagOshibki := VYKL;
			IF (_FUNCTION_ + PK_PIV_DK_V_NORME) THEN
				SET NEXT;
			END_IF
		ELSE 
			FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OSHIBKA_DK) THEN
				SET NEXT;
			END_IF
		END_IF
		U_TEST_DK := VYKL;
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE ZaezdNaKVP 
		IF (FlagVozvrata_vKVP = VKL) THEN
			START PROCESS ZAT_KVP;
			SET NEXT;
		ELSE 
			SET STATE Konets;
		END_IF
	END_STATE
	
	STATE KontrolqVozvratavKVP 
		IF (PROCESS ZAT_KVP IN STATE INACTIVE) THEN
			IF (PROCESS ZAT_KVP IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Konets 
		START PROCESS KontrolqSostoyaniyaDatchikaKasaniya;
		IF (FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS SNYATIE_DANNYH_S_ATSP
	STATE Nachalo LOOPED 
		_VOID_ := _FUNCTION_;
		IF (NP_TipIPN = IPN_PTD) THEN
			FP_Iipn_K1 := _FUNCTION_ + NOMER_KANALA_ATSP_FP_Iptd;
			FP_Uipn_K1 := _FUNCTION_ + NOMER_KANALA_ATSP_FP_Uptd;
			FP_Wipn_K1 := FP_Uipn_K1 * FP_Iipn_K1;
			IF (FP_Iipn_K1 > 1.0) THEN
				FP_Ripn_K1 := (FP_Uipn_K1 / FP_Iipn_K1);
			ELSE 
				FP_Ripn_K1 := 0.0;
			END_IF
		END_IF
		FP_Qgaza := _FUNCTION_ + NOMER_KANALA_ATSP_FP_Qgaza;
		IF ((TekushijEtap <= ETAP_RABOCHEE_VAKUUMIROVANIE) OR (TekushijEtap >= ETAP_TP_OHL_KRISTALLA)) THEN
			U_VT3 := VKL;
		ELSE 
			U_VT3 := VYKL;
		END_IF
		FP_Pnk := _FUNCTION_ + NOMER_KANALA_ATSP_NK_0_45;
		FP_Pvk := _FUNCTION_ + NOMER_KANALA_ATSP_Rvk;
		IF (NOT K_ZAKR_ZATVOR_V) THEN
			IF (FP_Pnk > 43.0) THEN
				FP_Pnk := FP_Pvk;
			ELSE 
				IF (FP_Pnk < 1.0) THEN
					FP_Pnk := _FUNCTION_ + NOMER_KANALA_ATSP_VK_0_1;
				END_IF
				FP_Pvk := FP_Pnk;
			END_IF
		ELSE 
			IF (FP_Pvk < 1.0) THEN
				FP_Pvk := _FUNCTION_ + NOMER_KANALA_ATSP_VK_0_1;
			END_IF
		END_IF
		FP_Pavd1 := _FUNCTION_ + NOMER_KANALA_ATSP_FP_Ravd1;
		FP_Pavd2 := _FUNCTION_ + NOMER_KANALA_ATSP_FP_Ravd2;
		FP_Mmonokristalla := NP_Kdv * _FUNCTION_ + NOMER_KANALA_ATSP_PokazaniyaDatchikaVesa - (NP_Mzatravkoderzhatelya + OP_Mzatravki - NP_Mtrosa * FP_Xz / NP_Lz_OT_KVP_DO_KNP);
		FP_Mkremniya_v_tigle := TK_MnachalqnojZagruzki - FP_Mmonokristalla;
		FP_Tvk1 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk1;
		FP_Tvk2 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk2;
		FP_Tvk3 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk3;
		FP_Tvk4 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk4;
		FP_Tvk5 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk5;
		FP_Tvk6 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk6;
		FP_Tvk7 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk7;
		FP_Tvk8 := _FUNCTION_ + NOMER_KANALA_ATSP_Tvk8;
		FP_Udk := _FUNCTION_ + NOMER_KANALA_ATSP_Udk;
	END_STATE
	
END_PROCESS

PROCESS ParirovaniePomeh_VE1
	STATE Nachalo 
		IF (K_VE1 <> K_VE1_ISH) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Proverka2 
		IF (K_VE1 <> K_VE1_ISH) THEN
			SET NEXT;
		ELSE 
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Proverka3 
		IF (K_VE1 <> K_VE1_ISH) THEN
			K_VE1 := K_VE1_ISH;
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ParirovaniePomeh_VE2
	STATE Nachalo 
		IF (K_VE2 <> K_VE2_ISH) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Proverka2 
		IF (K_VE2 <> K_VE2_ISH) THEN
			SET NEXT;
		ELSE 
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Proverka3 
		IF (K_VE2 <> K_VE2_ISH) THEN
			K_VE2 := K_VE2_ISH;
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS CHtenieFaktParametrov_s_Datchikov_i_Privodov
	STATE Nachalo 
		FP_Hur_DU := _FUNCTION_;
		FP_STAT := _FUNCTION_;
		FP_PEAKW := _FUNCTION_;
		FP_PEAKC := _FUNCTION_;
		FP_RANGE := _FUNCTION_;
		FP_DISP := _FUNCTION_;
		FP_MEAN := _FUNCTION_;
		FP_LASER := _FUNCTION_;
		FP_Tdtr := _FUNCTION_;
		FP_Tr := _FUNCTION_ + NP_VremyaOsredneniya_DTR + FP_Tdtr + NP_Tsm_DTR;
		FP_PSWdtr := _FUNCTION_;
		FP_Tdtn := _FUNCTION_;
		FP_Tn := _FUNCTION_ + NP_VremyaOsredneniya_DTN + FP_Tdtn + NP_Tsm_DTN;
		FP_PSWdtn := _FUNCTION_;
		FP_I_ZR := _FUNCTION_;
		FP_I_ZU := _FUNCTION_;
		FP_I_ZV := _FUNCTION_;
		FP_I_TR := _FUNCTION_;
		FP_I_TU := _FUNCTION_;
		FP_I_TV := _FUNCTION_;
		FP_VzR := _FUNCTION_;
		FP_VzU := _FUNCTION_;
		IF (FlagRegulyatora_V_ZR = VKL) THEN
			FP_Vz := FP_VzR;
			ZD_Vz := ZD_VzR;
		ELSE 
			FP_Vz := FP_VzU;
			ZD_Vz := ZD_VzU;
		END_IF
		FP_Xz := _FUNCTION_;
		FP_Wz := _FUNCTION_;
		FP_Wz_UGOL := _FUNCTION_;
		FP_VtR := _FUNCTION_;
		FP_VtU := _FUNCTION_;
		IF (FlagRegulyatora_V_TR = VKL) THEN
			FP_Vt := FP_VtR;
			ZD_Vt := ZD_VtR;
		ELSE 
			FP_Vt := FP_VtU;
			ZD_Vt := ZD_VtU;
		END_IF
		FP_Xt := _FUNCTION_;
		FP_Wt := _FUNCTION_;
		FP_Wt_UGOL := _FUNCTION_;
		FP_Dkr_TDD := _FUNCTION_;
		FP_DeltaX := _FUNCTION_;
		FP_DeltaY := _FUNCTION_;
		IF (NP_TipIPN = IPN_IP2K) THEN
			FP_PotokOhlazhdVody_IP2K_K1 := _FUNCTION_;
			FP_TemperaturaOhlNaVhode_IP2K_K1 := _FUNCTION_;
			FP_TemperaturaOhlNaVyhode_IP2K_K1 := _FUNCTION_;
			FP_Riz_IP2K_K1 := _FUNCTION_;
			FP_TokModulya0_IP2K_K1 := _FUNCTION_;
			FP_TokModulya1_IP2K_K1 := _FUNCTION_;
			FP_TokModulya2_IP2K_K1 := _FUNCTION_;
			FP_TokModulya3_IP2K_K1 := _FUNCTION_;
			FP_TokModulya4_IP2K_K1 := _FUNCTION_;
			FP_TokModulya5_IP2K_K1 := _FUNCTION_;
			FP_TempModulya0_IP2K_K1 := _FUNCTION_;
			FP_TempModulya1_IP2K_K1 := _FUNCTION_;
			FP_TempModulya2_IP2K_K1 := _FUNCTION_;
			FP_TempModulya3_IP2K_K1 := _FUNCTION_;
			FP_TempModulya4_IP2K_K1 := _FUNCTION_;
			FP_TempModulya5_IP2K_K1 := _FUNCTION_;
			FP_U380_IP2K_K1 := _FUNCTION_;
			FP_Wipn_K1 := _FUNCTION_;
			FP_Iipn_K1 := _FUNCTION_;
			FP_Ripn_K1 := _FUNCTION_ / 1000.0;
			FP_Uipn_K1 := _FUNCTION_;
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS REGULYATOR_TRAFIKA
	STATE Nachalo LOOPED 
		ZADERZHKA_NA_RAZGRUZKU_TRAFIKA := _FUNCTION_ / 5 + 1;
	END_STATE
	
END_PROCESS

PROCESS VYK_BLOKIROVKU_VK_NK
	STATE Nachalo 
		STOP PROCESS Blokirovka_VK_NK;
		U_RAZBLOKIROVKA_VK_NK := VKL;
		TIMEOUT ODNA_MINUTA THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieBlokirovki 
		U_RAZBLOKIROVKA_VK_NK := VYKL;
		START PROCESS Blokirovka_VK_NK;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VklyucheniePitaniya24_48V
	STATE Nachalo 
		IF (K_PROGR_VKL_24V_48V = VKL) THEN
			U_VKL_24V := VKL;
			SET STATE TajmAutNaVklyuchenie48V;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshenieOperatoru 
		IF (_FUNCTION_ + OZHIDANIE_PROGRAMMNOGO_24_48V) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE TajmautMezhduSoobsheniyami 
		IF (K_PROGR_VKL_24V_48V = VKL) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TajmAutNaVklyuchenie48V 
		TIMEOUT ODNA_SEKUNDA THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE Vklyuchenie48V 
		U_VKL_48V := VKL;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqPitaniya24_48V
	STATE Nachalo 
		IF (K_PROGR_VKL_24V_48V = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshenieOperatoru 
		IF (_FUNCTION_ + OZHIDANIE_PROGRAMMNOGO_24_48V) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TajmautMezhduSoobsheniyami 
		IF (K_PROGR_VKL_24V_48V = VKL) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS VyklyucheniePitaniya24_48V
	STATE Nachalo 
		IF (K_PROGR_VKL_24V_48V = VKL) THEN
			U_VKL_48V := VYKL;
			SET STATE TajmAutNaVyklyuchenie24V;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshenieOperatoru 
		IF (_FUNCTION_ + OZHIDANIE_PROGRAMMNOGO_24_48V) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TajmautMezhduSoobsheniyami 
		IF (K_PROGR_VKL_24V_48V = VKL) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TajmAutNaVyklyuchenie24V 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE Vyklyuchenie24V;
		END_TIMEOUT
	END_STATE
	
	STATE Vyklyuchenie24V 
		U_VKL_24V := VYKL;
		STOP;
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS UstanovkaSvyaziS_PIV_PoVklyucheniyuPitaniya
	STATE Nachalo 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + VOSSTANOVLENIE_SVYAZI_S_PIV;
		SET NEXT;
	END_STATE
	
	STATE TajmautNaFiksatsiyuOshibki 
		TIMEOUT TAJMAUT_NA_DIAGNOSTIKU_RAZRYVA_SVYAZI_S_PIV THEN
			SET STATE ProverkaSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSvyazi 
		IF (_FUNCTION_ = VKL) THEN
			STOP;
		ELSE 
			SET STATE Nachalo;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RezhimNachalqnayaInitsializatsiya
	STATE Nachalo 
		TekushijRezhim := REZHIM_INITSIALIZATSII;
		SET NEXT;
	END_STATE
	
	STATE CHtenieKolqtsevogoBufera 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				REZHIM_KRP:
					SET STATE ZapreshennayaKomanda;
				OTMENA_OTMENY:
					START PROCESS OTMENA_OTMENY;
				KONETS_INITSIALIZATSII,
				REZHIM_RR:
					FlagPovtornojZagruzki := VYKL;
					START PROCESS RezhimRR;
					STOP;
				REZHIM_RA:
					SET STATE ZapreshennayaKomanda;
				REZHIM_FORSAZH:
					SET STATE ZapreshennayaKomanda;
				REZHIM_KONETS_RABOTY:
					SET STATE ZapreshennayaKomanda;
				VKL_VPO:
					SET STATE ZapreshennayaKomanda;
				VYK_VPO:
					SET STATE ZapreshennayaKomanda;
				VYK_BLOKIROVKU_VK_NK:
					START PROCESS VYK_BLOKIROVKU_VK_NK;
				VKL_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS:
					T_NA_SRABATYVANIE_USTROJSTV_GVS := 100;
				VYK_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS:
					T_NA_SRABATYVANIE_USTROJSTV_GVS := 10;
				ELSE
					IF ((KodSobytiya_ot_PIV >= KOMANDA_SMENY_ETAPA_1) AND (KodSobytiya_ot_PIV <= KOMANDA_SMENY_ETAPA_N)) THEN
						TekushijEtap := KodSobytiya_ot_PIV;
					ELSE 
						IF ((KodSobytiya_ot_PIV >= KOMANDA_RR_1_GVS) AND (KodSobytiya_ot_PIV <= KOMANDA_RR_N_GVS)) THEN
							START PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV;
							SET STATE KontrolqVypolneniyaUK;
						ELSE 
							IF ((KodSobytiya_ot_PIV >= IZMN_TK_1) AND (KodSobytiya_ot_PIV <= IZMN_TK_N)) THEN
								START PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV;
								SET STATE KontrolqIzmeneniyaTK;
							ELSE 
								IF ((KodSobytiya_ot_PIV >= IZMN_NP_1) AND (KodSobytiya_ot_PIV <= IZMN_NP_N)) THEN
									START PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV;
									SET STATE KontrolqIzmeneniyaNP;
								ELSE 
									IF ((KodSobytiya_ot_PIV >= IZMN_ZD_1) AND (KodSobytiya_ot_PIV <= IZMN_ZD_N)) THEN
										START PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV;
										SET STATE KontrolqIzmeneniyaZD;
									ELSE 
										IF ((KodSobytiya_ot_PIV >= KOMANDA_1_REGULYATORY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_REGULYATORY)) THEN
											START PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV;
											SET STATE KontrolqVypolneniyaKR;
										ELSE 
											IF ((KodSobytiya_ot_PIV >= KOMANDA_1_KOORDINATY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_KOORDINATY)) THEN
												IF ((KodSobytiya_ot_PIV = ZAT_KNP) OR (KodSobytiya_ot_PIV = ZAT_DP) OR (KodSobytiya_ot_PIV = ZAT_KVP) OR (KodSobytiya_ot_PIV = TIG_KNP) OR (KodSobytiya_ot_PIV = TIG_PVK) OR (KodSobytiya_ot_PIV = TIG_KVP)) THEN
													SET STATE ZapreshennayaKomanda;
												ELSE 
													START PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV;
													SET STATE KontrolqVypolneniyaKK;
												END_IF
											ELSE 
												IF ((KodSobytiya_ot_PIV >= KOMANDA_1_DATCHIKI) AND (KodSobytiya_ot_PIV <= KOMANDA_N_DATCHIKI)) THEN
													START PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV;
													SET STATE KontrolqVypolneniyaKD;
												ELSE 
													IF ((KodSobytiya_ot_PIV >= KOMANDA_1_SISTEMNAYA) AND (KodSobytiya_ot_PIV <= KOMANDA_N_SISTEMNAYA)) THEN
														START PROCESS ObrabotkaSistemnojKomandy_ot_PIV;
														SET STATE KontrolqVypolneniyaSK;
													ELSE 
														IF ((KodSobytiya_ot_PIV >= IZMN_NP_GLUBINA_TIGLYA) AND (KodSobytiya_ot_PIV < (IZMN_NP_GLUBINA_TIGLYA + CHISLO_TOCHEK_TIGLYA))) THEN
															IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_GLUBINA_TIGLYA + _FUNCTION_) THEN
																SET STATE OshibkaInitsializatsiiGeometriiTiglya;
															END_IF
														ELSE 
															IF ((KodSobytiya_ot_PIV >= IZMN_NP_DIAMETR_TIGLYA) AND (KodSobytiya_ot_PIV < (IZMN_NP_DIAMETR_TIGLYA + CHISLO_TOCHEK_TIGLYA))) THEN
																IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_DIAMETR_TIGLYA + _FUNCTION_) THEN
																	SET STATE OshibkaInitsializatsiiGeometriiTiglya;
																END_IF
															ELSE 
																IF ((KodSobytiya_ot_PIV >= IZMN_NP_VES_RASPLAVA_V_TIGLE) AND (KodSobytiya_ot_PIV < (IZMN_NP_VES_RASPLAVA_V_TIGLE + CHISLO_TOCHEK_TIGLYA))) THEN
																	IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_VES_RASPLAVA_V_TIGLE + _FUNCTION_) THEN
																		SET STATE OshibkaInitsializatsiiGeometriiTiglya;
																	END_IF
																ELSE 
																	SET STATE NekorrektnoeSobytie;
																END_IF
															END_IF
														END_IF
													END_IF
												END_IF
											END_IF
										END_IF
									END_IF
								END_IF
							END_IF
						END_IF
					END_IF
			END_CASE
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaUK 
		IF (PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaTK 
		IF (PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaNP 
		IF (PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaZD 
		IF (PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKR 
		IF (PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKK 
		IF (PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKD 
		IF (PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaSK 
		IF (PROCESS ObrabotkaSistemnojKomandy_ot_PIV IN STATE INACTIVE) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE ZapreshennayaKomanda 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_ZAPRESHENNAYA_KOMANDA_REZHIMA_INITSIALIZATSII + KodSobytiya_ot_PIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaInitsializatsiiGeometriiTiglya 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_INITSIALIZATSII_GEOMETRII_TIGLYA + KodSobytiya_ot_PIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS RezhimRR
	STATE Nachalo 
		TekushijRezhim := REZHIM_RR;
		START PROCESS VKL_VPO;
		SET NEXT;
	END_STATE
	
	STATE CHtenieKolqtsevogoBufera 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				REZHIM_KRP:
					START PROCESS RezhimKRP;
					STOP;
				REZHIM_OTZHIG_TU:
					START PROCESS RezhimOTZHIG;
					TekushijRezhim := REZHIM_OTZHIG_TU;
					STOP;
				REZHIM_DVK:
					START PROCESS RezhimDVK;
					TekushijRezhim := REZHIM_DVK;
					STOP;
				OTMENA_OTMENY:
					START PROCESS OTMENA_OTMENY;
				KONETS_INITSIALIZATSII,
				REZHIM_RR:
					TekushijRezhim := REZHIM_RR;
				REZHIM_RA:
					START PROCESS VYK_VPO;
					START PROCESS RezhimRA;
					STOP;
				REZHIM_FORSAZH:
					START PROCESS RezhimFORSAZH;
					STOP;
				REZHIM_KONETS_RABOTY:
					START PROCESS KonetsRaboty;
				PK_PIV_NORMALQNYJ_KONETS_TP:
					Flag_KonetsTP := PK_PIV_NORMALQNYJ_KONETS_TP;
					SET STATE AnalizKontsaTP;
				PK_PIV_KONETS_TP_PO_OSHIBKE:
					Flag_KonetsTP := PK_PIV_KONETS_TP_PO_OSHIBKE;
					SET STATE AnalizKontsaTP;
				VKL_VPO:
					START PROCESS VKL_VPO;
				VYK_VPO:
					START PROCESS VYK_VPO;
				VYK_BLOKIROVKU_VK_NK:
					START PROCESS VYK_BLOKIROVKU_VK_NK;
				VKL_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS:
					T_NA_SRABATYVANIE_USTROJSTV_GVS := 100;
				VYK_OTLADOCHNYJ_REZHIM_KONTROLYA_GVS:
					T_NA_SRABATYVANIE_USTROJSTV_GVS := 10;
				ELSE
					IF ((KodSobytiya_ot_PIV >= KOMANDA_SMENY_ETAPA_1) AND (KodSobytiya_ot_PIV <= KOMANDA_SMENY_ETAPA_N)) THEN
						TekushijEtap := KodSobytiya_ot_PIV;
					ELSE 
						IF ((KodSobytiya_ot_PIV >= KOMANDA_RR_1_GVS) AND (KodSobytiya_ot_PIV <= KOMANDA_RR_N_GVS)) THEN
							START PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV;
							SET STATE KontrolqVypolneniyaUK;
						ELSE 
							IF ((KodSobytiya_ot_PIV >= IZMN_TK_1) AND (KodSobytiya_ot_PIV <= IZMN_TK_N)) THEN
								START PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV;
								SET STATE KontrolqIzmeneniyaTK;
							ELSE 
								IF ((KodSobytiya_ot_PIV >= IZMN_NP_1) AND (KodSobytiya_ot_PIV <= IZMN_NP_N)) THEN
									START PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV;
									SET STATE KontrolqIzmeneniyaNP;
								ELSE 
									IF ((KodSobytiya_ot_PIV >= IZMN_ZD_1) AND (KodSobytiya_ot_PIV <= IZMN_ZD_N)) THEN
										START PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV;
										SET STATE KontrolqIzmeneniyaZD;
									ELSE 
										IF ((KodSobytiya_ot_PIV >= KOMANDA_1_REGULYATORY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_REGULYATORY)) THEN
											START PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV;
											SET STATE KontrolqVypolneniyaKR;
										ELSE 
											IF ((KodSobytiya_ot_PIV >= KOMANDA_1_KOORDINATY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_KOORDINATY)) THEN
												START PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV;
												SET STATE KontrolqVypolneniyaKK;
											ELSE 
												IF ((KodSobytiya_ot_PIV >= KOMANDA_1_DATCHIKI) AND (KodSobytiya_ot_PIV <= KOMANDA_N_DATCHIKI)) THEN
													START PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV;
													SET STATE KontrolqVypolneniyaKD;
												ELSE 
													IF ((KodSobytiya_ot_PIV >= KOMANDA_1_SISTEMNAYA) AND (KodSobytiya_ot_PIV <= KOMANDA_N_SISTEMNAYA)) THEN
														START PROCESS ObrabotkaSistemnojKomandy_ot_PIV;
														SET STATE KontrolqVypolneniyaSK;
													ELSE 
														IF ((KodSobytiya_ot_PIV >= IZMN_NP_GLUBINA_TIGLYA) AND (KodSobytiya_ot_PIV < (IZMN_NP_GLUBINA_TIGLYA + CHISLO_TOCHEK_TIGLYA))) THEN
															IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_GLUBINA_TIGLYA + _FUNCTION_) THEN
																SET STATE OshibkaInitsializatsiiGeometriiTiglya;
															END_IF
														ELSE 
															IF ((KodSobytiya_ot_PIV >= IZMN_NP_DIAMETR_TIGLYA) AND (KodSobytiya_ot_PIV < (IZMN_NP_DIAMETR_TIGLYA + CHISLO_TOCHEK_TIGLYA))) THEN
																IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_DIAMETR_TIGLYA + _FUNCTION_) THEN
																	SET STATE OshibkaInitsializatsiiGeometriiTiglya;
																END_IF
															ELSE 
																IF ((KodSobytiya_ot_PIV >= IZMN_NP_VES_RASPLAVA_V_TIGLE) AND (KodSobytiya_ot_PIV < (IZMN_NP_VES_RASPLAVA_V_TIGLE + CHISLO_TOCHEK_TIGLYA))) THEN
																	IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_VES_RASPLAVA_V_TIGLE + _FUNCTION_) THEN
																		SET STATE OshibkaInitsializatsiiGeometriiTiglya;
																	END_IF
																ELSE 
																	SET STATE NekorrektnoeSobytie;
																END_IF
															END_IF
														END_IF
													END_IF
												END_IF
											END_IF
										END_IF
									END_IF
								END_IF
							END_IF
						END_IF
					END_IF
			END_CASE
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaUK 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaTK 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaNP 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaZD 
		IF (NOT (PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKR 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKK 
		IF (NOT (PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKD 
		IF (NOT (PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaSK 
		IF (NOT (PROCESS ObrabotkaSistemnojKomandy_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE AnalizKontsaTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				SET STATE CHtenieKolqtsevogoBufera;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				SET STATE CHtenieKolqtsevogoBufera;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaInitsializatsiiGeometriiTiglya 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_INITSIALIZATSII_GEOMETRII_TIGLYA + KodSobytiya_ot_PIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE CHtenieKolqtsevogoBufera;
	END_STATE
	
END_PROCESS

PROCESS RezhimRA
	STATE Nachalo 
		TekushijRezhim := REZHIM_RA;
		SET STATE ZapuskTekEtapaNaIspolnenie;
	END_STATE
	
	STATE CHtenieKolqtsevogoBufera 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				OTMENA_OTMENY:
					START PROCESS OTMENA_OTMENY;
				PK_PIV_NORMALQNYJ_KONETS_TP:
					Flag_KonetsTP := PK_PIV_NORMALQNYJ_KONETS_TP;
				PK_PIV_KONETS_TP_PO_OSHIBKE:
					Flag_KonetsTP := PK_PIV_KONETS_TP_PO_OSHIBKE;
				REZHIM_RA:
					_BREAK_ := _BREAK_;
				REZHIM_RR:
					START PROCESS Perehod_vRR;
					STOP;
				VKL_VPO:
					START PROCESS VKL_VPO;
				VYK_VPO:
					START PROCESS VYK_VPO;
				ZAPUSK_ETAPA_V_REZHIME_RA:
					SET STATE ZapuskTekEtapaNaIspolnenie;
				ELSE
					IF ((KodSobytiya_ot_PIV >= KOMANDA_SMENY_ETAPA_1) AND (KodSobytiya_ot_PIV <= KOMANDA_SMENY_ETAPA_N)) THEN
						TekushijEtap := KodSobytiya_ot_PIV;
					ELSE 
						IF ((KodSobytiya_ot_PIV >= KOMANDA_RR_1_GVS) AND (KodSobytiya_ot_PIV <= KOMANDA_RR_N_GVS)) THEN
							START PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV;
							SET STATE KontrolqVypolneniyaUK;
						ELSE 
							IF ((KodSobytiya_ot_PIV >= IZMN_TK_1) AND (KodSobytiya_ot_PIV <= IZMN_TK_N)) THEN
								START PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV;
								SET STATE KontrolqIzmeneniyaTK;
							ELSE 
								IF ((KodSobytiya_ot_PIV >= IZMN_NP_1) AND (KodSobytiya_ot_PIV <= IZMN_NP_N)) THEN
									START PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV;
									SET STATE KontrolqIzmeneniyaNP;
								ELSE 
									IF ((KodSobytiya_ot_PIV >= IZMN_ZD_1) AND (KodSobytiya_ot_PIV <= IZMN_ZD_N)) THEN
										START PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV;
										SET STATE KontrolqIzmeneniyaZD;
									ELSE 
										IF ((KodSobytiya_ot_PIV >= KOMANDA_1_REGULYATORY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_REGULYATORY)) THEN
											START PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV;
											SET STATE KontrolqVypolneniyaKR;
										ELSE 
											IF ((KodSobytiya_ot_PIV >= KOMANDA_1_KOORDINATY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_KOORDINATY)) THEN
												START PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV;
												SET STATE KontrolqVypolneniyaKK;
											ELSE 
												IF ((KodSobytiya_ot_PIV >= KOMANDA_1_DATCHIKI) AND (KodSobytiya_ot_PIV <= KOMANDA_N_DATCHIKI)) THEN
													START PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV;
													SET STATE KontrolqVypolneniyaKD;
												ELSE 
													IF ((KodSobytiya_ot_PIV >= KOMANDA_1_SISTEMNAYA) AND (KodSobytiya_ot_PIV <= KOMANDA_N_SISTEMNAYA)) THEN
														START PROCESS ObrabotkaSistemnojKomandy_ot_PIV;
														SET STATE KontrolqVypolneniyaSK;
													ELSE 
														IF ((KodSobytiya_ot_PIV >= IZMN_NP_GLUBINA_TIGLYA) AND (KodSobytiya_ot_PIV < (IZMN_NP_GLUBINA_TIGLYA + CHISLO_TOCHEK_TIGLYA))) THEN
															IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_GLUBINA_TIGLYA + _FUNCTION_) THEN
																SET STATE OshibkaInitsializatsiiGeometriiTiglya;
															END_IF
														ELSE 
															IF ((KodSobytiya_ot_PIV >= IZMN_NP_DIAMETR_TIGLYA) AND (KodSobytiya_ot_PIV < (IZMN_NP_DIAMETR_TIGLYA + CHISLO_TOCHEK_TIGLYA))) THEN
																IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_DIAMETR_TIGLYA + _FUNCTION_) THEN
																	SET STATE OshibkaInitsializatsiiGeometriiTiglya;
																END_IF
															ELSE 
																IF ((KodSobytiya_ot_PIV >= IZMN_NP_VES_RASPLAVA_V_TIGLE) AND (KodSobytiya_ot_PIV < (IZMN_NP_VES_RASPLAVA_V_TIGLE + CHISLO_TOCHEK_TIGLYA))) THEN
																	IF (NOT _FUNCTION_ + KodSobytiya_ot_PIV - IZMN_NP_VES_RASPLAVA_V_TIGLE + _FUNCTION_) THEN
																		SET STATE OshibkaInitsializatsiiGeometriiTiglya;
																	END_IF
																ELSE 
																	SET STATE NekorrektnoeSobytie;
																END_IF
															END_IF
														END_IF
													END_IF
												END_IF
											END_IF
										END_IF
									END_IF
								END_IF
							END_IF
						END_IF
					END_IF
			END_CASE
		END_IF
	END_STATE
	
	STATE ZapuskTekEtapaNaIspolnenie 
		IF (PROCESS IspolnenieKomandyRA IN STATE ACTIVE) THEN
			SET STATE IdetIspolnenieRA;
		ELSE 
			START PROCESS IspolnenieKomandyRA;
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaUK 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaTK 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaNP 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqIzmeneniyaZD 
		IF (NOT (PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKR 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKK 
		IF (NOT (PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaKD 
		IF (NOT (PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE KontrolqVypolneniyaSK 
		IF (NOT (PROCESS ObrabotkaSistemnojKomandy_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IdetIspolnenieRA 
		IF (_FUNCTION_ + PK_PIV_KOMANDA_PROIGNORIROVANA__IDET_ISPOLNENIE_ETAPA_RA) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaInitsializatsiiGeometriiTiglya 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_INITSIALIZATSII_GEOMETRII_TIGLYA + KodSobytiya_ot_PIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_RA + KodSobytiya_ot_PIV) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE CHtenieKolqtsevogoBufera;
	END_STATE
	
END_PROCESS

PROCESS IspolnenieKomandyRA
	STATE Analiz 
		SET NEXT;
		CASE (TekushijEtap) OF
			ETAP_KIP:
				START PROCESS RA_KontrolqIshodnogoPolozheniya;
			ETAP_KONTROLQNOE_VAKUUMIROVANIE:
				START PROCESS RA_KontrolqnoeVakuumirovanie;
			ETAP_KONTROLQ_NATEKANIYA:
				START PROCESS RA_KontrolqNatekaniya;
			ETAP_RABOCHEE_VAKUUMIROVANIE:
				START PROCESS RA_RabocheeVakuumirovanie;
			ETAP_PODGOT_K_PLAVL_ZAGRUZKI:
				START PROCESS RA_PodgotovkaPlavleniyuZagruzki;
			ETAP_TP_PLAVL_ZAGRUZKI:
				START PROCESS RA_TP_PlavlenieZagruzki;
			ETAP_PODG_K_STAB_RASPLAVA:
				START PROCESS RA_PodgotovkaStabilizatsiiRasplava;
			ETAP_STABILIZATSIYA_RASPLAVA:
				START PROCESS RA_StabilizatsiyaRasplava;
			ETAP_PODG_PROGREVA_ZATRAVKI:
				START PROCESS RA_PodgotovkaProgrevaZatravki;
			ETAP_TP_PROGREV_ZATRAVKI:
				START PROCESS RA_TP_ProgrevZatravki;
			ETAP_ZATRAVLIVANIE:
				START PROCESS RA_Zatravlivanie;
			ETAP_TP_PEREHOD_ZATR_SHEJKA:
				START PROCESS RA_TP_VyrashivaniePerehodaZatravkaSHejka;
			ETAP_VYRASHIVANIE_SHEJKI:
				START PROCESS RA_VyrashivanieSHejki;
			ETAP_TP_PEREHOD_SHEJKA_KONUS:
				START PROCESS RA_TP_VyrashivaniePerehodaSHejkaKonus;
			ETAP_VYRASHIVANIE_KONUSA:
				START PROCESS RA_VyrashivanieKonusa;
			ETAP_PEREHOD_KONUS_TSILINDR:
				START PROCESS RA_VyrashivaniePerehodaKonusTSilindr;
			ETAP_STABILIZATSIYA_TSILINDRA:
				START PROCESS RA_StabilizatsiyaTSilindra;
			ETAP_TP_VYRASHIVANIE_TSILINDRA:
				START PROCESS RA_TP_VyrashivanieTSilindra;
			ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS:
				START PROCESS RA_TP_VyrashivaniePerehodaTSilindrObratnyjKonus;
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				START PROCESS RA_TP_VyrashivanieObratnogoKonusa;
			ETAP_OTRYV_KRISTALLA:
				START PROCESS RA_OtryvKristalla;
			ETAP_TP_OHL_KRISTALLA:
				START PROCESS RA_TP_OhlazhdenieKristalla;
			ETAP_PODGOTOVKA_K_RAZGRUZKE_KRISTALLA:
				START PROCESS RA_PodgotovkaRazgruzkeKristalla;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE KontrolqIspolneniya 
		CASE (TekushijEtap) OF
			ETAP_KIP:
				IF (NOT (PROCESS RA_KontrolqIshodnogoPolozheniya IN STATE ACTIVE)) THEN
					IF (PROCESS RA_KontrolqIshodnogoPolozheniya IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_KONTROLQNOE_VAKUUMIROVANIE:
				IF (NOT (PROCESS RA_KontrolqnoeVakuumirovanie IN STATE ACTIVE)) THEN
					IF (PROCESS RA_KontrolqnoeVakuumirovanie IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_KONTROLQ_NATEKANIYA:
				IF (NOT (PROCESS RA_KontrolqNatekaniya IN STATE ACTIVE)) THEN
					IF (PROCESS RA_KontrolqNatekaniya IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_RABOCHEE_VAKUUMIROVANIE:
				IF (NOT (PROCESS RA_RabocheeVakuumirovanie IN STATE ACTIVE)) THEN
					IF (PROCESS RA_RabocheeVakuumirovanie IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_PODGOT_K_PLAVL_ZAGRUZKI:
				IF (NOT (PROCESS RA_PodgotovkaPlavleniyuZagruzki IN STATE ACTIVE)) THEN
					IF (PROCESS RA_PodgotovkaPlavleniyuZagruzki IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_PLAVL_ZAGRUZKI:
				IF (NOT (PROCESS RA_TP_PlavlenieZagruzki IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_PlavlenieZagruzki IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						TekushijEtap := TekushijEtap + 1;
						START PROCESS Perehod_vRR;
						STOP;
					END_IF
				END_IF
			ETAP_PODG_K_STAB_RASPLAVA:
				IF (NOT (PROCESS RA_PodgotovkaStabilizatsiiRasplava IN STATE ACTIVE)) THEN
					IF (PROCESS RA_PodgotovkaStabilizatsiiRasplava IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_STABILIZATSIYA_RASPLAVA:
				IF (NOT (PROCESS RA_StabilizatsiyaRasplava IN STATE ACTIVE)) THEN
					IF (PROCESS RA_StabilizatsiyaRasplava IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_PODG_PROGREVA_ZATRAVKI:
				IF (NOT (PROCESS RA_PodgotovkaProgrevaZatravki IN STATE ACTIVE)) THEN
					IF (PROCESS RA_PodgotovkaProgrevaZatravki IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_PROGREV_ZATRAVKI:
				IF (NOT (PROCESS RA_TP_ProgrevZatravki IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_ProgrevZatravki IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_ZATRAVLIVANIE:
				IF (NOT (PROCESS RA_Zatravlivanie IN STATE ACTIVE)) THEN
					IF (PROCESS RA_Zatravlivanie IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_PEREHOD_ZATR_SHEJKA:
				IF (NOT (PROCESS RA_TP_VyrashivaniePerehodaZatravkaSHejka IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_VyrashivaniePerehodaZatravkaSHejka IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_VYRASHIVANIE_SHEJKI:
				IF (NOT (PROCESS RA_VyrashivanieSHejki IN STATE ACTIVE)) THEN
					IF (PROCESS RA_VyrashivanieSHejki IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_PEREHOD_SHEJKA_KONUS:
				IF (NOT (PROCESS RA_TP_VyrashivaniePerehodaSHejkaKonus IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_VyrashivaniePerehodaSHejkaKonus IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_VYRASHIVANIE_KONUSA:
				IF (NOT (PROCESS RA_VyrashivanieKonusa IN STATE ACTIVE)) THEN
					IF (PROCESS RA_VyrashivanieKonusa IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_PEREHOD_KONUS_TSILINDR:
				IF (NOT (PROCESS RA_VyrashivaniePerehodaKonusTSilindr IN STATE ACTIVE)) THEN
					IF (PROCESS RA_VyrashivaniePerehodaKonusTSilindr IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_STABILIZATSIYA_TSILINDRA:
				IF (NOT (PROCESS RA_StabilizatsiyaTSilindra IN STATE ACTIVE)) THEN
					IF (PROCESS RA_StabilizatsiyaTSilindra IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_VYRASHIVANIE_TSILINDRA:
				IF (NOT (PROCESS RA_TP_VyrashivanieTSilindra IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_VyrashivanieTSilindra IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS:
				IF (NOT (PROCESS RA_TP_VyrashivaniePerehodaTSilindrObratnyjKonus IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_VyrashivaniePerehodaTSilindrObratnyjKonus IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				IF (NOT (PROCESS RA_TP_VyrashivanieObratnogoKonusa IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_VyrashivanieObratnogoKonusa IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_OTRYV_KRISTALLA:
				IF (NOT (PROCESS RA_OtryvKristalla IN STATE ACTIVE)) THEN
					IF (PROCESS RA_OtryvKristalla IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_OHL_KRISTALLA:
				IF (NOT (PROCESS RA_TP_OhlazhdenieKristalla IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_OhlazhdenieKristalla IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_PODGOTOVKA_K_RAZGRUZKE_KRISTALLA:
				IF (NOT (PROCESS RA_PodgotovkaRazgruzkeKristalla IN STATE ACTIVE)) THEN
					IF (PROCESS RA_PodgotovkaRazgruzkeKristalla IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						START PROCESS Perehod_vRR;
						STOP;
					END_IF
				END_IF
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE OshibkaIspolneniyaEtapa 
		IF (_FUNCTION_ + PK_PIV_ZAFIKSIROVANA_OSHIBKA_RA) THEN
			START PROCESS Perehod_vRR;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_ETAPA_RA + TekushijEtap) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RezhimKRP
	STATE Nachalo 
		TekushijRezhim := REZHIM_KRP;
		START PROCESS VYK_VPO;
		START PROCESS KRP;
		SET NEXT;
	END_STATE
	
	STATE CHtenieKolqtsevogoBufera 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				OTMENA_OTMENY:
					START PROCESS OTMENA_OTMENY;
				REZHIM_RR:
					START PROCESS Perehod_vRR;
					STOP;
				REZHIM_KRP:
					_BREAK_ := _BREAK_;
				ELSE
					IF ((KodSobytiya_ot_PIV >= IZMN_ZD_1) AND (KodSobytiya_ot_PIV <= IZMN_ZD_N)) THEN
						SET STATE IzmenenieZD;
					ELSE 
						IF ((KodSobytiya_ot_PIV >= IZMN_TK_1) AND (KodSobytiya_ot_PIV <= IZMN_TK_N)) THEN
							SET STATE IzmenenieTK;
						ELSE 
							IF ((KodSobytiya_ot_PIV >= IZMN_NP_1) AND (KodSobytiya_ot_PIV <= IZMN_NP_N)) THEN
								SET STATE IzmenenieNP;
							ELSE 
								IF ((KodSobytiya_ot_PIV >= KOMANDA_1_REGULYATORY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_REGULYATORY)) THEN
									SET STATE VypolnenieKomandyRegulyatorov;
								ELSE 
									SET STATE NekorrektnoeSobytie;
								END_IF
							END_IF
						END_IF
					END_IF
			END_CASE
		END_IF
	END_STATE
	
	STATE IzmenenieTK 
		START PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV;
		SET STATE KontrolqIzmeneniyaTK;
	END_STATE
	
	STATE KontrolqIzmeneniyaTK 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IzmenenieNP 
		START PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV;
		SET STATE KontrolqIzmeneniyaNP;
	END_STATE
	
	STATE KontrolqIzmeneniyaNP 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IzmenenieZD 
		START PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV;
		SET STATE KontrolqIzmeneniyaZD;
	END_STATE
	
	STATE KontrolqIzmeneniyaZD 
		IF (NOT (PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE VypolnenieKomandyRegulyatorov 
		START PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV;
		SET STATE KontrolqVypolneniyaKR;
	END_STATE
	
	STATE KontrolqVypolneniyaKR 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_KRP + KodSobytiya_ot_PIV) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE CHtenieKolqtsevogoBufera;
	END_STATE
	
END_PROCESS

PROCESS KRP
	VAR
		LP_SoobshenieK_PIV : INT;
	END_VAR
	
	STATE KontrolqIshodnogoPolozheniya 
		TekushijEtap := ETAP_KIP;
		START PROCESS RA_KontrolqIshodnogoPolozheniya;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (PROCESS RA_KontrolqIshodnogoPolozheniya IN STATE INACTIVE) THEN
			IF (PROCESS RA_KontrolqIshodnogoPolozheniya IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaTehSredstvVakuumirovaniya 
		START PROCESS ProverkaTehSredstvVakuumirovaniya;
		SET NEXT;
	END_STATE
	
	STATE KontrolqTehSredstvVakuumirovaniya 
		IF (PROCESS ProverkaTehSredstvVakuumirovaniya IN STATE INACTIVE) THEN
			IF (PROCESS ProverkaTehSredstvVakuumirovaniya IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqnoeVakuumirovanie 
		TekushijEtap := ETAP_KONTROLQNOE_VAKUUMIROVANIE;
		START PROCESS RA_KontrolqnoeVakuumirovanie;
		SET NEXT;
	END_STATE
	
	STATE KontrolqKontrolqnogoVakuumirovaniya 
		IF (PROCESS RA_KontrolqnoeVakuumirovanie IN STATE INACTIVE) THEN
			IF (PROCESS RA_KontrolqnoeVakuumirovanie IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE RA_KontrolqNatekaniya 
		TekushijEtap := ETAP_KONTROLQ_NATEKANIYA;
		START PROCESS RA_KontrolqNatekaniya;
		SET NEXT;
	END_STATE
	
	STATE KontrolqKontrolyaNatekaniya 
		IF (PROCESS RA_KontrolqNatekaniya IN STATE INACTIVE) THEN
			IF (PROCESS RA_KontrolqNatekaniya IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				TekushijEtap := ETAP_KIP;
				ZD_Wipn_K1 := 100.0;
				START PROCESS VKL_REG_W_IPN_K1;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniyaIP 
		IF (PROCESS VKL_REG_W_IPN_K1 IN STATE INACTIVE) THEN
			IF (PROCESS VKL_REG_W_IPN_K1 IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaDlyaKontrolyaIP 
		TIMEOUT ODNA_MINUTA THEN
			START PROCESS VYK_IPN;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyklyucheniyaIP 
		IF (PROCESS VYK_IPN IN STATE INACTIVE) THEN
			IF (PROCESS VYK_IPN IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				START PROCESS ZAT_DP;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDatchikaPrivyazki 
		IF (PROCESS ZAT_DP IN STATE INACTIVE) THEN
			IF (PROCESS ZAT_DP IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				U_TEST_DK := VKL;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Pauza_dlya_DK 
		TIMEOUT DVE_SEKUNDY THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE TestDK 
		IF (K_DATCHIKA_KASANIYA) THEN
			IF (_FUNCTION_ + PK_PIV_DK_V_NORME) THEN
				U_TEST_DK := VYKL;
				ZD_Xt := 10.0;
				START PROCESS TIG_UK;
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_OSHIBKA_DK) THEN
				U_TEST_DK := VYKL;
				SET STATE OSHIBKA_KRP;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE OSHIBKA_KRP;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqTIG_UK_10 
		IF (PROCESS TIG_UK IN STATE INACTIVE) THEN
			IF (PROCESS TIG_UK IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				ZD_Xt := 11.0;
				START PROCESS TIG_RK;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqTIG_RK_11 
		IF (PROCESS TIG_RK IN STATE INACTIVE) THEN
			IF (PROCESS TIG_RK IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				ZD_Xt := 10.0;
				START PROCESS TIG_RK;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqTIG_RK_10 
		IF (PROCESS TIG_RK IN STATE INACTIVE) THEN
			IF (PROCESS TIG_RK IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				START PROCESS TIG_KNP;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqTIG_KNP 
		IF (PROCESS TIG_KNP IN STATE INACTIVE) THEN
			IF (PROCESS TIG_KNP IN STATE ERROR) THEN
				SET STATE OSHIBKA_KRP;
			ELSE 
				START PROCESS KontrolqIzmeneniyaFP_Hur_dlyaTDD;
				START PROCESS PeredachaNP_MAX_SIGNAL_VALUE_DU;
				START PROCESS KontrolqIzmeneniyaZadanij_ZD_VzR;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqStatusovKanalov 
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_VPO;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_DU;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_TDD;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_DTN;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_DTR;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_ZU;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_ZR;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_ZV;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_TU;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_TR;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF (NOT _FUNCTION_) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_TV;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		IF ((NP_TipIPN = IPN_IP2K) AND (NOT _FUNCTION_)) THEN
			LP_SoobshenieK_PIV := RAZRYV_SVYAZI_S_IP2K_K1;
			SET STATE SoobshenieObOtsutstviiUstrojstva;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			START PROCESS Perehod_vRR;
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieObOtsutstviiUstrojstva 
		IF (_FUNCTION_ + LP_SoobshenieK_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OSHIBKA_KRP 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KRP) THEN
			START PROCESS Perehod_vRR;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			START PROCESS Perehod_vRR;
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS RezhimOTZHIG
	STATE Nachalo 
		TekushijRezhim := REZHIM_OTZHIG_TU;
		START PROCESS VYK_VPO;
		START PROCESS OtzhigTeplovogoUzla;
		SET NEXT;
	END_STATE
	
	STATE CHtenieKolqtsevogoBufera 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				OTMENA_OTMENY:
					START PROCESS OTMENA_OTMENY;
				REZHIM_RR:
					START PROCESS Perehod_vRR;
					STOP;
				REZHIM_OTZHIG_TU:
					_BREAK_ := _BREAK_;
				ELSE
					IF ((KodSobytiya_ot_PIV >= IZMN_ZD_1) AND (KodSobytiya_ot_PIV <= IZMN_ZD_N)) THEN
						SET STATE IzmenenieZD;
					ELSE 
						IF ((KodSobytiya_ot_PIV >= IZMN_TK_1) AND (KodSobytiya_ot_PIV <= IZMN_TK_N)) THEN
							SET STATE IzmenenieTK;
						ELSE 
							IF ((KodSobytiya_ot_PIV >= IZMN_NP_1) AND (KodSobytiya_ot_PIV <= IZMN_NP_N)) THEN
								SET STATE IzmenenieNP;
							ELSE 
								IF ((KodSobytiya_ot_PIV >= KOMANDA_1_REGULYATORY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_REGULYATORY)) THEN
									SET STATE VypolnenieKomandyRegulyatorov;
								ELSE 
									SET STATE NekorrektnoeSobytie;
								END_IF
							END_IF
						END_IF
					END_IF
			END_CASE
		END_IF
	END_STATE
	
	STATE IzmenenieTK 
		START PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV;
		SET STATE KontrolqIzmeneniyaTK;
	END_STATE
	
	STATE KontrolqIzmeneniyaTK 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IzmenenieNP 
		START PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV;
		SET STATE KontrolqIzmeneniyaNP;
	END_STATE
	
	STATE KontrolqIzmeneniyaNP 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IzmenenieZD 
		START PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV;
		SET STATE KontrolqIzmeneniyaZD;
	END_STATE
	
	STATE KontrolqIzmeneniyaZD 
		IF (NOT (PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE VypolnenieKomandyRegulyatorov 
		START PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV;
		SET STATE KontrolqVypolneniyaKR;
	END_STATE
	
	STATE KontrolqVypolneniyaKR 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_OTZHIG_TU + KodSobytiya_ot_PIV) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE CHtenieKolqtsevogoBufera;
	END_STATE
	
END_PROCESS

PROCESS OtzhigTeplovogoUzla
	VAR
		LP_Kopiya_R2 : REAL;
		LP_Pnk_1 : REAL;
		LP_DelqtaPnk : REAL;
	END_VAR
	
	STATE KontrolqIshodnogoPolozheniya 
		TekushijEtap := ETAP_KIP;
		START PROCESS RA_KontrolqIshodnogoPolozheniya;
		SET NEXT;
	END_STATE
	
	STATE KontrolqProhozhdeniyaKIP 
		IF (PROCESS RA_KontrolqIshodnogoPolozheniya IN STATE INACTIVE) THEN
			IF (PROCESS RA_KontrolqIshodnogoPolozheniya IN STATE ERROR) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				TekushijEtap := ETAP_KONTROLQNOE_VAKUUMIROVANIE;
				START PROCESS RA_KontrolqnoeVakuumirovanie;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqOkonchaniyaKontrolqnogoVakuumirovaniya 
		IF (PROCESS RA_KontrolqnoeVakuumirovanie IN STATE INACTIVE) THEN
			IF (PROCESS RA_KontrolqnoeVakuumirovanie IN STATE ERROR) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				TekushijEtap := ETAP_KONTROLQ_NATEKANIYA;
				START PROCESS RA_KontrolqNatekaniya;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqOkonchaniyaKontrolyaNatekaniya 
		IF (PROCESS RA_KontrolqNatekaniya IN STATE INACTIVE) THEN
			IF (FP_Pnk > NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA) THEN
				SET STATE SoobshenieONedopustimomDavlenii;
			ELSE 
				TekushijEtap := ETAP_RABOCHEE_VAKUUMIROVANIE;
				START PROCESS VKL_AVD1_NK;
				START PROCESS VKL_AVD2_NK;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqSrabatyvaniyaVklyucheniyaAVD1i2 
		IF ((PROCESS VKL_AVD1_NK IN STATE INACTIVE) AND (PROCESS VKL_AVD2_NK IN STATE INACTIVE)) THEN
			IF ((PROCESS VKL_AVD1_NK IN STATE ERROR) OR (PROCESS VKL_AVD1_NK IN STATE ERROR)) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				LP_Kopiya_R2 := TK_GlubokijVakuum_R2;
				TK_GlubokijVakuum_R2 := NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM;
				START PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqOtrabatyvaniyaKRV 
		IF (PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7 IN STATE INACTIVE) THEN
			TK_GlubokijVakuum_R2 := LP_Kopiya_R2;
			IF (PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7 IN STATE ERROR) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				TekushijEtap := ETAP_PODG_PROGREVA_ZATRAVKI;
				START PROCESS RA_PodgotovkaProgrevaZatravki;
				START PROCESS TIG_PVK;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqZaversheniyaProtsessov 
		IF ((PROCESS RA_PodgotovkaProgrevaZatravki IN STATE INACTIVE) AND (PROCESS TIG_PVK IN STATE INACTIVE)) THEN
			IF ((PROCESS RA_PodgotovkaProgrevaZatravki IN STATE ERROR) OR (PROCESS TIG_PVK IN STATE ERROR)) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieVrasheniyaTiglya_Zatravki 
		TekushijEtap := ETAP_OTZHIG_TEPLOVOGO_UZLA;
		ZD_Wt := -2.0;
		ZD_Wz := 2.0;
		START PROCESS ZAT_VR;
		START PROCESS TIG_VR;
		ZD_Wipn_K1 := 100.0;
		START PROCESS VKL_REG_W_IPN_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaIPN 
		IF (PROCESS VKL_REG_W_IPN_K1 IN STATE INACTIVE) THEN
			IF (PROCESS VKL_REG_W_IPN_K1 IN STATE ERROR) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				LP_Pnk_1 := FP_Pnk;
				LP_DelqtaPnk := 0.0;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaRegulirovaniya 
		TIMEOUT NP_OTZHIG_DELQTA_T_OTZHIGA THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE RegulirovanieRpoW 
		LP_DelqtaPnk := FP_Pnk - LP_Pnk_1;
		LP_Pnk_1 := FP_Pnk;
		IF ((FP_Pnk + LP_DelqtaPnk) > NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS) THEN
			ZD_Wipn_K1 := ZD_Wipn_K1 - NP_OTZHIG_DELQTA_W_OTZHIGA;
		ELSE 
			IF ((FP_Pnk + LP_DelqtaPnk) < NP_OTZHIG_DAVLENIE_OTZHIGA_MIN) THEN
				ZD_Wipn_K1 := ZD_Wipn_K1 + NP_OTZHIG_DELQTA_W_OTZHIGA;
			END_IF
		END_IF
		IF (ZD_Wipn_K1 < NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA) THEN
			SET STATE PauzaRegulirovaniya;
		ELSE 
			ZD_Wipn_K1 := NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA;
		END_IF
		TIMEOUT NP_OTZHIG_VREMYA_OTZHIGA THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE SbrosMoshnostiIPN 
		ZD_Wipn_K1 := ZD_Wipn_K1 - NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN;
		IF (ZD_Wipn_K1 < NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN) THEN
			ZD_Wipn_K1 := 0.0;
			START PROCESS VYK_IPN;
			SET STATE KontrolqVyklyucheniyaIPN;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PauzaOhlazhdeniya 
		TIMEOUT NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN THEN
			SET STATE SbrosMoshnostiIPN;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyklyucheniyaIPN 
		IF (PROCESS VYK_IPN IN STATE INACTIVE) THEN
			IF (PROCESS VYK_IPN IN STATE ERROR) THEN
				SET STATE OshibkaOtzhiga;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshenieOKontseOtzhiga 
		IF (_FUNCTION_ + PK_PIV_OTZHIG_KONETS_OTZHIGA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieONedopustimomDavlenii 
		IF (_FUNCTION_ + PK_PIV_OTZHIG_NEGERMETICHNOSTQ_USTANOVKI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaOtzhiga 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_OTZHIGA) THEN
			START PROCESS Perehod_vRR;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			START PROCESS Perehod_vRR;
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS ProverkaTehSredstvVakuumirovaniya
	VAR
		LP_IndikatorOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_IndikatorOshibki := 0;
		SET NEXT;
	END_STATE
	
	STATE OtkrVE5 
		START PROCESS OTKR_AVD1_MO_VK_VE5;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtkrVE5 
		IF (NOT (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrVE5 
		START PROCESS ZAKR_AVD1_MO_VK_VE5;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZakrVE5 
		IF (NOT (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OtkrVE6 
		START PROCESS OTKR_AVD2_MO_VK_VE6;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtkrVE6 
		IF (NOT (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrVE6 
		START PROCESS ZAKR_AVD2_MO_VK_VE6;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZakrVE6 
		IF (NOT (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OtkrBPK 
		START PROCESS OTKR_BPK_VE7;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtkrBPK 
		IF ((PROCESS OTKR_BPK_VE7 IN STATE INACTIVE)) THEN
			IF (PROCESS OTKR_BPK_VE7 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrBPK 
		START PROCESS ZAKR_BPK_VE7;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZakrBPK 
		IF ((PROCESS ZAKR_BPK_VE7 IN STATE INACTIVE)) THEN
			IF (PROCESS ZAKR_BPK_VE7 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OtkrVE8 
		START PROCESS OTKR_PRODUVKA_VE8;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtkrVE8 
		IF (NOT (PROCESS OTKR_PRODUVKA_VE8 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_PRODUVKA_VE8 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrVE8 
		START PROCESS ZAKR_PRODUVKA_VE8;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZakrVE8 
		IF (NOT (PROCESS ZAKR_PRODUVKA_VE8 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_PRODUVKA_VE8 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OtkrVE9 
		START PROCESS OTKR_NADDUV_VK_VE9;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtkrVE9 
		IF (NOT (PROCESS OTKR_NADDUV_VK_VE9 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_NADDUV_VK_VE9 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrVE9 
		START PROCESS ZAKR_NADDUV_VK_VE9;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZakrVE9 
		IF (NOT (PROCESS ZAKR_NADDUV_VK_VE9 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_NADDUV_VK_VE9 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrVM14 
		START PROCESS ZAKR_VM14;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZakrVM14 
		IF (NOT (PROCESS ZAKR_VM14 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_VM14 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OtkrVM14 
		START PROCESS OTKR_VM14;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtkrVM14 
		IF (NOT (PROCESS OTKR_VM14 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_VM14 IN STATE ERROR) THEN
				LP_IndikatorOshibki := 1;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZakrytqZatvorVakuumnyj 
		IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_ZATVOR_VAKUUMNYJ) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaZakrytiyaZatvoraVakuumnogo 
		IF ((NOT K_OTKR_ZATVOR_V) AND (K_ZAKR_ZATVOR_V)) THEN
			SET STATE OtkrytqZatvorVakuumnyj;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE UstanovkaBitaOshibkiPoZakrytiyu;
		END_TIMEOUT
	END_STATE
	
	STATE UstanovkaBitaOshibkiPoZakrytiyu 
		LP_IndikatorOshibki := 1;
		IF (_FUNCTION_ + PK_PIV_SOSTOYANIE_OSHIBKI_ZATVORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OtkrytqZatvorVakuumnyj 
		IF ((K_OTKR_ZATVOR_V) AND (NOT K_ZAKR_ZATVOR_V)) THEN
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaOtkrytiyaZatvoraVakuumnogo 
		IF ((K_OTKR_ZATVOR_V) AND (NOT K_ZAKR_ZATVOR_V)) THEN
			SET STATE AnalizRabotyProtsessa;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE UstanovkaBitaOshibkiPoOtkrytiyu;
		END_TIMEOUT
	END_STATE
	
	STATE UstanovkaBitaOshibkiPoOtkrytiyu 
		LP_IndikatorOshibki := 1;
		IF (_FUNCTION_ + PK_PIV_SOSTOYANIE_OSHIBKI_ZATVORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizRabotyProtsessa 
		IF (LP_IndikatorOshibki = 0) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RezhimDVK
	STATE Nachalo 
		IF (TekushijEtap = ETAP_TP_VYRASHIVANIE_TSILINDRA) THEN
			TekushijRezhim := REZHIM_DVK;
			START PROCESS VYK_VPO;
			STOP PROCESS REG_DK;
			TekushijEtap := ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA;
			START PROCESS DVK_VyrashivanieObratnogoKonusa;
			SET NEXT;
		ELSE 
			SET STATE NetUslovij;
		END_IF
	END_STATE
	
	STATE CHtenieKolqtsevogoBufera 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				OTMENA_OTMENY:
					START PROCESS OTMENA_OTMENY;
				REZHIM_RR:
					START PROCESS Perehod_vRR;
					STOP;
				REZHIM_DVK:
					_BREAK_ := _BREAK_;
				ELSE
					IF ((KodSobytiya_ot_PIV >= IZMN_ZD_1) AND (KodSobytiya_ot_PIV <= IZMN_ZD_N)) THEN
						SET STATE IzmenenieZD;
					ELSE 
						IF ((KodSobytiya_ot_PIV >= IZMN_TK_1) AND (KodSobytiya_ot_PIV <= IZMN_TK_N)) THEN
							SET STATE IzmenenieTK;
						ELSE 
							IF ((KodSobytiya_ot_PIV >= IZMN_NP_1) AND (KodSobytiya_ot_PIV <= IZMN_NP_N)) THEN
								SET STATE IzmenenieNP;
							ELSE 
								IF ((KodSobytiya_ot_PIV >= KOMANDA_1_REGULYATORY) AND (KodSobytiya_ot_PIV <= KOMANDA_N_REGULYATORY)) THEN
									SET STATE VypolnenieKomandyRegulyatorov;
								ELSE 
									SET STATE NekorrektnoeSobytie;
								END_IF
							END_IF
						END_IF
					END_IF
			END_CASE
		END_IF
	END_STATE
	
	STATE IzmenenieTK 
		START PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV;
		SET STATE KontrolqIzmeneniyaTK;
	END_STATE
	
	STATE KontrolqIzmeneniyaTK 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IzmenenieNP 
		START PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV;
		SET STATE KontrolqIzmeneniyaNP;
	END_STATE
	
	STATE KontrolqIzmeneniyaNP 
		IF (NOT (PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE IzmenenieZD 
		START PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV;
		SET STATE KontrolqIzmeneniyaZD;
	END_STATE
	
	STATE KontrolqIzmeneniyaZD 
		IF (NOT (PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE VypolnenieKomandyRegulyatorov 
		START PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV;
		SET STATE KontrolqVypolneniyaKR;
	END_STATE
	
	STATE KontrolqVypolneniyaKR 
		IF (NOT (PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV IN STATE ACTIVE)) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_DVK + KodSobytiya_ot_PIV) THEN
			SET STATE CHtenieKolqtsevogoBufera;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE NetUslovij 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_ETAPA_DVK + TekushijEtap) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE VyhodIzRezhima 
		START PROCESS Perehod_vRR;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS DVK_VyrashivanieObratnogoKonusa
	STATE Analiz 
		SET NEXT;
		CASE (TekushijEtap) OF
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				START PROCESS RA_TP_VyrashivanieObratnogoKonusa;
			ETAP_OTRYV_KRISTALLA:
				START PROCESS RA_OtryvKristalla;
			ETAP_TP_OHL_KRISTALLA:
				START PROCESS RA_TP_OhlazhdenieKristalla;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE KontrolqIspolneniya 
		CASE (TekushijEtap) OF
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				IF (NOT (PROCESS RA_TP_VyrashivanieObratnogoKonusa IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_VyrashivanieObratnogoKonusa IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_OTRYV_KRISTALLA:
				IF (NOT (PROCESS RA_OtryvKristalla IN STATE ACTIVE)) THEN
					IF (PROCESS RA_OtryvKristalla IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						IF (NP_REZH_ISPOLN_RA = NEPRERYVNO) THEN
							TekushijEtap := TekushijEtap + 1;
							SET STATE Analiz;
						ELSE 
							START PROCESS Perehod_vRR;
							STOP;
						END_IF
					END_IF
				END_IF
			ETAP_TP_OHL_KRISTALLA:
				IF (NOT (PROCESS RA_TP_OhlazhdenieKristalla IN STATE ACTIVE)) THEN
					IF (PROCESS RA_TP_OhlazhdenieKristalla IN STATE ERROR) THEN
						SET STATE OshibkaIspolneniyaEtapa;
					ELSE 
						TekushijEtap := ETAP_PODG_K_STAB_RASPLAVA;
						START PROCESS Perehod_vRR;
						STOP;
					END_IF
				END_IF
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE OshibkaIspolneniyaEtapa 
		IF (_FUNCTION_ + PK_PIV_ZAFIKSIROVANA_OSHIBKA_DVK) THEN
			START PROCESS Perehod_vRR;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_ETAPA_DVK + TekushijEtap) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS RezhimFORSAZH
	STATE Nachalo 
		TekushijRezhim := REZHIM_FORSAZH;
		SET NEXT;
	END_STATE
	
	STATE CHtenieI_RazborKodaSobytiyaOtPIV 
		IF (_FUNCTION_) THEN
			KodSobytiya_ot_PIV := _FUNCTION_;
			CASE (KodSobytiya_ot_PIV) OF
				REZHIM_RR:
					START PROCESS Initsializatsiya;
					STOP;
				FORSAZH_U_VKL_PTD_ON:
					U_VKL_PTD := VKL;
				FORSAZH_U_VKL_PTD_OFF:
					U_VKL_PTD := VYKL;
				FORSAZH_U_VYK_PTD_ON:
					U_VYK_PTD := VKL;
				FORSAZH_U_VYK_PTD_OFF:
					U_VYK_PTD := VYKL;
				FORSAZH_U_VKL_RV_PTD_ON:
					U_VKL_RV_PTD := VKL;
				FORSAZH_U_VKL_RV_PTD_OFF:
					U_VKL_RV_PTD := VYKL;
				FORSAZH_U_VKL_ASS_ON:
					U_VKL_ASS := VKL;
				FORSAZH_U_VKL_ASS_OFF:
					U_VKL_ASS := VYKL;
				FORSAZH_U_VE12_ON:
					U_VE12 := VKL;
				FORSAZH_U_VE12_OFF:
					U_VE12 := VYKL;
				FORSAZH_FPGA3_N5_ON:
					FPGA3_N5 := VKL;
				FORSAZH_FPGA3_N5_OFF:
					FPGA3_N5 := VYKL;
				FORSAZH_FPGA3_N6_ON:
					FPGA3_N6 := VKL;
				FORSAZH_FPGA3_N6_OFF:
					FPGA3_N6 := VYKL;
				FORSAZH_FPGA3_N7_ON:
					FPGA3_N7 := VKL;
				FORSAZH_FPGA3_N7_OFF:
					FPGA3_N7 := VYKL;
				FORSAZH_U_LAZERA_DP_ON:
					U_LAZERA_DP := VKL;
				FORSAZH_U_LAZERA_DP_OFF:
					U_LAZERA_DP := VYKL;
				FORSAZH_FPGA3_N9_ON:
					FPGA3_N9 := VKL;
				FORSAZH_FPGA3_N9_OFF:
					FPGA3_N9 := VYKL;
				FORSAZH_FPGA3_N10_ON:
					FPGA3_N10 := VKL;
				FORSAZH_FPGA3_N10_OFF:
					FPGA3_N10 := VYKL;
				FORSAZH_FPGA3_N11_ON:
					FPGA3_N11 := VKL;
				FORSAZH_FPGA3_N11_OFF:
					FPGA3_N11 := VYKL;
				FORSAZH_FPGA3_N12_ON:
					FPGA3_N12 := VKL;
				FORSAZH_FPGA3_N12_OFF:
					FPGA3_N12 := VYKL;
				FORSAZH_FPGA3_N13_ON:
					FPGA3_N13 := VKL;
				FORSAZH_FPGA3_N13_OFF:
					FPGA3_N13 := VYKL;
				FORSAZH_FPGA3_N14_ON:
					FPGA3_N14 := VKL;
				FORSAZH_FPGA3_N14_OFF:
					FPGA3_N14 := VYKL;
				FORSAZH_FPGA3_N15_ON:
					FPGA3_N15 := VKL;
				FORSAZH_FPGA3_N15_OFF:
					FPGA3_N15 := VYKL;
				FORSAZH_FPGA3_N16_ON:
					FPGA3_N16 := VKL;
				FORSAZH_FPGA3_N16_OFF:
					FPGA3_N16 := VYKL;
				FORSAZH_FPGA3_N17_ON:
					FPGA3_N17 := VKL;
				FORSAZH_FPGA3_N17_OFF:
					FPGA3_N17 := VYKL;
				FORSAZH_FPGA3_N18_ON:
					FPGA3_N18 := VKL;
				FORSAZH_FPGA3_N18_OFF:
					FPGA3_N18 := VYKL;
				FORSAZH_FPGA3_N19_ON:
					FPGA3_N19 := VKL;
				FORSAZH_FPGA3_N19_OFF:
					FPGA3_N19 := VYKL;
				FORSAZH_FPGA3_N20_ON:
					FPGA3_N20 := VKL;
				FORSAZH_FPGA3_N20_OFF:
					FPGA3_N20 := VYKL;
				FORSAZH_FPGA3_N21_ON:
					FPGA3_N21 := VKL;
				FORSAZH_FPGA3_N21_OFF:
					FPGA3_N21 := VYKL;
				FORSAZH_FPGA3_N22_ON:
					FPGA3_N22 := VKL;
				FORSAZH_FPGA3_N22_OFF:
					FPGA3_N22 := VYKL;
				FORSAZH_FPGA3_N23_ON:
					FPGA3_N23 := VKL;
				FORSAZH_FPGA3_N23_OFF:
					FPGA3_N23 := VYKL;
				FORSAZH_U_NVR1_ON:
					U_NVR1 := VKL;
				FORSAZH_U_NVR1_OFF:
					U_NVR1 := VYKL;
				FORSAZH_U_NVR2_ON:
					U_NVR2 := VKL;
				FORSAZH_U_NVR2_OFF:
					U_NVR2 := VYKL;
				FORSAZH_U_RAZBLOKIROVKA_VK_NK_ON:
					U_RAZBLOKIROVKA_VK_NK := VKL;
				FORSAZH_U_RAZBLOKIROVKA_VK_NK_OFF:
					U_RAZBLOKIROVKA_VK_NK := VYKL;
				FORSAZH_U_TEST_DK_ON:
					U_TEST_DK := VKL;
				FORSAZH_U_TEST_DK_OFF:
					U_TEST_DK := VYKL;
				FORSAZH_U_ZAKR_RRG_ON:
					U_ZAKR_RRG := VKL;
				FORSAZH_U_ZAKR_RRG_OFF:
					U_ZAKR_RRG := VYKL;
				FORSAZH_U_OTKR_RRG_ON:
					U_OTKR_RRG := VKL;
				FORSAZH_U_OTKR_RRG_OFF:
					U_OTKR_RRG := VYKL;
				FORSAZH_U_VT3_ON:
					U_VT3 := VKL;
				FORSAZH_U_VT3_OFF:
					U_VT3 := VYKL;
				FORSAZH_U_VKL_48V_ON:
					U_VKL_48V := VKL;
				FORSAZH_U_VKL_48V_OFF:
					U_VKL_48V := VYKL;
				FORSAZH_U_VE1_ON:
					U_VE1 := VKL;
				FORSAZH_U_VE1_OFF:
					U_VE1 := VYKL;
				FORSAZH_U_VE2_ON:
					U_VE2 := VKL;
				FORSAZH_U_VE2_OFF:
					U_VE2 := VYKL;
				FORSAZH_U_VE3_ON:
					U_VE3 := VKL;
				FORSAZH_U_VE3_OFF:
					U_VE3 := VYKL;
				FORSAZH_U_VE4_ON:
					U_VE4 := VKL;
				FORSAZH_U_VE4_OFF:
					U_VE4 := VYKL;
				FORSAZH_U_VE5_ON:
					U_VE5 := VKL;
				FORSAZH_U_VE5_OFF:
					U_VE5 := VYKL;
				FORSAZH_U_VE6_ON:
					U_VE6 := VKL;
				FORSAZH_U_VE6_OFF:
					U_VE6 := VYKL;
				FORSAZH_U_VE7_ON:
					U_VE7 := VKL;
				FORSAZH_U_VE7_OFF:
					U_VE7 := VYKL;
				FORSAZH_U_VKL_24V_ON:
					U_VKL_24V := VKL;
				FORSAZH_U_VKL_24V_OFF:
					U_VKL_24V := VYKL;
				FORSAZH_U_DVN1_ON:
					U_DVN1 := VKL;
				FORSAZH_U_DVN1_OFF:
					U_DVN1 := VYKL;
				FORSAZH_U_DVN2_ON:
					U_DVN2 := VKL;
				FORSAZH_U_DVN2_OFF:
					U_DVN2 := VYKL;
				FORSAZH_U_VE10_ON:
					U_VE10 := VKL;
				FORSAZH_U_VE10_OFF:
					U_VE10 := VYKL;
				FORSAZH_U_VE11_ON:
					U_VE11 := VKL;
				FORSAZH_U_VE11_OFF:
					U_VE11 := VYKL;
				FORSAZH_U_OTKR_VM14_ON:
					U_OTKR_VM14 := VKL;
				FORSAZH_U_OTKR_VM14_OFF:
					U_OTKR_VM14 := VYKL;
				FORSAZH_U_ZAKR_VM14_ON:
					U_ZAKR_VM14 := VKL;
				FORSAZH_U_ZAKR_VM14_OFF:
					U_ZAKR_VM14 := VYKL;
				FORSAZH_U_VE8_ON:
					U_VE8 := VKL;
				FORSAZH_U_VE8_OFF:
					U_VE8 := VYKL;
				FORSAZH_U_VE9_ON:
					U_VE9 := VKL;
				FORSAZH_U_VE9_OFF:
					U_VE9 := VYKL;
				ELSE
					SET STATE NekorrektnoeSobytie;
			END_CASE
		END_IF
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV_RF + KodSobytiya_ot_PIV) THEN
			SET STATE CHtenieI_RazborKodaSobytiyaOtPIV;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RezhimOTMENA
	STATE Nachalo 
		TekushijRezhim := REZHIM_OTMENA;
		START PROCESS VYK_REG_UR;
		START PROCESS VYK_IPN;
		START PROCESS VYK_ZAT_VR;
		START PROCESS VYK_TIG_VR;
		START PROCESS VYK_ZATRAVKU;
		START PROCESS Perehod_vRR;
		IF ((PROCESS REG_W_IPN_K1 IN STATE ACTIVE) OR (PROCESS REG_W_IPN_K2 IN STATE ACTIVE)) THEN
			START PROCESS VYK_IPN;
			START PROCESS TIG_KNP;
		END_IF
		STOP;
	END_STATE
	
END_PROCESS

PROCESS OTMENA_OTMENY
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_KONTROLQ_TAJMAUTA_OTMENY_SNYAT) THEN
			STOP PROCESS DoOtmeny2min;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS DoOtmeny2min
	STATE Nachalo 
		LP_SchetchikSekund := DVE_MINUTY;
		START PROCESS OTSCHET_DVUH_MINUT;
		SET NEXT;
	END_STATE
	
	STATE NachaloScheta 
		IF ((PROCESS RezhimOTMENA IN STATE ACTIVE) OR (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) AND NOT (PROCESS REG_W_IPN_K2 IN STATE ACTIVE))) THEN
			STOP;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_DO_OTMENY_SEKUND + LP_SchetchikSekund) THEN
				SET STATE Pauza_Sekunda;
			END_IF
			IF (NOT (PROCESS OTSCHET_DVUH_MINUT IN STATE ACTIVE)) THEN
				SET STATE ZapuskOtmena;
			END_IF
		END_IF
	END_STATE
	
	STATE SchetSekund 
		IF (NOT (PROCESS OTSCHET_DVUH_MINUT IN STATE ACTIVE)) THEN
			SET STATE ZapuskOtmena;
		ELSE 
			_VOID_ := _FUNCTION_ + PK_PIV_DO_OTMENY_OSTALOSQ_SEKUND + LP_SchetchikSekund;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Pauza_Sekunda 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE SchetSekund;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskOtmena 
		IF (NOT (PROCESS RezhimOTMENA IN STATE ACTIVE)) THEN
			START PROCESS RezhimOTMENA;
		END_IF
		STOP;
	END_STATE
	
END_PROCESS

PROCESS OTSCHET_DVUH_MINUT
	STATE Nachalo 
		LP_SchetchikSekund := LP_SchetchikSekund - 1;
		TIMEOUT DVE_MINUTY THEN
			SET STATE Konets;
		END_TIMEOUT
	END_STATE
	
	STATE Konets 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtmenyPoKnopke
	STATE Nachalo 
		IF (K_OTMENA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZapuskOtmeny 
		IF (NOT (PROCESS RezhimOTMENA IN STATE ACTIVE)) THEN
			START PROCESS RezhimOTMENA;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NAZHATA_KNOPKA_OTMENA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqOtpukaniyaKnopki;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOtpukaniyaKnopki 
		IF (NOT K_OTMENA) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS Perehod_vRR
	STATE ProverkaOkonchaniyaProtsessovIOstanov 
		ZD_Baza_REG_ROSTA := 0.0;
		ZD_Baza_Tn_dlya_REG_ROSTA_Predydushee := 0.0;
		ERROR PROCESS IspolnenieKomandyRA;
		ERROR PROCESS RA_KontrolqIshodnogoPolozheniya;
		ERROR PROCESS RA_KontrolqnoeVakuumirovanie;
		ERROR PROCESS RA_KontrolqNatekaniya;
		ERROR PROCESS RA_RabocheeVakuumirovanie;
		ERROR PROCESS RA_PodgotovkaPlavleniyuZagruzki;
		ERROR PROCESS RA_TP_PlavlenieZagruzki;
		ERROR PROCESS KontrolqPoyavleniyaRasplava;
		ERROR PROCESS RA_PodgotovkaStabilizatsiiRasplava;
		ERROR PROCESS RA_StabilizatsiyaRasplava;
		ERROR PROCESS KontrolqStabilizatsiiRasplava;
		ERROR PROCESS KontrolqRasplavleniya;
		ERROR PROCESS RA_PodgotovkaProgrevaZatravki;
		ERROR PROCESS RA_TP_ProgrevZatravki;
		ERROR PROCESS RA_Zatravlivanie;
		ERROR PROCESS KontrolqDendritov;
		ERROR PROCESS RA_TP_VyrashivaniePerehodaZatravkaSHejka;
		ERROR PROCESS RA_VyrashivanieSHejki;
		ERROR PROCESS UprezhdenieOtryvaSHejki;
		ERROR PROCESS PreduprezhdenieOmalomDkr;
		ERROR PROCESS ProgrammnyjSbrosTemperatury;
		ERROR PROCESS RA_TP_VyrashivaniePerehodaSHejkaKonus;
		ERROR PROCESS RA_VyrashivanieKonusa;
		ERROR PROCESS RA_VyrashivaniePerehodaKonusTSilindr;
		ERROR PROCESS RA_StabilizatsiyaTSilindra;
		ERROR PROCESS KontrolqOkonchaniyaTSilindra;
		ERROR PROCESS RA_TP_VyrashivanieTSilindra;
		ERROR PROCESS RA_TP_VyrashivaniePerehodaTSilindrObratnyjKonus;
		ERROR PROCESS RA_TP_VyrashivanieObratnogoKonusa;
		ERROR PROCESS ZAT_RS_OK;
		ERROR PROCESS RA_OtryvKristalla;
		ERROR PROCESS VR_TIG_OTRYV_KRISTALLA;
		ERROR PROCESS KontrolqOtryva_OtryvKristalla;
		ERROR PROCESS ZAT_RS_OTRYV_KRISTALLA;
		ERROR PROCESS RA_TP_OhlazhdenieKristalla;
		ERROR PROCESS RA_PodgotovkaRazgruzkeKristalla;
		ERROR PROCESS RezhimRA;
		ERROR PROCESS RezhimKRP;
		ERROR PROCESS KRP;
		ERROR PROCESS RezhimOTZHIG;
		ERROR PROCESS OtzhigTeplovogoUzla;
		ERROR PROCESS RezhimDVK;
		ERROR PROCESS DVK_VyrashivanieObratnogoKonusa;
		ERROR PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_SHejka;
		ERROR PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_TSilindr;
		START PROCESS VKL_VPO;
		START PROCESS RezhimRR;
		IF (TekushijEtap >= ETAP_OTZHIG_TEPLOVOGO_UZLA) THEN
			TekushijEtap := ETAP_OTZHIG_TEPLOVOGO_UZLA;
		END_IF
		SET STATE ProverkaKontsaROst;
	END_STATE
	
	STATE ProverkaKontsaROst 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KonetsRaboty
	STATE Nachalo 
		TekushijRezhim := REZHIM_KONETS_RABOTY;
		START PROCESS VYK_IPN;
		START PROCESS VYK_ZAT_VR;
		START PROCESS VYK_TIG_VR;
		START PROCESS VYK_ZATRAVKU;
		START PROCESS VYK_TIGELQ;
		SET NEXT;
	END_STATE
	
	STATE ProverkaPrihodaVIshodnoe 
		IF (NOT (PROCESS VYK_IPN IN STATE ACTIVE) AND NOT (PROCESS VYK_ZAT_VR IN STATE ACTIVE) AND NOT (PROCESS VYK_TIG_VR IN STATE ACTIVE) AND NOT (PROCESS VYK_ZATRAVKU IN STATE ACTIVE) AND NOT (PROCESS VYK_TIGELQ IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Vyklyuchenie24_48V 
		IF (_FUNCTION_ + KONETS_RABOTY_D2) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Konets;
		END_TIMEOUT
	END_STATE
	
	STATE TajmautDlyaNadezhnostiDostavkiSoobsheniyaVPIV 
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Konets;
		END_TIMEOUT
	END_STATE
	
	STATE Konets 
		_VOID_ := _FUNCTION_;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandIzmeneniyaTK_ot_PIV
	STATE Analiz 
		CASE (KodSobytiya_ot_PIV) OF
			IZMN_TK_MnachalqnojZagruzki:
				TK_MnachalqnojZagruzki := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_MnachalqnojZagruzki;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_GlubokijVakuum_R2:
				TK_GlubokijVakuum_R2 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_GlubokijVakuum_R2;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TotkachkiDopustimoe_T2doP2:
				TK_TotkachkiDopustimoe_T2doP2 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TotkachkiDopustimoe_T2doP2;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaOtkachkiPosleOsushki_T5:
				TK_VremyaOtkachkiPosleOsushki_T5 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaOtkachkiPosleOsushki_T5;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaOtkachkiDopustimoe_T7:
				TK_VremyaOtkachkiDopustimoe_T7 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaOtkachkiDopustimoe_T7;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_CHisloTSiklovOsushki_Nts:
				TK_CHisloTSiklovOsushki_Nts := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_CHisloTSiklovOsushki_Nts;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaProduvki_T3:
				TK_VremyaProduvki_T3 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaProduvki_T3;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TotkachkiArgona_T4:
				TK_TotkachkiArgona_T4 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TotkachkiArgona_T4;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PredelDopRnkPosleKontrolyaNatek_R3:
				TK_PredelDopRnkPosleKontrolyaNatek_R3 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PredelDopRnkPosleKontrolyaNatek_R3;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Totgazovki_KontrNat:
				TK_Totgazovki_KontrNat := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Totgazovki_KontrNat;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PeriodKontrolya_KontrNat:
				TK_PeriodKontrolya_KontrNat := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PeriodKontrolya_KontrNat;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DopustimoeNatekanie_KntrNat:
				TK_DopustimoeNatekanie_KntrNat := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DopustimoeNatekanie_KntrNat;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Qgaza_PPZ:
				TK_ZD_Qgaza_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Qgaza_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Pnk_PPZ:
				TK_ZD_Pnk_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Pnk_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Wipn_K1_PPZ:
				TK_ZD_Wipn_K1_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Wipn_K1_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Wipn_K2_PPZ:
				TK_ZD_Wipn_K2_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Wipn_K2_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Tr_PPZ:
				TK_ZD_Tr_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Tr_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Vrosta_PPZ:
				TK_ZD_Vrosta_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Vrosta_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Hur_PPZ:
				TK_ZD_Hur_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Hur_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Dkr_PPZ:
				TK_ZD_Dkr_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Dkr_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_VzR_PPZ:
				TK_ZD_VzR_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_VzR_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_VzU_PPZ:
				TK_ZD_VzU_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_VzU_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Xz_PPZ:
				TK_ZD_Xz_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Xz_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Wz_PPZ:
				TK_ZD_Wz_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Wz_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Wz_UGOL_PPZ:
				TK_ZD_Wz_UGOL_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Wz_UGOL_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_VtR_PPZ:
				TK_ZD_VtR_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_VtR_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_VtU_PPZ:
				TK_ZD_VtU_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_VtU_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Xt_PPZ:
				TK_ZD_Xt_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Xt_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Wt_PPZ:
				TK_ZD_Wt_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Wt_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Wt_UGOL_PPZ:
				TK_ZD_Wt_UGOL_PPZ := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Wt_UGOL_PPZ;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Qgaza_PodgStabRaspl:
				TK_Qgaza_PodgStabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Qgaza_PodgStabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pnk_PodgStabRaspl:
				TK_Pnk_PodgStabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pnk_PodgStabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Hur_PodgStabRaspl:
				TK_Hur_PodgStabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Hur_PodgStabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Rezhim_StabRaspl:
				TK_Rezhim_StabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Rezhim_StabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Vremya_StabRaspl:
				TK_Vremya_StabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Vremya_StabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Wt_PodgStabRaspl:
				TK_Wt_PodgStabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Wt_PodgStabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Wipn_K1_PodgStabRaspl:
				TK_Wipn_K1_PodgStabRaspl := _FUNCTION_ * 1000.0;
				KodSobytiya_k_PIV := IZMN_TK_Wipn_K1_PodgStabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Tr_StabRaspl:
				TK_Tr_StabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Tr_StabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TnOzh_StabRasp:
				TK_TnOzh_StabRasp := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TnOzh_StabRasp;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaOsred_Tn_StabRaspl:
				TK_VremyaOsred_Tn_StabRaspl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaOsred_Tn_StabRaspl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_RasstoyanieDoRasplava_Lpp:
				TK_RasstoyanieDoRasplava_Lpp := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_RasstoyanieDoRasplava_Lpp;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzDvizheniya_kRasplavu_Vpp:
				TK_VzDvizheniya_kRasplavu_Vpp := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzDvizheniya_kRasplavu_Vpp;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Wz_Zatravl:
				TK_Wz_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Wz_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Vz_Pogruzheniya_Zatravl:
				TK_Vz_Pogruzheniya_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Vz_Pogruzheniya_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Wt_Zatravl:
				TK_Wt_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Wt_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Dmin_Zatravl:
				TK_Dmin_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Dmin_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Dmaks_Zatravl:
				TK_Dmaks_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Dmaks_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TclepogoPlavleniya_Zatravl:
				TK_TclepogoPlavleniya_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TclepogoPlavleniya_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TozhidaniyaDiametra_Zatravl:
				TK_TozhidaniyaDiametra_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TozhidaniyaDiametra_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Hur_Zatravl:
				TK_Hur_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Hur_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Tn_Zatravl:
				TK_Tn_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Tn_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pnk_Zatravl:
				TK_Pnk_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pnk_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Qgaza_Zatravl:
				TK_Qgaza_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Qgaza_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Hpogr_Zatravl:
				TK_Hpogr_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Hpogr_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzVytyagivaniya_Zatravl:
				TK_VzVytyagivaniya_Zatravl := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzVytyagivaniya_Zatravl;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DiametrDendrita:
				TK_DiametrDendrita := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DiametrDendrita;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Ki_Dkr_SHejka:
				TK_Ki_Dkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Ki_Dkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kd_Dkr_SHejka:
				TK_Kd_Dkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kd_Dkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kp_Dkr_SHejka:
				TK_Kp_Dkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kp_Dkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kz_Dkr_SHejka:
				TK_Kz_Dkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kz_Dkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pauza_Dkr_SHejka:
				TK_Pauza_Dkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pauza_Dkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VslepogoVyrashivaniya_SHejka:
				TK_VslepogoVyrashivaniya_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VslepogoVyrashivaniya_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PopravkaTn_SHejka:
				TK_PopravkaTn_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PopravkaTn_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TclepogoVyrashivaniya_SHejka:
				TK_TclepogoVyrashivaniya_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TclepogoVyrashivaniya_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DkrOzhidaemyj_SHejka:
				TK_DkrOzhidaemyj_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DkrOzhidaemyj_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Popr_kTn_poDkro_SHejka:
				TK_Popr_kTn_poDkro_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Popr_kTn_poDkro_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Dkr_SHejka:
				TK_ZD_Dkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Dkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Ki_Vrosta_SHejka:
				TK_Ki_Vrosta_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Ki_Vrosta_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kd_Vrosta_SHejka:
				TK_Kd_Vrosta_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kd_Vrosta_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kp_Vrosta_SHejka:
				TK_Kp_Vrosta_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kp_Vrosta_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kz_Vrosta_SHejka:
				TK_Kz_Vrosta_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kz_Vrosta_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pauza_Vrosta_SHejka:
				TK_Pauza_Vrosta_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pauza_Vrosta_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_ZD_Vrosta_SHejka:
				TK_ZD_Vrosta_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_ZD_Vrosta_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Dkr_NachalaSchetaDliny_SHejka:
				TK_Dkr_NachalaSchetaDliny_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Dkr_NachalaSchetaDliny_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DkrOtbrakovki_SHejka:
				TK_DkrOtbrakovki_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DkrOtbrakovki_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DlinaHoroshejCHasti_SHejka:
				TK_DlinaHoroshejCHasti_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DlinaHoroshejCHasti_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VponizheniyaTemperatury_SHejka:
				TK_VponizheniyaTemperatury_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VponizheniyaTemperatury_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_BezopasnyjDkr_SHejka:
				TK_BezopasnyjDkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_BezopasnyjDkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzBezopasnoeSrednee:
				TK_VzBezopasnoeSrednee := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzBezopasnoeSrednee;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzBezopasnoe_SHejka:
				TK_VzBezopasnoe_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzBezopasnoe_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TbezopasnojSkorosti_SHejka:
				TK_TbezopasnojSkorosti_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TbezopasnojSkorosti_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_TstabilizatsiiDkr_SHejka:
				TK_TstabilizatsiiDkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_TstabilizatsiiDkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VerhnijPorogPodrezkiDkr_SHejka:
				TK_VerhnijPorogPodrezkiDkr_SHejka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VerhnijPorogPodrezkiDkr_SHejka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PopravkaTn_Konus:
				TK_PopravkaTn_Konus := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PopravkaTn_Konus;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Vz_Konus:
				TK_Vz_Konus := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Vz_Konus;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DkonusaKonechnyj_Konus:
				TK_DkonusaKonechnyj_Konus := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DkonusaKonechnyj_Konus;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_K1_Konusa:
				TK_K1_Konusa := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_K1_Konusa;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_K2_Konusa:
				TK_K2_Konusa := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_K2_Konusa;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Ki_Dkr_StabTSil:
				TK_Ki_Dkr_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Ki_Dkr_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kp_Dkr_StabTSil:
				TK_Kp_Dkr_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kp_Dkr_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kd_Dkr_StabTSil:
				TK_Kd_Dkr_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kd_Dkr_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kz_Dkr_StabTSil:
				TK_Kz_Dkr_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kz_Dkr_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pauza_Dkr_StabTSil:
				TK_Pauza_Dkr_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pauza_Dkr_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaPerehodaKonusTSilindr:
				TK_VremyaPerehodaKonusTSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaPerehodaKonusTSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DkrTSilindra_KonTSil:
				TK_DkrTSilindra_KonTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DkrTSilindra_KonTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_K1_KonTSil:
				TK_K1_KonTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_K1_KonTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_K2_KonTSil:
				TK_K2_KonTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_K2_KonTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VrazrashivaniyaGr_KonTSil:
				TK_VrazrashivaniyaGr_KonTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VrazrashivaniyaGr_KonTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PopravkaTn_StabTSil:
				TK_PopravkaTn_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PopravkaTn_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzStabNachalqnaya_StabTSil:
				TK_VzStabNachalqnaya_StabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzStabNachalqnaya_StabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaStabTSil:
				TK_VremyaStabTSil := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaStabTSil;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Ki_Dkr_TSilindr:
				TK_Ki_Dkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Ki_Dkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kp_Dkr_TSilindr:
				TK_Kp_Dkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kp_Dkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kd_Dkr_TSilindr:
				TK_Kd_Dkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kd_Dkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kz_Dkr_TSilindr:
				TK_Kz_Dkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kz_Dkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pauza_Dkr_TSilindr:
				TK_Pauza_Dkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pauza_Dkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kp_Vrosta_TSilindr:
				TK_Kp_Vrosta_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kp_Vrosta_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Ki_Vrosta_TSilindr:
				TK_Ki_Vrosta_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Ki_Vrosta_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kd_Vrosta_TSilindr:
				TK_Kd_Vrosta_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kd_Vrosta_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Kz_Vrosta_TSilindr:
				TK_Kz_Vrosta_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Kz_Vrosta_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Pauza_Vrosta_TSilindr:
				TK_Pauza_Vrosta_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Pauza_Vrosta_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VerhnijPorogPodrezkiDkr_TSilindr:
				TK_VerhnijPorogPodrezkiDkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VerhnijPorogPodrezkiDkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzBezopasnoe_TSilindr:
				TK_VzBezopasnoe_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzBezopasnoe_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_REZERV_1:
				TK_REZERV_1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_REZERV_1;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_REZERV_2:
				TK_REZERV_2 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_REZERV_2;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_REZERV_3:
				TK_REZERV_3 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_REZERV_3;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_REZERV_4:
				TK_REZERV_4 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_REZERV_4;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_REZERV_5:
				TK_REZERV_5 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_REZERV_5;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PorogovayaLkr_TSilindr:
				TK_PorogovayaLkr_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PorogovayaLkr_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Zagruzki:
				TK_Zagruzki := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Zagruzki;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_PorogovayaMrasplava_TSilindr:
				TK_PorogovayaMrasplava_TSilindr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_PorogovayaMrasplava_TSilindr;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_Normirovanie_Vremeni:
				TK_Normirovanie_Vremeni := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_Normirovanie_Vremeni;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VremyaIzmeneniya_V_Diametra:
				TK_VremyaIzmeneniya_V_Diametra := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VremyaIzmeneniya_V_Diametra;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_KorrektsiiSkorosti:
				TK_KorrektsiiSkorosti := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_KorrektsiiSkorosti;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_AvarijnayaSkorostqPodrezki:
				TK_AvarijnayaSkorostqPodrezki := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_AvarijnayaSkorostqPodrezki;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_SlabayaPodrezka:
				TK_SlabayaPodrezka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_SlabayaPodrezka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_SilqnayaPodrezka:
				TK_SilqnayaPodrezka := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_SilqnayaPodrezka;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DlinaPerehodaTSilindrKonus:
				TK_DlinaPerehodaTSilindrKonus := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DlinaPerehodaTSilindrKonus;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_DELQTA_Wt_OTRYV_KRISTALLA:
				TK_DELQTA_Wt_OTRYV_KRISTALLA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_DELQTA_Wt_OTRYV_KRISTALLA;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_UskoreniePriOtryveKristalla:
				TK_UskoreniePriOtryveKristalla := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_UskoreniePriOtryveKristalla;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			IZMN_TK_VzPosleOtryvaKristalla:
				TK_VzPosleOtryvaKristalla := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_TK_VzPosleOtryvaKristalla;
				SET STATE PodtverzhdenieIzmeneniyaTK;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE PodtverzhdenieIzmeneniyaTK 
		IF (_FUNCTION_ + KodSobytiya_k_PIV + _FUNCTION_) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandIzmeneniyaNP_ot_PIV
	VAR
		LP_Parametr_k_PIV : REAL;
	END_VAR
	
	STATE Analiz 
		CASE (KodSobytiya_ot_PIV) OF
			IZMN_NP_FlagRaschetaHur_poDU:
				NP_FlagRaschetaHur_poDU := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_FlagRaschetaHur_poDU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_FlagRaschetaHur_poDV:
				NP_FlagRaschetaHur_poDV := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_FlagRaschetaHur_poDV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_FlagRaschetaDkr_poTDD:
				NP_FlagRaschetaDkr_poTDD := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_FlagRaschetaDkr_poTDD;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_FlagRaschetaDkr_poDV:
				NP_FlagRaschetaDkr_poDV := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_FlagRaschetaDkr_poDV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Tizmereniya_Dkr_DV:
				NP_Tizmereniya_Dkr_DV := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Tizmereniya_Dkr_DV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Lz_OT_KVP_DO_DP_Lppz:
				NP_Lz_OT_KVP_DO_DP_Lppz := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Lz_OT_KVP_DO_DP_Lppz;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Lz_OT_KVP_DO_STYKA_NK:
				NP_Lz_OT_KVP_DO_STYKA_NK := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Lz_OT_KVP_DO_STYKA_NK;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_L_OT_STYKA_NK_DO_PNUR_L1:
				NP_L_OT_STYKA_NK_DO_PNUR_L1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_L_OT_STYKA_NK_DO_PNUR_L1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Lz_OT_KVP_DO_KNP:
				IF (_FUNCTION_ > 1000.0) THEN
					NP_Lz_OT_KVP_DO_KNP := _FUNCTION_;
					KodSobytiya_k_PIV := IZMN_NP_Lz_OT_KVP_DO_KNP;
					SET STATE PodtverzhdenieIzmeneniyaNP;
				ELSE 
					KodSobytiya_k_PIV := PK_PIV_NP_Lz_OT_KVP_DO_KNP_VNE_DIAPAZONA;
					SET STATE NP_VneDiapazona;
				END_IF
			IZMN_NP_Kdv:
				NP_Kdv := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kdv;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Mzatravkoderzhatelya:
				NP_Mzatravkoderzhatelya := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Mzatravkoderzhatelya;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMERITQ_NP_Mzatravkoderzhatelya:
				NP_Mzatravkoderzhatelya := _FUNCTION_ + NOMER_KANALA_ATSP_PokazaniyaDatchikaVesa;
				KodSobytiya_k_PIV := IZMN_NP_Mzatravkoderzhatelya;
				LP_Parametr_k_PIV := NP_Mzatravkoderzhatelya;
				SET STATE PodtverzhdenieIzmereniyaNP;
			IZMN_OP_Mzatravki:
				OP_Mzatravki := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_OP_Mzatravki;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMERITQ_OP_Mzatravki:
				OP_Mzatravki := _FUNCTION_ + NOMER_KANALA_ATSP_PokazaniyaDatchikaVesa - NP_Mzatravkoderzhatelya;
				KodSobytiya_k_PIV := IZMN_OP_Mzatravki;
				LP_Parametr_k_PIV := OP_Mzatravki;
				SET STATE PodtverzhdenieIzmereniyaNP;
			IZMN_NP_Mtrosa:
				NP_Mtrosa := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Mtrosa;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMERITQ_NP_Mtrosa:
				NP_Mtrosa := _FUNCTION_ + NOMER_KANALA_ATSP_PokazaniyaDatchikaVesa - NP_Mzatravkoderzhatelya;
				KodSobytiya_k_PIV := IZMN_NP_Mtrosa;
				LP_Parametr_k_PIV := NP_Mtrosa;
				SET STATE PodtverzhdenieIzmereniyaNP;
			IZMN_OP_Lsumm_TSilindrov:
				OP_Lsumm_TSilindrov := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_OP_Lsumm_TSilindrov;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_OP_Tsumm_TSilindrov:
				OP_Tsumm_TSilindrov := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_OP_Tsumm_TSilindrov;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_OP_Msumm_TSilindrov:
				OP_Msumm_TSilindrov := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_OP_Msumm_TSilindrov;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MaksimalqnayaVzR:
				NP_MaksimalqnayaVzR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_MaksimalqnayaVzR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Lt_OT_KNP_DO_KVP:
				NP_Lt_OT_KNP_DO_KVP := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Lt_OT_KNP_DO_KVP;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR:
				NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_ObqemVakPolosti_V:
				NP_ObqemVakPolosti_V := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_ObqemVakPolosti_V;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DavlenieVklyucheniyaDVN_P1:
				NP_DavlenieVklyucheniyaDVN_P1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_DavlenieVklyucheniyaDVN_P1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KontrolqnoeVremyaDostizheniyaP1_T1:
				NP_KontrolqnoeVremyaDostizheniyaP1_T1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_KontrolqnoeVremyaDostizheniyaP1_T1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Patmosf:
				NP_Patmosf := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Patmosf;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaQgaza:
				NP_VremyaPerehodnogoProtsessaQgaza := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaQgaza;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PogreshnostqQgaza:
				NP_PogreshnostqQgaza := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PogreshnostqQgaza;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Ppor:
				NP_Ppor := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Ppor;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_NA_OTKR:
				NP_KOEF_NA_OTKR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_NA_OTKR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_NA_ZAKR:
				NP_KOEF_NA_ZAKR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_NA_ZAKR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaPnk:
				NP_VremyaPerehodnogoProtsessaPnk := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaPnk;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_TokZashityModulya_IP2K_K1:
				NP_TokZashityModulya_IP2K_K1 := _FUNCTION_;
				START PROCESS PeredachaNP_TokZashityModulya_IP2K_K1;
				KodSobytiya_k_PIV := IZMN_NP_TokZashityModulya_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1:
				NP_SkorostqIzmeneniya_W_IP2K_K1 := _FUNCTION_;
				START PROCESS PeredachaNP_SkorostqIzmeneniya_W_IP2K_K1;
				KodSobytiya_k_PIV := IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MinimalqnoeKolichestvoModulej_IP2K_K1:
				NP_MinimalqnoeKolichestvoModulej_IP2K_K1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_MinimalqnoeKolichestvoModulej_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE:
				NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA:
				NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_UstavkaPotokaOhlZHidkosti_IP2K_K1:
				NP_UstavkaPotokaOhlZHidkosti_IP2K_K1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_UstavkaPotokaOhlZHidkosti_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1:
				NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1:
				NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NizhnyayaGranitsaRiz_IP2K_K1:
				NP_NizhnyayaGranitsaRiz_IP2K_K1 := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_NizhnyayaGranitsaRiz_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1:
				NP_NizhnyayaGranitsaRn_IP2K_K1 := _FUNCTION_ / 1000.0;
				KodSobytiya_k_PIV := IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1:
				NP_VerhnyayaGranitsaRn_IP2K_K1 := _FUNCTION_ / 1000.0;
				KodSobytiya_k_PIV := IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaWptd:
				NP_VremyaPerehodnogoProtsessaWptd := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaWptd;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_Wptd:
				NP_Kp_Wptd := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_Wptd;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_TipIPN:
				NP_TipIPN := _FUNCTION_;
				IF (NP_TipIPN = IPN_PTD) THEN
					STOP PROCESS VosstanovlenieSvyaziS_IP2K_K1;
					_VOID_ := _FUNCTION_;
					STOP PROCESS ObrabotkaKomandOtIP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_PotokOhlazhdVody_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TemperaturaOhlNaVhode_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TemperaturaOhlNaVyhode_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_Riz_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TokModulya0_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TokModulya1_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TokModulya2_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TokModulya3_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TokModulya4_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TokModulya5_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TempModulya0_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TempModulya1_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TempModulya2_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TempModulya3_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TempModulya4_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_TempModulya5_IP2K_K1;
					STOP PROCESS KontrolqIzmeneniya_FP_U380_IP2K_K1;
					STOP PROCESS KontrolqKolichestvaModulej_IP2K_K1;
					Flag_NalichiyaModulya0_IP2K_K1 := VYKL;
					Flag_NalichiyaModulya1_IP2K_K1 := VYKL;
					Flag_NalichiyaModulya2_IP2K_K1 := VYKL;
					Flag_NalichiyaModulya3_IP2K_K1 := VYKL;
					Flag_NalichiyaModulya4_IP2K_K1 := VYKL;
					Flag_NalichiyaModulya5_IP2K_K1 := VYKL;
				ELSE 
					START PROCESS VosstanovlenieSvyaziS_IP2K_K1;
					START PROCESS ObrabotkaKomandOtIP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_PotokOhlazhdVody_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TemperaturaOhlNaVhode_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TemperaturaOhlNaVyhode_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_Riz_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TokModulya0_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TokModulya1_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TokModulya2_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TokModulya3_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TokModulya4_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TokModulya5_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TempModulya0_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TempModulya1_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TempModulya2_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TempModulya3_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TempModulya4_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_TempModulya5_IP2K_K1;
					START PROCESS KontrolqIzmeneniya_FP_U380_IP2K_K1;
					START PROCESS KontrolqKolichestvaModulej_IP2K_K1;
					Flag_NalichiyaModulya0_IP2K_K1 := VKL;
					Flag_NalichiyaModulya1_IP2K_K1 := VKL;
					Flag_NalichiyaModulya2_IP2K_K1 := VKL;
					Flag_NalichiyaModulya3_IP2K_K1 := VKL;
					Flag_NalichiyaModulya4_IP2K_K1 := VKL;
					Flag_NalichiyaModulya5_IP2K_K1 := VKL;
				END_IF
				KodSobytiya_k_PIV := IZMN_NP_TipIPN;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Pauza_Wptd:
				NP_Pauza_Wptd := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Pauza_Wptd;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PogreshnostqWipn_K1:
				NP_PogreshnostqWipn_K1 := _FUNCTION_ * 1000.0;
				KodSobytiya_k_PIV := IZMN_NP_PogreshnostqWipn_K1;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Iptd_MAH:
				NP_Iptd_MAH := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Iptd_MAH;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Wipn_K1_MAH:
				NP_Wipn_K1_MAH := _FUNCTION_ * 1000.0;
				KodSobytiya_k_PIV := IZMN_NP_Wipn_K1_MAH;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DeltaW_Razogreva:
				NP_DeltaW_Razogreva := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_DeltaW_Razogreva;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DeltaVremeniRazogreva:
				NP_DeltaVremeniRazogreva := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_DeltaVremeniRazogreva;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Tn_MAX:
				NP_Tn_MAX := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Tn_MAX;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_Tn:
				NP_Kp_Tn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_Tn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kd_Tn:
				NP_Kd_Tn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kd_Tn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Ki_Tn:
				NP_Ki_Tn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Ki_Tn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kz_Tn:
				NP_Kz_Tn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kz_Tn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaTn:
				NP_VremyaPerehodnogoProtsessaTn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaTn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PogreshnostqTn:
				NP_PogreshnostqTn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PogreshnostqTn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Pauza_Tn:
				NP_Pauza_Tn := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Pauza_Tn;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_Tr:
				NP_Kp_Tr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_Tr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kd_Tr:
				NP_Kd_Tr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kd_Tr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Ki_Tr:
				NP_Ki_Tr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Ki_Tr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kz_Tr:
				NP_Kz_Tr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kz_Tr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Pauza_Tr:
				NP_Pauza_Tr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Pauza_Tr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Tr_MAX:
				NP_Tr_MAX := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Tr_MAX;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaTr:
				NP_VremyaPerehodnogoProtsessaTr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaTr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PogreshnostqTr:
				NP_PogreshnostqTr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PogreshnostqTr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DeltaTr_MAX:
				NP_DeltaTr_MAX := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_DeltaTr_MAX;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PopravkaVtR_Nur:
				NP_PopravkaVtR_Nur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PopravkaVtR_Nur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AH_DU:
				NP_AH_DU := _FUNCTION_;
				START PROCESS PeredachaNP_AH_DU;
				KodSobytiya_k_PIV := IZMN_NP_AH_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BH_DU:
				NP_BH_DU := _FUNCTION_;
				START PROCESS PeredachaNP_BH_DU;
				KodSobytiya_k_PIV := IZMN_NP_BH_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_CH_DU:
				NP_CH_DU := _FUNCTION_;
				START PROCESS PeredachaNP_CH_DU;
				KodSobytiya_k_PIV := IZMN_NP_CH_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_THRESH_DU:
				NP_THRESH_DU := _FUNCTION_;
				START PROCESS PeredachaNP_THRESH_DU;
				KodSobytiya_k_PIV := IZMN_NP_THRESH_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DRELQ_DU:
				NP_DRELQ_DU := _FUNCTION_;
				START PROCESS PeredachaNP_DRELQ_DU;
				KodSobytiya_k_PIV := IZMN_NP_DRELQ_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_THRESH_GIST_DU:
				NP_THRESH_GIST_DU := _FUNCTION_;
				START PROCESS PeredachaNP_THRESH_GIST_DU;
				KodSobytiya_k_PIV := IZMN_NP_THRESH_GIST_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MAX_SIGNAL_VALUE_DU:
				NP_MAX_SIGNAL_VALUE_DU := _FUNCTION_;
				START PROCESS PeredachaNP_MAX_SIGNAL_VALUE_DU;
				KodSobytiya_k_PIV := IZMN_NP_MAX_SIGNAL_VALUE_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_T_MAX_DU:
				NP_T_MAX_DU := _FUNCTION_;
				START PROCESS PeredachaNP_T_MAX_DU;
				KodSobytiya_k_PIV := IZMN_NP_T_MAX_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_H_MAX_DU:
				NP_H_MAX_DU := _FUNCTION_;
				START PROCESS PeredachaNP_H_MAX_DU;
				KodSobytiya_k_PIV := IZMN_NP_H_MAX_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_H_MIN_DU:
				NP_H_MIN_DU := _FUNCTION_;
				START PROCESS PeredachaNP_H_MIN_DU;
				KodSobytiya_k_PIV := IZMN_NP_H_MIN_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_WIDTH_PEAK_MAX_DU:
				NP_WIDTH_PEAK_MAX_DU := _FUNCTION_;
				START PROCESS PeredachaNP_WIDTH_PEAK_MAX_DU;
				KodSobytiya_k_PIV := IZMN_NP_WIDTH_PEAK_MAX_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_ADAPT_LENGTH_DU:
				NP_ADAPT_LENGTH_DU := _FUNCTION_;
				START PROCESS PeredachaNP_ADAPT_LENGTH_DU;
				KodSobytiya_k_PIV := IZMN_NP_ADAPT_LENGTH_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOL_KALIBR_DU:
				NP_KOL_KALIBR_DU := _FUNCTION_;
				START PROCESS PeredachaNP_KOL_KALIBR_DU;
				KodSobytiya_k_PIV := IZMN_NP_KOL_KALIBR_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NLINE1_DU:
				NP_NLINE1_DU := _FUNCTION_;
				START PROCESS PeredachaNP_NLINE1_DU;
				KodSobytiya_k_PIV := IZMN_NP_NLINE1_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NLINE2_DU:
				NP_NLINE2_DU := _FUNCTION_;
				START PROCESS PeredachaNP_NLINE2_DU;
				KodSobytiya_k_PIV := IZMN_NP_NLINE2_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RELATIV_QUALITY_DU:
				NP_RELATIV_QUALITY_DU := _FUNCTION_;
				START PROCESS PeredachaNP_RELATIV_QUALITY_DU;
				KodSobytiya_k_PIV := IZMN_NP_RELATIV_QUALITY_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MIN_SIGN_RANGE_DU:
				NP_MIN_SIGN_RANGE_DU := _FUNCTION_;
				START PROCESS PeredachaNP_MIN_SIGN_RANGE_DU;
				KodSobytiya_k_PIV := IZMN_NP_MIN_SIGN_RANGE_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MIDDLE_DU:
				NP_MIDDLE_DU := _FUNCTION_;
				START PROCESS PeredachaNP_MIDDLE_DU;
				KodSobytiya_k_PIV := IZMN_NP_MIDDLE_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MIDDLE_SIGN_DU:
				NP_MIDDLE_SIGN_DU := _FUNCTION_;
				START PROCESS PeredachaNP_MIDDLE_SIGN_DU;
				KodSobytiya_k_PIV := IZMN_NP_MIDDLE_SIGN_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BAD_NUMB_DU:
				NP_BAD_NUMB_DU := _FUNCTION_;
				START PROCESS PeredachaNP_BAD_NUMB_DU;
				KodSobytiya_k_PIV := IZMN_NP_BAD_NUMB_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_CORRECT_LEVEL_LASER_1_DU:
				NP_CORRECT_LEVEL_LASER_1_DU := _FUNCTION_;
				START PROCESS PeredachaNP_CORRECT_LEVEL_LASER_1_DU;
				KodSobytiya_k_PIV := IZMN_NP_CORRECT_LEVEL_LASER_1_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_EXPOSURE_TIME0_DU:
				NP_EXPOSURE_TIME0_DU := _FUNCTION_;
				START PROCESS PeredachaNP_EXPOSURE_TIME0_DU;
				KodSobytiya_k_PIV := IZMN_NP_EXPOSURE_TIME0_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_EXPOSURE_TIME1_DU:
				NP_EXPOSURE_TIME1_DU := _FUNCTION_;
				START PROCESS PeredachaNP_EXPOSURE_TIME1_DU;
				KodSobytiya_k_PIV := IZMN_NP_EXPOSURE_TIME1_DU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_XTOLER:
				NP_XTOLER := _FUNCTION_;
				START PROCESS PeredachaNP_XTOLER;
				KodSobytiya_k_PIV := IZMN_NP_XTOLER;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_YTOLER:
				NP_YTOLER := _FUNCTION_;
				START PROCESS PeredachaNP_YTOLER;
				KodSobytiya_k_PIV := IZMN_NP_YTOLER;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_YDOWNTOLER:
				NP_YDOWNTOLER := _FUNCTION_;
				START PROCESS PeredachaNP_YDOWNTOLER;
				KodSobytiya_k_PIV := IZMN_NP_YDOWNTOLER;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NUMOFSTR:
				NP_NUMOFSTR := _FUNCTION_;
				START PROCESS PeredachaNP_NUMOFSTR;
				KodSobytiya_k_PIV := IZMN_NP_NUMOFSTR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_THRRELIAB:
				NP_THRRELIAB := _FUNCTION_;
				START PROCESS PeredachaNP_THRRELIAB;
				KodSobytiya_k_PIV := IZMN_NP_THRRELIAB;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_THRDERIV:
				NP_THRDERIV := _FUNCTION_;
				START PROCESS PeredachaNP_THRDERIV;
				KodSobytiya_k_PIV := IZMN_NP_THRDERIV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_THRDERIVCLB:
				NP_THRDERIVCLB := _FUNCTION_;
				START PROCESS PeredachaNP_THRDERIVCLB;
				KodSobytiya_k_PIV := IZMN_NP_THRDERIVCLB;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGZERO_LVL:
				NP_BIGZERO_LVL := _FUNCTION_;
				START PROCESS PeredachaNP_BIGZERO_LVL;
				KodSobytiya_k_PIV := IZMN_NP_BIGZERO_LVL;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGPLUS_LVL:
				NP_BIGPLUS_LVL := _FUNCTION_;
				START PROCESS PeredachaNP_BIGPLUS_LVL;
				KodSobytiya_k_PIV := IZMN_NP_BIGPLUS_LVL;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLZERO_LVL:
				NP_SMALLZERO_LVL := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLZERO_LVL;
				KodSobytiya_k_PIV := IZMN_NP_SMALLZERO_LVL;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLPLUS_LVL:
				NP_SMALLPLUS_LVL := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLPLUS_LVL;
				KodSobytiya_k_PIV := IZMN_NP_SMALLPLUS_LVL;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MINAVERTIME:
				NP_MINAVERTIME := _FUNCTION_;
				START PROCESS PeredachaNP_MINAVERTIME;
				KodSobytiya_k_PIV := IZMN_NP_MINAVERTIME;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGZERO_CTG:
				NP_BIGZERO_CTG := _FUNCTION_;
				START PROCESS PeredachaNP_BIGZERO_CTG;
				KodSobytiya_k_PIV := IZMN_NP_BIGZERO_CTG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGZERO_KY:
				NP_BIGZERO_KY := _FUNCTION_;
				START PROCESS PeredachaNP_BIGZERO_KY;
				KodSobytiya_k_PIV := IZMN_NP_BIGZERO_KY;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGZERO_X:
				NP_BIGZERO_X := _FUNCTION_;
				START PROCESS PeredachaNP_BIGZERO_X;
				KodSobytiya_k_PIV := IZMN_NP_BIGZERO_X;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGZERO_TG:
				NP_BIGZERO_TG := _FUNCTION_;
				START PROCESS PeredachaNP_BIGZERO_TG;
				KodSobytiya_k_PIV := IZMN_NP_BIGZERO_TG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGPLUS_CTG:
				NP_BIGPLUS_CTG := _FUNCTION_;
				START PROCESS PeredachaNP_BIGPLUS_CTG;
				KodSobytiya_k_PIV := IZMN_NP_BIGPLUS_CTG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGPLUS_KY:
				NP_BIGPLUS_KY := _FUNCTION_;
				START PROCESS PeredachaNP_BIGPLUS_KY;
				KodSobytiya_k_PIV := IZMN_NP_BIGPLUS_KY;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGPLUS_X:
				NP_BIGPLUS_X := _FUNCTION_;
				START PROCESS PeredachaNP_BIGPLUS_X;
				KodSobytiya_k_PIV := IZMN_NP_BIGPLUS_X;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_BIGPLUS_TG:
				NP_BIGPLUS_TG := _FUNCTION_;
				START PROCESS PeredachaNP_BIGPLUS_TG;
				KodSobytiya_k_PIV := IZMN_NP_BIGPLUS_TG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLZERO_CTG:
				NP_SMALLZERO_CTG := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLZERO_CTG;
				KodSobytiya_k_PIV := IZMN_NP_SMALLZERO_CTG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLZERO_KY:
				NP_SMALLZERO_KY := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLZERO_KY;
				KodSobytiya_k_PIV := IZMN_NP_SMALLZERO_KY;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLZERO_X:
				NP_SMALLZERO_X := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLZERO_X;
				KodSobytiya_k_PIV := IZMN_NP_SMALLZERO_X;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLZERO_TG:
				NP_SMALLZERO_TG := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLZERO_TG;
				KodSobytiya_k_PIV := IZMN_NP_SMALLZERO_TG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLPLUS_CTG:
				NP_SMALLPLUS_CTG := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLPLUS_CTG;
				KodSobytiya_k_PIV := IZMN_NP_SMALLPLUS_CTG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLPLUS_KY:
				NP_SMALLPLUS_KY := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLPLUS_KY;
				KodSobytiya_k_PIV := IZMN_NP_SMALLPLUS_KY;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLPLUS_X:
				NP_SMALLPLUS_X := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLPLUS_X;
				KodSobytiya_k_PIV := IZMN_NP_SMALLPLUS_X;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_SMALLPLUS_TG:
				NP_SMALLPLUS_TG := _FUNCTION_;
				START PROCESS PeredachaNP_SMALLPLUS_TG;
				KodSobytiya_k_PIV := IZMN_NP_SMALLPLUS_TG;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_POPRAVKA_K_TDD_TSILINDR:
				NP_POPRAVKA_K_TDD_TSILINDR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_POPRAVKA_K_TDD_TSILINDR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_POPRAVKA_K_TDD_SHEJKA:
				NP_POPRAVKA_K_TDD_SHEJKA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_POPRAVKA_K_TDD_SHEJKA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_TARIROVKA_POPRAVKI_K_TDD_TSILINDR:
				NP_POPRAVKA_K_TDD_TSILINDR := _FUNCTION_ - FP_Dkr_TDD;
				KodSobytiya_k_PIV := IZMN_NP_POPRAVKA_K_TDD_TSILINDR;
				LP_Parametr_k_PIV := NP_POPRAVKA_K_TDD_TSILINDR;
				SET STATE PodtverzhdenieIzmereniyaNP;
			IZMN_TARIROVKA_POPRAVKI_K_TDD_SHEJKA:
				NP_POPRAVKA_K_TDD_SHEJKA := _FUNCTION_ - FP_Dkr_TDD;
				KodSobytiya_k_PIV := IZMN_NP_POPRAVKA_K_TDD_SHEJKA;
				LP_Parametr_k_PIV := NP_POPRAVKA_K_TDD_SHEJKA;
				SET STATE PodtverzhdenieIzmereniyaNP;
			IZMN_NP_VremyaOsredneniya_DTN:
				NP_VremyaOsredneniya_DTN := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaOsredneniya_DTN;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Tsm_DTN:
				NP_Tsm_DTN := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Tsm_DTN;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			RASSCHITATQ_NP_Tsm_DTN:
				START PROCESS RasschitatqTsm_DTN;
				STOP;
			IZMN_NP_Tsm_DTR:
				NP_Tsm_DTR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Tsm_DTR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaOsredneniya_DTR:
				NP_VremyaOsredneniya_DTR := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaOsredneniya_DTR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			RASSCHITATQ_NP_Tsm_DTR:
				START PROCESS RasschitatqTsm_DTR;
				STOP;
			IZMN_NP_NOMINAL_KOEF_V_ZR:
				NP_Nominalqnyj_Koef_V_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_Nominalqnyj_Koef_V_ZR;
				KodSobytiya_k_PIV := IZMN_NP_NOMINAL_KOEF_V_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NOMINAL_KOEF_X_ZR:
				NP_Nominalqnyj_Koef_X_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_Nominalqnyj_Koef_X_ZR;
				KodSobytiya_k_PIV := IZMN_NP_NOMINAL_KOEF_X_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NOMINAL_KOEF_V_ZU:
				NP_Nominalqnyj_Koef_V_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_Nominalqnyj_Koef_V_ZU;
				KodSobytiya_k_PIV := IZMN_NP_NOMINAL_KOEF_V_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_NOMINAL_KOEF_X_ZU:
				NP_Nominalqnyj_Koef_X_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_Nominalqnyj_Koef_X_ZU;
				KodSobytiya_k_PIV := IZMN_NP_NOMINAL_KOEF_X_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_V_ZR:
				NP_Koef_V_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_V_ZR;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_V_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_X_ZR:
				NP_Koef_X_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_X_ZR;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_X_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_V_ZU:
				NP_Koef_V_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_V_ZU;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_V_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_X_ZU:
				NP_Koef_X_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_X_ZU;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_X_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_V_ZV:
				NP_Koef_V_ZV := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_V_ZV;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_V_ZV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_X_ZV:
				NP_Koef_X_ZV := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_X_ZV;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_X_ZV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_V_TR:
				NP_Koef_V_TR := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_V_TR;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_V_TR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_X_TR:
				NP_Koef_X_TR := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_X_TR;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_X_TR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_V_TU:
				NP_Koef_V_TU := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_V_TU;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_V_TU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_X_TU:
				NP_Koef_X_TU := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_X_TU;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_X_TU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_V_TV:
				NP_Koef_V_TV := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_V_TV;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_V_TV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_X_TV:
				NP_Koef_X_TV := _FUNCTION_;
				START PROCESS PeredachaNP_Koef_X_TV;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_X_TV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RAB_USK_ZR:
				NP_RAB_USK_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_RAB_USK_ZR;
				KodSobytiya_k_PIV := IZMN_NP_RAB_USK_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_A_ZR:
				NP_KOEF_A_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_KOEF_A_ZR;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_A_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AVR_TOR_ZR:
				NP_AVR_TOR_ZR := _FUNCTION_;
				START PROCESS PeredachaNP_AVR_TOR_ZR;
				KodSobytiya_k_PIV := IZMN_NP_AVR_TOR_ZR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RAB_USK_ZU:
				NP_RAB_USK_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_RAB_USK_ZU;
				KodSobytiya_k_PIV := IZMN_NP_RAB_USK_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_A_ZU:
				NP_KOEF_A_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_KOEF_A_ZU;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_A_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AVR_TOR_ZU:
				NP_AVR_TOR_ZU := _FUNCTION_;
				START PROCESS PeredachaNP_AVR_TOR_ZU;
				KodSobytiya_k_PIV := IZMN_NP_AVR_TOR_ZU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RAB_USK_ZV:
				NP_RAB_USK_ZV := _FUNCTION_;
				START PROCESS PeredachaNP_RAB_USK_ZV;
				KodSobytiya_k_PIV := IZMN_NP_RAB_USK_ZV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_A_ZV:
				NP_KOEF_A_ZV := _FUNCTION_;
				START PROCESS PeredachaNP_KOEF_A_ZV;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_A_ZV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AVR_TOR_ZV:
				NP_AVR_TOR_ZV := _FUNCTION_;
				START PROCESS PeredachaNP_AVR_TOR_ZV;
				KodSobytiya_k_PIV := IZMN_NP_AVR_TOR_ZV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RAB_USK_TR:
				NP_RAB_USK_TR := _FUNCTION_;
				START PROCESS PeredachaNP_RAB_USK_TR;
				KodSobytiya_k_PIV := IZMN_NP_RAB_USK_TR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_A_TR:
				NP_KOEF_A_TR := _FUNCTION_;
				START PROCESS PeredachaNP_KOEF_A_TR;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_A_TR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AVR_TOR_TR:
				NP_AVR_TOR_TR := _FUNCTION_;
				START PROCESS PeredachaNP_AVR_TOR_TR;
				KodSobytiya_k_PIV := IZMN_NP_AVR_TOR_TR;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RAB_USK_TU:
				NP_RAB_USK_TU := _FUNCTION_;
				START PROCESS PeredachaNP_RAB_USK_TU;
				KodSobytiya_k_PIV := IZMN_NP_RAB_USK_TU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_A_TU:
				NP_KOEF_A_TU := _FUNCTION_;
				START PROCESS PeredachaNP_KOEF_A_TU;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_A_TU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AVR_TOR_TU:
				NP_AVR_TOR_TU := _FUNCTION_;
				START PROCESS PeredachaNP_AVR_TOR_TU;
				KodSobytiya_k_PIV := IZMN_NP_AVR_TOR_TU;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RAB_USK_TV:
				NP_RAB_USK_TV := _FUNCTION_;
				START PROCESS PeredachaNP_RAB_USK_TV;
				KodSobytiya_k_PIV := IZMN_NP_RAB_USK_TV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KOEF_A_TV:
				NP_KOEF_A_TV := _FUNCTION_;
				START PROCESS PeredachaNP_KOEF_A_TV;
				KodSobytiya_k_PIV := IZMN_NP_KOEF_A_TV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AVR_TOR_TV:
				NP_AVR_TOR_TV := _FUNCTION_;
				START PROCESS PeredachaNP_AVR_TOR_TV;
				KodSobytiya_k_PIV := IZMN_NP_AVR_TOR_TV;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MIN_DU_Hur:
				NP_MIN_DU_Hur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_MIN_DU_Hur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MAX_DU_Hur:
				NP_MAX_DU_Hur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_MAX_DU_Hur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MIN_DUDD_Hur:
				NP_MIN_DUDD_Hur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_MIN_DUDD_Hur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_MAX_DUDD_Hur:
				NP_MAX_DUDD_Hur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_MAX_DUDD_Hur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_DU_Hur:
				NP_Kp_DU_Hur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_DU_Hur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_DUDD_Hur:
				NP_Kp_DUDD_Hur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_DUDD_Hur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PredupreditelqnyjHur:
				NP_PredupreditelqnyjHur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PredupreditelqnyjHur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_AvarijnayaOshibkaHur:
				NP_AvarijnayaOshibkaHur := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_AvarijnayaOshibkaHur;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_Dkr:
				NP_Kp_Dkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_Dkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kd_Dkr:
				NP_Kd_Dkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kd_Dkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Ki_Dkr:
				NP_Ki_Dkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Ki_Dkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kz_Dkr:
				NP_Kz_Dkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kz_Dkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Dkr_MAX:
				NP_Dkr_MAX := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Dkr_MAX;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DeltaVzRS_MAH:
				NP_DeltaVzRS_MAH := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_DeltaVzRS_MAH;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaDkr:
				NP_VremyaPerehodnogoProtsessaDkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaDkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PogreshnostqDkr:
				NP_PogreshnostqDkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PogreshnostqDkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Pauza_Dkr:
				NP_Pauza_Dkr := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Pauza_Dkr;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kp_Vrosta:
				NP_Kp_Vrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kp_Vrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kd_Vrosta:
				NP_Kd_Vrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kd_Vrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Ki_Vrosta:
				NP_Ki_Vrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Ki_Vrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Kz_Vrosta:
				NP_Kz_Vrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Kz_Vrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Pauza_Vrosta:
				NP_Pauza_Vrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Pauza_Vrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaOsredneniyaVzVrosta:
				NP_VremyaOsredneniyaVzVrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaOsredneniyaVzVrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VzR_MAX:
				NP_VzR_MAX := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VzR_MAX;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_DeltaTn_MAX:
				NP_DeltaTn_MAX := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_DeltaTn_MAX;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_Pauza_REG_ROSTA:
				NP_Pauza_REG_ROSTA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_Pauza_REG_ROSTA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_VremyaPerehodnogoProtsessaVrosta:
				NP_VremyaPerehodnogoProtsessaVrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaVrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_PogreshnostqVrosta:
				NP_PogreshnostqVrosta := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_PogreshnostqVrosta;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KoefA_Pnk:
				NP_KoefA_Pnk := _FUNCTION_;
				OP_PogreshnostqPnk := NP_KoefA_Pnk + NP_KoefV_Pnk * ZD_Pnk;
				KodSobytiya_k_PIV := IZMN_NP_KoefA_Pnk;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_KoefV_Pnk:
				NP_KoefV_Pnk := _FUNCTION_;
				OP_PogreshnostqPnk := NP_KoefA_Pnk + NP_KoefV_Pnk * ZD_Pnk;
				KodSobytiya_k_PIV := IZMN_NP_KoefV_Pnk;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_REZH_ISPOLN_RA:
				NP_REZH_ISPOLN_RA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_REZH_ISPOLN_RA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RADIUS_STENKI_TIGLYA:
				NP_RADIUS_STENKI_TIGLYA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_RADIUS_STENKI_TIGLYA;
				START PROCESS PERERASCHET_FORMY_TIGLYA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RADIUS_DNA_TIGLYA:
				NP_RADIUS_DNA_TIGLYA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_RADIUS_DNA_TIGLYA;
				START PROCESS PERERASCHET_FORMY_TIGLYA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE:
				NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE;
				START PROCESS PERERASCHET_FORMY_TIGLYA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA:
				NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DOPUSTIMOE_DAVLENIE_POSLE_KONTROLYA_NATEKANIYA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM:
				NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DAVLENIE_PERED_OTZHIGOM;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DELQTA_W_OTZHIGA:
				NP_OTZHIG_DELQTA_W_OTZHIGA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DELQTA_W_OTZHIGA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DELQTA_T_OTZHIGA:
				NP_OTZHIG_DELQTA_T_OTZHIGA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DELQTA_T_OTZHIGA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS:
				NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MAKS;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MIN:
				NP_OTZHIG_DAVLENIE_OTZHIGA_MIN := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DAVLENIE_OTZHIGA_MIN;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA:
				NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_KONECHNAYA_MOSHNOSTQ_OTZHIGA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_VREMYA_OTZHIGA:
				NP_OTZHIG_VREMYA_OTZHIGA := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_VREMYA_OTZHIGA;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN:
				NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DELQTA_W_OHLAZHDENIYA_IPN;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			IZMN_NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN:
				NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN := _FUNCTION_;
				KodSobytiya_k_PIV := IZMN_NP_OTZHIG_DELQTA_T_OHLAZHDENIYA_IPN;
				SET STATE PodtverzhdenieIzmeneniyaNP;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE NP_VneDiapazona 
		IF (_FUNCTION_ + KodSobytiya_k_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PodtverzhdenieIzmeneniyaNP 
		IF (_FUNCTION_ + KodSobytiya_k_PIV + _FUNCTION_) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PodtverzhdenieIzmereniyaNP 
		IF (_FUNCTION_ + KodSobytiya_k_PIV + LP_Parametr_k_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PERERASCHET_FORMY_TIGLYA
	STATE Nachalo 
		IF (NOT _FUNCTION_ + NP_RADIUS_STENKI_TIGLYA + NP_RADIUS_DNA_TIGLYA + NP_RADIUS_PEREHODA_OT_DNA_TIGLYA_K_STENKE + KOEF_PLOTNOSTI_ZHD_SI) THEN
			SET NEXT;
		ELSE 
			SET STATE PeredachaOshibki;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOpereraschete 
		IF (_FUNCTION_ + PK_PIV_GEOMETRIYA_TIGLYA_RASSCHITANA_USPESHNO) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaOshibki 
		IF (_FUNCTION_ + PK_PIV_VVEDENNYE_RADIUSY_NE_POZVOLYAYUT_RASSCHITATQ_GEOMETRIYU_TIGLYA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandIzmenenieZadaniya_ot_PIV
	VAR
		LP_ZD : REAL;
		LP_KodSoobsheniya : INT;
	END_VAR
	
	STATE Analiz 
		CASE (KodSobytiya_ot_PIV) OF
			IZMN_ZD_Qgaza:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_RG) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_RG)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_RG_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Qgaza := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Pnk:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_D) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_D)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_D_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Pnk := LP_ZD;
					OP_PogreshnostqPnk := NP_KoefA_Pnk + NP_KoefV_Pnk * ZD_Pnk;
					STOP;
				END_IF
			IZMN_ZD_Wipn_K1:
				LP_ZD := _FUNCTION_ * 1000.0;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_W_IPN_K1) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_W_IPN_K1)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_W_IPN_K1_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Wipn_K1 := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Wipn_K2:
				LP_ZD := _FUNCTION_ * 1000.0;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_W_IPN_K2) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_W_IPN_K2)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_W_IPN_K2_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Wipn_K2 := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Baza_REG_ROSTA:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_BAZA_REG_ROSTA) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_BAZA_REG_ROSTA)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_BAZA_REG_ROSTA_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Baza_REG_ROSTA := LP_ZD;
					ZD_Tn := ZD_Tn + (LP_ZD - ZD_Baza_Tn_dlya_REG_ROSTA_Predydushee);
					ZD_Baza_Tn_dlya_REG_ROSTA_Predydushee := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Tn:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_TN) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_TN)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_TN_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Tn := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Tr:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_TR) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_TR)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_TR_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Tr := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Hur:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_UR_hzad) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_UR_hzad)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_UR_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Hur := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Dkr:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_DK) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_DK)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_DK_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Dkr := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Vrosta:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_ROSTA) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_ROSTA)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_ROSTA_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Vrosta := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_VtR:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_VtR) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_VtR)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_VtR_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_VtR := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_VtU:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_VtU) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_VtU)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_VtU_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_VtU := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_VzR:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_VzR) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_VzR)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_VzR_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_VzR := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_VzU:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_VzU) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_VzU)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_VzU_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_VzU := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Xz:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_Xz) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_Xz)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_Xz_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Xz := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Wz:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_Wz) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_Wz)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_Wz_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Wz := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Wz_UGOL:
				ZD_Wz_UGOL := _FUNCTION_;
				STOP;
			IZMN_ZD_Wt:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_Wt) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_Wt)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_Wt_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Wt := LP_ZD;
					STOP;
				END_IF
			IZMN_ZD_Wt_UGOL:
				ZD_Wt_UGOL := _FUNCTION_;
				STOP;
			IZMN_ZD_Xt:
				LP_ZD := _FUNCTION_;
				IF ((LP_ZD < MINIMALQNOE_ZADANIE_REG_Xt) OR (LP_ZD > MAKSIMALQNOE_ZADANIE_REG_Xt)) THEN
					LP_KodSoobsheniya := PK_PIV_ZD_DLYA_REG_Xt_VNE_DIAPAZONA;
					SET STATE ZD_VneDiapazona;
				ELSE 
					ZD_Xt := LP_ZD;
					STOP;
				END_IF
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE ZD_VneDiapazona 
		IF (_FUNCTION_ + LP_KodSoobsheniya) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PodtverzhdenieIzmeneniyaZD 
		IF (_FUNCTION_ + KodSobytiya_k_PIV + _FUNCTION_) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Nominalqnyj_Koef_V_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_NOMINAL_KOEF_V + NP_Nominalqnyj_Koef_V_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Nominalqnyj_Koef_X_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_NOMINAL_KOEF_X + NP_Nominalqnyj_Koef_X_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Nominalqnyj_Koef_V_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_NOMINAL_KOEF_V + NP_Nominalqnyj_Koef_V_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Nominalqnyj_Koef_X_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_NOMINAL_KOEF_X + NP_Nominalqnyj_Koef_X_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_V_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_KOEF_V + NP_Koef_V_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_X_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_KOEF_X + NP_Koef_X_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_V_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_KOEF_V + NP_Koef_V_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_X_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_KOEF_X + NP_Koef_X_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_V_ZV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_IZMN_NP_KOEF_V + NP_Koef_V_ZV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_X_ZV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_IZMN_NP_KOEF_X + NP_Koef_X_ZV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_V_TR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_IZMN_NP_KOEF_V + NP_Koef_V_TR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_X_TR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_IZMN_NP_KOEF_X + NP_Koef_X_TR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_V_TU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_IZMN_NP_KOEF_V + NP_Koef_V_TU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_X_TU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_IZMN_NP_KOEF_X + NP_Koef_X_TU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_V_TV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_IZMN_NP_KOEF_V + NP_Koef_V_TV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_Koef_X_TV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_IZMN_NP_KOEF_X + NP_Koef_X_TV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RAB_USK_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_RAB_USK + NP_RAB_USK_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOEF_A_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_KOEF_A + NP_KOEF_A_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AVR_TOR_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_IZMN_NP_AVR_TOR + NP_AVR_TOR_ZR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RAB_USK_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_RAB_USK + NP_RAB_USK_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOEF_A_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_KOEF_A + NP_KOEF_A_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AVR_TOR_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_IZMN_NP_AVR_TOR + NP_AVR_TOR_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RAB_USK_ZV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_IZMN_NP_RAB_USK + NP_RAB_USK_ZV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOEF_A_ZV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_IZMN_NP_KOEF_A + NP_KOEF_A_ZV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AVR_TOR_ZV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_IZMN_NP_AVR_TOR + NP_AVR_TOR_ZV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RAB_USK_TR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_IZMN_NP_RAB_USK + NP_RAB_USK_TR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOEF_A_TR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_IZMN_NP_KOEF_A + NP_KOEF_A_TR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AVR_TOR_TR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_IZMN_NP_AVR_TOR + NP_AVR_TOR_TR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RAB_USK_TU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_IZMN_NP_RAB_USK + NP_RAB_USK_TU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOEF_A_TU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_IZMN_NP_KOEF_A + NP_KOEF_A_TU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AVR_TOR_TU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_IZMN_NP_AVR_TOR + NP_AVR_TOR_TU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RAB_USK_TV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_IZMN_NP_RAB_USK + NP_RAB_USK_TV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOEF_A_TV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_IZMN_NP_KOEF_A + NP_KOEF_A_TV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AVR_TOR_TV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_IZMN_NP_AVR_TOR + NP_AVR_TOR_TV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_AH_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_AH_NACHALO_PEREDACHI + NP_AH_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BH_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_BH + NP_BH_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_CH_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_CH_POSLEDNIJ_PARAMETR + NP_CH_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_THRESH_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_THRESH + NP_THRESH_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_DRELQ_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_DRELQ + NP_DRELQ_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_THRESH_GIST_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_THRETH_GIST + NP_THRESH_GIST_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_MAX_SIGNAL_VALUE_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_MAX_SIGNAL_VALUE + NP_MAX_SIGNAL_VALUE_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_T_MAX_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_T_MAX + NP_T_MAX_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_H_MAX_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_H_MAX + NP_H_MAX_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_H_MIN_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_H_MIN + NP_H_MIN_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_WIDTH_PEAK_MAX_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_WIDTH_PEAK_MAX + NP_WIDTH_PEAK_MAX_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_ADAPT_LENGTH_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_ADAPT_LENGTH + NP_ADAPT_LENGTH_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_KOL_KALIBR_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_KOL_KALIBR + NP_KOL_KALIBR_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_NLINE1_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_NLINE1 + NP_NLINE1_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_NLINE2_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_NLINE2 + NP_NLINE2_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_RELATIV_QUALITY_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_RELATIV_QUALITY + NP_RELATIV_QUALITY_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_MIN_SIGN_RANGE_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_MIN_SIGN_RANGE + NP_MIN_SIGN_RANGE_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_MIDDLE_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_MIDDLE + NP_MIDDLE_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_MIDDLE_SIGN_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_MIDDLE_SIGN + NP_MIDDLE_SIGN_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BAD_NUMB_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_BAD_NUMB + NP_BAD_NUMB_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_CORRECT_LEVEL_LASER_1_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_CORRECT_LEVEL_LASER_1 + NP_CORRECT_LEVEL_LASER_1_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_EXPOSURE_TIME0_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_EXPOSURE_TIME0 + NP_EXPOSURE_TIME0_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_EXPOSURE_TIME1_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_EXPOSURE_TIME1 + NP_EXPOSURE_TIME1_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_XTOLER
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_XTOLER + NP_XTOLER) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_YTOLER
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_YTOLER + NP_YTOLER) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_YDOWNTOLER
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_YDOWNTOLER + NP_YDOWNTOLER) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_NUMOFSTR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_NUMOFSTR + NP_NUMOFSTR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_THRRELIAB
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_THRRELIAB + NP_THRRELIAB) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_THRDERIV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_THRDERIV + NP_THRDERIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_THRDERIVCLB
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_THRDERIVCLB + NP_THRDERIVCLB) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGZERO_LVL
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_LVL + NP_BIGZERO_LVL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGPLUS_LVL
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_LVL + NP_BIGPLUS_LVL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLZERO_LVL
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_LVL + NP_SMALLZERO_LVL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLPLUS_LVL
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_LVL + NP_SMALLPLUS_LVL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_MINAVERTIME
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_MINAVERTIME + NP_MINAVERTIME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGZERO_CTG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_CTG_NACHALO_PEREDACHI + NP_BIGZERO_CTG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGZERO_KY
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_KY + NP_BIGZERO_KY) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGZERO_X
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_X + NP_BIGZERO_X) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGZERO_TG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_TG + NP_BIGZERO_TG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGPLUS_CTG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_CTG + NP_BIGPLUS_CTG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGPLUS_KY
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_KY + NP_BIGPLUS_KY) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGPLUS_X
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_X + NP_BIGPLUS_X) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_BIGPLUS_TG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_TG + NP_BIGPLUS_TG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLZERO_CTG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_CTG + NP_SMALLZERO_CTG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLZERO_KY
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_KY + NP_SMALLZERO_KY) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLZERO_X
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_X + NP_SMALLZERO_X) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLZERO_TG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_TG + NP_SMALLZERO_TG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLPLUS_CTG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_CTG + NP_SMALLPLUS_CTG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLPLUS_KY
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_KY + NP_SMALLPLUS_KY) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLPLUS_X
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_X + NP_SMALLPLUS_X) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SMALLPLUS_TG
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_TG_POSLEDNIJ_PARAMETR + NP_SMALLPLUS_TG) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_VremyaOsredneniya_DTN
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DTN_IZMN_NP_VremyaOsredneniya_DTN + NP_VremyaOsredneniya_DTN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziSDatchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSDatchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTN) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_VremyaOsredneniya_DTR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DTR_IZMN_NP_VremyaOsredneniya_DTR + NP_VremyaOsredneniya_DTR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTR THEN
			SET STATE NarushenieSvyaziSDatchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSDatchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_NizhnyayaGranitsaRn_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_IZMN_NP_NizhnyayaGranitsaRn_IP2K_K1 + NP_NizhnyayaGranitsaRn_IP2K_K1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_VerhnyayaGranitsaRn_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_IZMN_NP_VerhnyayaGranitsaRn_IP2K_K1 + NP_VerhnyayaGranitsaRn_IP2K_K1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_TokZashityModulya_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_IZMN_NP_TokZashityModulya_IP2K_K1 + NP_TokZashityModulya_IP2K_K1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_SkorostqIzmeneniya_W_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_IZMN_NP_SkorostqIzmeneniya_W_IP2K_K1 + NP_SkorostqIzmeneniya_W_IP2K_K1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaNP_GranichnayaTempVnutri_IP2K_K1_AVARIYA
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_IZMN_NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA + NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ZapuskObrabotkiKomandOtUstrojstv
	STATE Nachalo 
		START PROCESS ObrabotkaKomandOtVPO;
		START PROCESS ObrabotkaKomandOtZR;
		START PROCESS ObrabotkaKomandOtZU;
		START PROCESS ObrabotkaKomandOtZV;
		START PROCESS ObrabotkaKomandOtTR;
		START PROCESS ObrabotkaKomandOtTU;
		START PROCESS ObrabotkaKomandOtTV;
		START PROCESS ObrabotkaKomandOtDU;
		START PROCESS ObrabotkaKomandOtTDD;
		START PROCESS ObrabotkaKomandOtDTN;
		START PROCESS ObrabotkaKomandOtDTR;
		START PROCESS ObrabotkaKomandOtIP2K_K1;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtVPO
	VAR
		LP_KodSoobsheniyaDlyaPIVOtVPO : INT;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			IF (FlagVPO) THEN
				SET STATE RazborKodaKomandyOtVPO;
			ELSE 
				CASE (LP_KodKomandy) OF
					PK_VPO_INITSIALIZATSIYA,
					PK_VPO_VKL_VPO,
					PK_VPO_VYK_VPO:
						SET STATE RazborKodaKomandyOtVPO;
					ELSE
				END_CASE
			END_IF
		END_IF
	END_STATE
	
	STATE RazborKodaKomandyOtVPO 
		SET STATE Nachalo;
		CASE (LP_KodKomandy) OF
			PK_VPO_INITSIALIZATSIYA:
				START PROCESS KontrolqSostoyaniyaRegulyatorov;
				START PROCESS ZapuskProtsessovKontrolyaIzmeneniyaZadanij;
				LP_KodSoobsheniyaDlyaPIVOtVPO := ZAPROS_INITSIALIZATSII_VPO;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_VPO_VKL_VPO:
				LP_KodSoobsheniyaDlyaPIVOtVPO := VKL_VPO;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_VPO_VYK_VPO:
				LP_KodSoobsheniyaDlyaPIVOtVPO := VYK_VPO;
				SET STATE Peredacha_VKL_VPO;
			PK_VPO_IZMN_ZD_VzR:
				ZD_VzR := _FUNCTION_;
			PK_VPO_IZMN_ZD_VzU:
				ZD_VzU := _FUNCTION_;
			PK_VPO_IZMN_ZD_VtR:
				IF (PROCESS REG_UR IN STATE ACTIVE) THEN
					SET STATE PeredachaPIVSoobsheniyaObIgnorirovaniiZD_VzR;
				ELSE 
					ZD_VtR := _FUNCTION_;
				END_IF
			PK_VPO_IZMN_ZD_VtU:
				ZD_VtU := _FUNCTION_;
			PK_VPO_IZMN_ZD_Wz:
				ZD_Wz := _FUNCTION_;
			PK_VPO_IZMN_ZD_Wt:
				ZD_Wt := _FUNCTION_;
			PK_VPO_IZMN_ZD_Tn:
				ZD_Tn := _FUNCTION_;
			PK_VPO_ZAT_RS:
				START PROCESS ZAT_RS;
			PK_VPO_ZAT_US:
				START PROCESS ZAT_US;
			PK_VPO_VYK_REG_Vz:
				START PROCESS VYK_ZATRAVKU;
			PK_VPO_TIG_RS:
				START PROCESS TIG_RS;
			PK_VPO_TIG_US:
				START PROCESS TIG_US;
			PK_VPO_VYK_REG_Vt:
				START PROCESS VYK_TIGELQ;
			PK_VPO_ZAT_VR:
				START PROCESS ZAT_VR;
			PK_VPO_VYK_ZAT_VR:
				START PROCESS VYK_ZAT_VR;
			PK_VPO_TIG_VR:
				START PROCESS TIG_VR;
			PK_VPO_VYK_TIG_VR:
				START PROCESS VYK_TIG_VR;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE PeredachaPIVSoobsheniyaObIgnorirovaniiZD_VzR 
		IF (_FUNCTION_ + REG_UR_AKTIVEN__KOM_VPO_IZMN_ZD_VzR_IGNOR) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaDlyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtVPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Peredacha_VKL_VPO 
		IF (FlagVPO) THEN
			IF (_FUNCTION_ + PK_VPO_VKL_VPO) THEN
				SET STATE PeredachaSoobsheniyaPIVoVKL_VPO;
			END_IF
		ELSE 
			SET STATE PeredachaSoobsheniyaPIVoVKL_VPO;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaPIVoVKL_VPO 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtVPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_VPO + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtZR
	VAR
		LP_KodSoobsheniyaDlyaPIV : INT;
		LP_KodParametraDlyaPIV : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_ZR_INITSIALIZATSIYA:
					FlagRegulyatora_V_ZR := VYKL;
					FlagRegulyatora_X_ZR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := ZAPROS_INITSIALIZATSII_ZR;
					START PROCESS SbrosBitaInitsializatsiiV_ZR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_GOTOV_K_RABOTE:
					_BREAK_ := _BREAK_;
				PK_ZR_OTKAZ_DVIGATELYA:
					FlagRegulyatora_V_ZR := VYKL;
					FlagRegulyatora_X_ZR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DVIGATELYA_ZR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_OTKAZ_DATCHIKA:
					FlagRegulyatora_V_ZR := VYKL;
					FlagRegulyatora_X_ZR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DATCHIKA_ZR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_NAEZD_NA_KVP:
					START PROCESS VYK_ZATRAVKU;
					K_KVP_Z := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KVP_Z;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_NAEZD_NA_KNP:
					START PROCESS VYK_ZATRAVKU;
					K_KNP_Z := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KNP_Z;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_SQEZD_S_DKP:
					K_KNP_Z := VYKL;
					K_KVP_Z := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_SQEZD_S_DKP_Z;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_NACHALO_DVIZHENIYA_V:
					FlagRegulyatora_V_ZR := VKL;
					FlagRegulyatora_X_ZR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_V_ZR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_NACHALO_DVIZHENIYA_X:
					FlagRegulyatora_V_ZR := VYKL;
					FlagRegulyatora_X_ZR := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_X_ZR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZR_OSTANOV_DVIZHENIYA:
					FlagRegulyatora_V_ZR := VYKL;
					FlagRegulyatora_X_ZR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OSTANOV_DVIZHENIYA_ZR;
					LP_KodParametraDlyaPIV := _FUNCTION_;
					SET STATE PeredachaSoobsheniyaSKodomOshibkiPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NEIZVESTNYJ_KOD_V_ZR;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSKodomOshibkiPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodParametraDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtZU
	VAR
		LP_KodSoobsheniyaDlyaPIV : INT;
		LP_KodParametraDlyaPIV : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_ZU_INITSIALIZATSIYA:
					FlagRegulyatora_V_ZU := VYKL;
					FlagRegulyatora_X_ZU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := ZAPROS_INITSIALIZATSII_ZU;
					START PROCESS SbrosBitaInitsializatsiiV_ZU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_GOTOV_K_RABOTE:
					_BREAK_ := _BREAK_;
				PK_ZU_OTKAZ_DVIGATELYA:
					FlagRegulyatora_V_ZU := VYKL;
					FlagRegulyatora_X_ZU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DVIGATELYA_ZU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_OTKAZ_DATCHIKA:
					FlagRegulyatora_V_ZU := VYKL;
					FlagRegulyatora_X_ZU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DATCHIKA_ZU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_NAEZD_NA_KVP:
					START PROCESS VYK_ZATRAVKU;
					K_KVP_Z := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KVP_Z;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_NAEZD_NA_KNP:
					START PROCESS VYK_ZATRAVKU;
					K_KNP_Z := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KNP_Z;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_SQEZD_S_DKP:
					K_KNP_Z := VYKL;
					K_KVP_Z := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_SQEZD_S_DKP_Z;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_NACHALO_DVIZHENIYA_V:
					FlagRegulyatora_V_ZU := VKL;
					FlagRegulyatora_X_ZU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_V_ZU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_NACHALO_DVIZHENIYA_X:
					FlagRegulyatora_V_ZU := VYKL;
					FlagRegulyatora_X_ZU := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_X_ZU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZU_OSTANOV_DVIZHENIYA:
					FlagRegulyatora_V_ZU := VYKL;
					FlagRegulyatora_X_ZU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OSTANOV_DVIZHENIYA_ZU;
					LP_KodParametraDlyaPIV := _FUNCTION_;
					SET STATE PeredachaSoobsheniyaSKodomOshibkiPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NEIZVESTNYJ_KOD_V_ZU;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSKodomOshibkiPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodParametraDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtZV
	VAR
		LP_KodSoobsheniyaDlyaPIV : INT;
		LP_KodParametraDlyaPIV : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_ZV_INITSIALIZATSIYA:
					FlagRegulyatora_V_ZV := VYKL;
					FlagRegulyatora_X_ZV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := ZAPROS_INITSIALIZATSII_ZV;
					START PROCESS SbrosBitaInitsializatsiiV_ZV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZV_GOTOV_K_RABOTE:
					_BREAK_ := _BREAK_;
				PK_ZV_OTKAZ_DVIGATELYA:
					FlagRegulyatora_V_ZV := VYKL;
					FlagRegulyatora_X_ZV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DVIGATELYA_ZV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZV_OTKAZ_DATCHIKA:
					FlagRegulyatora_V_ZV := VYKL;
					FlagRegulyatora_X_ZV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DATCHIKA_ZV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZV_NACHALO_DVIZHENIYA_V:
					FlagRegulyatora_V_ZV := VKL;
					FlagRegulyatora_X_ZV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_V_ZV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZV_NACHALO_DVIZHENIYA_X:
					FlagRegulyatora_V_ZV := VYKL;
					FlagRegulyatora_X_ZV := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_X_ZV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_ZV_OSTANOV_DVIZHENIYA:
					FlagRegulyatora_V_ZV := VYKL;
					FlagRegulyatora_X_ZV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OSTANOV_DVIZHENIYA_ZV;
					LP_KodParametraDlyaPIV := _FUNCTION_;
					SET STATE PeredachaSoobsheniyaSKodomOshibkiPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NEIZVESTNYJ_KOD_V_ZV;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSKodomOshibkiPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodParametraDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtTR
	VAR
		LP_KodSoobsheniyaDlyaPIV : INT;
		LP_KodParametraDlyaPIV : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_TR_INITSIALIZATSIYA:
					FlagRegulyatora_V_TR := VYKL;
					FlagRegulyatora_X_TR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := ZAPROS_INITSIALIZATSII_TR;
					START PROCESS SbrosBitaInitsializatsiiV_TR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_GOTOV_K_RABOTE:
					_BREAK_ := _BREAK_;
				PK_TR_OTKAZ_DVIGATELYA:
					FlagRegulyatora_V_TR := VYKL;
					FlagRegulyatora_X_TR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DVIGATELYA_TR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_OTKAZ_DATCHIKA:
					FlagRegulyatora_V_TR := VYKL;
					FlagRegulyatora_X_TR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DATCHIKA_TR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_NAEZD_NA_KVP:
					START PROCESS VYK_TIGELQ;
					K_KVP_T := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KVP_T;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_NAEZD_NA_KNP:
					START PROCESS VYK_TIGELQ;
					K_KNP_T := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KNP_T;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_SQEZD_S_DKP:
					K_KNP_T := VYKL;
					K_KVP_T := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_SQEZD_S_DKP_T;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_NACHALO_DVIZHENIYA_V:
					FlagRegulyatora_V_TR := VKL;
					FlagRegulyatora_X_TR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_V_TR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_NACHALO_DVIZHENIYA_X:
					FlagRegulyatora_V_TR := VYKL;
					FlagRegulyatora_X_TR := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_X_TR;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TR_OSTANOV_DVIZHENIYA:
					FlagRegulyatora_V_TR := VYKL;
					FlagRegulyatora_X_TR := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OSTANOV_DVIZHENIYA_TR;
					LP_KodParametraDlyaPIV := _FUNCTION_;
					SET STATE PeredachaSoobsheniyaSKodomOshibkiPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NEIZVESTNYJ_KOD_V_TR;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSKodomOshibkiPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodParametraDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtTU
	VAR
		LP_KodSoobsheniyaDlyaPIV : INT;
		LP_KodParametraDlyaPIV : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_TU_INITSIALIZATSIYA:
					FlagRegulyatora_V_TU := VYKL;
					FlagRegulyatora_X_TU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := ZAPROS_INITSIALIZATSII_TU;
					START PROCESS SbrosBitaInitsializatsiiV_TU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_GOTOV_K_RABOTE:
					_BREAK_ := _BREAK_;
				PK_TU_OTKAZ_DVIGATELYA:
					FlagRegulyatora_V_TU := VYKL;
					FlagRegulyatora_X_TU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DVIGATELYA_TU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_OTKAZ_DATCHIKA:
					FlagRegulyatora_V_TU := VYKL;
					FlagRegulyatora_X_TU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DATCHIKA_TU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_NAEZD_NA_KVP:
					START PROCESS VYK_TIGELQ;
					K_KVP_T := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KVP_T;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_NAEZD_NA_KNP:
					START PROCESS VYK_TIGELQ;
					K_KNP_T := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NAEZD_NA_KNP_T;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_SQEZD_S_DKP:
					K_KNP_T := VYKL;
					K_KVP_T := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_SQEZD_S_DKP_T;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_NACHALO_DVIZHENIYA_V:
					FlagRegulyatora_V_TU := VKL;
					FlagRegulyatora_X_TU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_V_TU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_NACHALO_DVIZHENIYA_X:
					FlagRegulyatora_V_TU := VYKL;
					FlagRegulyatora_X_TU := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_X_TU;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TU_OSTANOV_DVIZHENIYA:
					FlagRegulyatora_V_TU := VYKL;
					FlagRegulyatora_X_TU := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OSTANOV_DVIZHENIYA_TU;
					LP_KodParametraDlyaPIV := _FUNCTION_;
					SET STATE PeredachaSoobsheniyaSKodomOshibkiPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NEIZVESTNYJ_KOD_V_TU;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSKodomOshibkiPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodParametraDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtTV
	VAR
		LP_KodSoobsheniyaDlyaPIV : INT;
		LP_KodParametraDlyaPIV : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_TV_INITSIALIZATSIYA:
					FlagRegulyatora_V_TV := VYKL;
					FlagRegulyatora_X_TV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := ZAPROS_INITSIALIZATSII_TV;
					START PROCESS SbrosBitaInitsializatsiiV_TV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TV_GOTOV_K_RABOTE:
					_BREAK_ := _BREAK_;
				PK_TV_OTKAZ_DVIGATELYA:
					FlagRegulyatora_V_TV := VYKL;
					FlagRegulyatora_X_TV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DVIGATELYA_TV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TV_OTKAZ_DATCHIKA:
					FlagRegulyatora_V_TV := VYKL;
					FlagRegulyatora_X_TV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OTKAZ_DATCHIKA_TV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TV_NACHALO_DVIZHENIYA_V:
					FlagRegulyatora_V_TV := VKL;
					FlagRegulyatora_X_TV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_V_TV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TV_NACHALO_DVIZHENIYA_X:
					FlagRegulyatora_V_TV := VYKL;
					FlagRegulyatora_X_TV := VKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NACHALO_DVIZHENIYA_X_TV;
					SET STATE PeredachaSoobsheniyaPIV;
				PK_TV_OSTANOV_DVIZHENIYA:
					FlagRegulyatora_V_TV := VYKL;
					FlagRegulyatora_X_TV := VYKL;
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_OSTANOV_DVIZHENIYA_TV;
					LP_KodParametraDlyaPIV := _FUNCTION_;
					SET STATE PeredachaSoobsheniyaSKodomOshibkiPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIV := PK_PIV_NEIZVESTNYJ_KOD_V_TV;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSKodomOshibkiPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIV + LP_KodParametraDlyaPIV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_ZR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZR_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziS_Privodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Privodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_ZU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZU_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziS_Privodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Privodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_ZV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziS_Privodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Privodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_TR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziS_Privodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Privodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_TU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziS_Privodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Privodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_TV
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziS_Privodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Privodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtDU
	VAR
		LP_KodSoobsheniyaDlyaPIVOtDU : INT;
		LP_ParametrDlyaPIVOtDU : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			SET STATE RazborKodaKomandyOtDU;
		END_IF
	END_STATE
	
	STATE RazborKodaKomandyOtDU 
		CASE (LP_KodKomandy) OF
			PK_DU_INITSIALIZATSIYA:
				IF (PROCESS KontrolqRestartovDU IN STATE INACTIVE) THEN
					SchetchikRestartovDU := 0;
					START PROCESS KontrolqRestartovDU;
				ELSE 
					SchetchikRestartovDU := SchetchikRestartovDU + 1;
				END_IF
				LP_KodSoobsheniyaDlyaPIVOtDU := ZAPROS_INITSIALIZATSII_DU;
				START PROCESS SbrosBitaInitsializatsiiV_DU;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_GOTOV_K_RABOTE:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_GOTOV_K_RABOTE;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_UROVENQ_DOSTOVEREN:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_UROVENQ_DOSTOVEREN;
				FlagHur_DU := VKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_UROVENQ_NE_DOSTOVEREN:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_UROVENQ_NE_DOSTOVEREN;
				FlagHur_DU := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_NACHALO_ADAPTATSII_LAZERA_0:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_0;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_ADAPTATSIYA_LAZERA_0_USPESHNA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_ADAPTATSIYA_LAZERA_0_USPESHNA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_ADAPTATSIYA_LAZERA_0_NE_USPESHNA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_ADAPTATSIYA_LAZERA_0_NE_USPESHNA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_NACHALO_ADAPTATSII_LAZERA_1:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_1;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_ADAPTATSIYA_LAZERA_1_USPESHNA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_ADAPTATSIYA_LAZERA_1_USPESHNA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_ADAPTATSIYA_LAZERA_1_NE_USPESHNA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_ADAPTATSIYA_LAZERA_1_NE_USPESHNA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_NACHALO_KALIBROVKI:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_NACHALO_KALIBROVKI;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_KALIBROVKA_VYPOLNYAETSYA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_KALIBROVKA_VYPOLNYAETSYA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_KONETS_KALIBROVKI_PO_TOCHKE:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_KONETS_KALIBROVKI_PO_TOCHKE;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_KALIBROVKA_ZAVERSHENA_USPESHNO:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_KALIBROVKA_ZAVERSHENA_USPESHNO;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_NESPETSIFITSIROVANNOE_SOSTOYANIE_DU:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_NESPETSIFITSIROVANNOE_SOSTOYANIE_DU;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_REZHIM_IZMERENIYA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_REZHIM_IZMERENIYA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_KOD_RESTARTA:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_KOD_RESTARTA;
				LP_ParametrDlyaPIVOtDU := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_DU_REZHIM_ADAPTATSII:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_REZHIM_ADAPTATSII;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_NACHALO_REZHIMA_OTLADKI:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_NACHALO_REZHIMA_OTLADKI;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_KONETS_REZHIMA_OTLADKI:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_KONETS_REZHIMA_OTLADKI;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_VKLYUCHITQ_LAZER_0:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_VKLYUCHITQ_LAZER_0;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_VKLYUCHITQ_LAZER_1:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_VKLYUCHITQ_LAZER_1;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_VYKLYUCHITQ_LAZER_0:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_VYKLYUCHITQ_LAZER_0;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_VYKLYUCHITQ_LAZER_1:
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_DU_VYKLYUCHITQ_LAZER_1;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DU_IZMN_NP_AH_NACHALO_PEREDACHI:
				LP_KodSoobsheniyaDlyaPIVOtDU := IZMN_NP_AH_DU;
				LP_ParametrDlyaPIVOtDU := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_DU_IZMN_NP_BH:
				LP_KodSoobsheniyaDlyaPIVOtDU := IZMN_NP_BH_DU;
				LP_ParametrDlyaPIVOtDU := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_DU_IZMN_NP_CH_POSLEDNIJ_PARAMETR:
				STOP PROCESS SnyatieKoeffitsientovKalibrovkiIzDU;
				LP_KodSoobsheniyaDlyaPIVOtDU := IZMN_NP_CH_DU;
				LP_ParametrDlyaPIVOtDU := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV_iSoobsheniyaOKontsePeredachiKoef;
			PK_DU_IZMN_NP_EXPOSURE_TIME0:
				STOP PROCESS SnyatieVremeniEkspozitsiiLazera0;
				LP_KodSoobsheniyaDlyaPIVOtDU := IZMN_NP_EXPOSURE_TIME0_DU;
				LP_ParametrDlyaPIVOtDU := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV_Ekspozitsii_iSoobsheniyaOKontse;
			PK_DU_IZMN_NP_EXPOSURE_TIME1:
				STOP PROCESS SnyatieVremeniEkspozitsiiLazera1;
				LP_KodSoobsheniyaDlyaPIVOtDU := IZMN_NP_EXPOSURE_TIME1_DU;
				LP_ParametrDlyaPIVOtDU := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV_Ekspozitsii_iSoobsheniyaOKontse;
			ELSE
				LP_KodSoobsheniyaDlyaPIVOtDU := PK_PIV_NEIZVESTNYJ_KOD_DU;
				SET STATE PeredachaSoobsheniyaSParametromPIV;
		END_CASE
	END_STATE
	
	STATE PeredachaSoobsheniyaDlyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDU) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDU + LP_ParametrDlyaPIVOtDU) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV_iSoobsheniyaOKontsePeredachiKoef 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDU + LP_ParametrDlyaPIVOtDU) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontse 
		IF (_FUNCTION_ + PK_PIV_DU_KONETS_SNYATIYA_KOEFFITSIENTOV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV_Ekspozitsii_iSoobsheniyaOKontse 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDU + LP_ParametrDlyaPIVOtDU) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseEkspozitsi 
		IF (_FUNCTION_ + PK_PIV_DU_KONETS_SNYATIYA_VREMENI_EKSPOZITSII_LAZERA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDU + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRestartovDU
	STATE Nachalo 
		IF (SchetchikRestartovDU > 2) THEN
			SET NEXT;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE Soobshenie 
		IF (_FUNCTION_ + PK_PIV_DU_RESTARTY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OtklyuchenieDatchika 
		STOP PROCESS VosstanovlenieSvyaziS_DU;
		_VOID_ := _FUNCTION_;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtTDD
	VAR
		LP_KodSoobsheniyaDlyaPIVOtTDD : INT;
		LP_ParametrDlyaPIVOtTDD : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			SET STATE RazborKodaKomandyOtTDD;
		END_IF
	END_STATE
	
	STATE RazborKodaKomandyOtTDD 
		CASE (LP_KodKomandy) OF
			PK_TDD_INITSIALIZATSIYA:
				IF (PROCESS KontrolqRestartovTDD IN STATE INACTIVE) THEN
					SchetchikRestartovTDD := 0;
					START PROCESS KontrolqRestartovTDD;
				ELSE 
					SchetchikRestartovTDD := SchetchikRestartovTDD + 1;
				END_IF
				LP_KodSoobsheniyaDlyaPIVOtTDD := ZAPROS_INITSIALIZATSII_TDD;
				START PROCESS SbrosBitaInitsializatsiiV_TDD;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_GOTOV_K_RABOTE:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_GOTOV_K_RABOTE;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_OSHIBKA_FATALQNAYA:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_OSHIBKA_FATALQNAYA;
				FlagDkr_TDD := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KOD_RESTARTA:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KOD_RESTARTA;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_TEST_OZU:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_TEST_OZU;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_TEST_OZU_BEZ_OSHIBOK:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_TEST_OZU_BEZ_OSHIBOK;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_OSHIBKA_TESTA_OZU:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_OSHIBKA_TESTA_OZU;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_IZMERENIYA_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_IZMERENIYA_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_IZMERENIYA_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_IZMERENIYA_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_POISK_DIAMETRA:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_POISK_DIAMETRA;
				FlagDkr_TDD := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_DIAMETR_NE_NAJDEN:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_DIAMETR_NE_NAJDEN;
				FlagDkr_TDD := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_DIAMETR_NE_DOSTOVEREN:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_DIAMETR_NE_DOSTOVEREN;
				FlagDkr_TDD := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_DIAMETR_DOSTOVEREN:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_DIAMETR_DOSTOVEREN;
				FlagDkr_TDD := VKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_NESPETSIFITSIROVANNOE_SOSTOYANIE_TDD:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_NESPETSIFITSIROVANNOE_SOSTOYANIE_TDD;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_VIDEOVYHOD_NA_KAMERU_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_ATTESTATSII_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_ATTESTATSII_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_TEST_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_TEST_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_TEST_BP_BEZ_OSHIBOK:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_TEST_BP_BEZ_OSHIBOK;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_OSHIBKA_TESTA_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_OSHIBKA_TESTA_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KAMERA_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KAMERA_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_NACHALO_KALIBROVKI_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_NACHALO_KALIBROVKI_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_KALIBROVKI_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_KALIBROVKI_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_NE_USPESHNA_BP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_BP;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_NACHALO_KALIBROVKI_BP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_NACHALO_KALIBROVKI_BP_PLYUS;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_KALIBROVKI_BP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_KALIBROVKI_BP_PLYUS;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_BP_PLYUS;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_NE_USPESHNA_BP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_BP_PLYUS;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_XTOLER:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_XTOLER;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_YTOLER:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_YTOLER;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_YDOWNTOLER:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_YDOWNTOLER;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_NUMOFSTR:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_NUMOFSTR;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_THRRELIAB:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_THRRELIAB;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_THRDERIV:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_THRDERIV;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_THRDERIVCLB:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_THRDERIVCLB;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGZERO_LVL:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGZERO_LVL;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGPLUS_LVL:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGPLUS_LVL;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLZERO_LVL:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLZERO_LVL;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLPLUS_LVL:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLPLUS_LVL;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_MINAVERTIME:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_MINAVERTIME;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGZERO_CTG_NACHALO_PEREDACHI:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGZERO_CTG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGZERO_KY:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGZERO_KY;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGZERO_X:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGZERO_X;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGZERO_TG:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGZERO_TG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGPLUS_CTG:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGPLUS_CTG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGPLUS_KY:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGPLUS_KY;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGPLUS_X:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGPLUS_X;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_BIGPLUS_TG:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_BIGPLUS_TG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_VIDEOVYHOD_NA_KAMERU_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_ATTESTATSII_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_ATTESTATSII_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_TEST_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_TEST_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_TEST_MP_BEZ_OSHIBOK:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_TEST_MP_BEZ_OSHIBOK;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_OSHIBKA_TESTA_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_OSHIBKA_TESTA_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KAMERA_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KAMERA_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_NACHALO_KALIBROVKI_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_NACHALO_KALIBROVKI_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_KALIBROVKI_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_KALIBROVKI_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_NE_USPESHNA_MP:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_MP;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_NACHALO_KALIBROVKI_MP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_NACHALO_KALIBROVKI_MP_PLYUS;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_REZHIM_KALIBROVKI_MP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_REZHIM_KALIBROVKI_MP_PLYUS;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_ZAVERSHENA_USPESHNO_MP_PLYUS;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_TDD_KALIBROVKA_NE_USPESHNA_MP_PLYUS:
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_KALIBROVKA_NE_USPESHNA_MP_PLYUS;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLZERO_CTG:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLZERO_CTG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLZERO_KY:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLZERO_KY;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLZERO_X:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLZERO_X;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLZERO_TG:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLZERO_TG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLPLUS_CTG:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLPLUS_CTG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLPLUS_KY:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLPLUS_KY;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLPLUS_X:
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLPLUS_X;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			PK_TDD_IZMN_NP_SMALLPLUS_TG_POSLEDNIJ_PARAMETR:
				STOP PROCESS SnyatieKoeffitsientovKalibrovkiIzTDD;
				LP_KodSoobsheniyaDlyaPIVOtTDD := IZMN_NP_SMALLPLUS_TG;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV_iSoobsheniyaOKontse;
			PK_TDD_OSHIBKA_VNUTRENNYAYA:
				START PROCESS SbrosOshibkiV_TDD;
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_TDD_OSHIBKA_VNUTRENNYAYA;
				LP_ParametrDlyaPIVOtTDD := _FUNCTION_;
				SET STATE PeredachaKodaI_ParametraPIV;
			ELSE
				LP_KodSoobsheniyaDlyaPIVOtTDD := PK_PIV_NEIZVESTNYJ_KOD_TDD;
				SET STATE PeredachaSoobsheniyaSParametromPIV;
		END_CASE
	END_STATE
	
	STATE PeredachaSoobsheniyaDlyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtTDD) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtTDD + LP_ParametrDlyaPIVOtTDD) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV_iSoobsheniyaOKontse 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtTDD + LP_ParametrDlyaPIVOtTDD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontse 
		IF (_FUNCTION_ + PK_PIV_TDD_KONETS_SNYATIYA_KOEFFITSIENTOV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtTDD + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRestartovTDD
	STATE Nachalo 
		IF (SchetchikRestartovTDD > 2) THEN
			SET NEXT;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE Soobshenie 
		IF (_FUNCTION_ + PK_PIV_TDD_RESTARTY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OtklyuchenieDatchika 
		STOP PROCESS VosstanovlenieSvyaziS_TDD;
		_VOID_ := _FUNCTION_;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtDTN
	VAR
		LP_KodSoobsheniyaDlyaPIVOtDTN : INT;
		LP_ParametrDlyaPIVOtDTN : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			SET STATE RazborKodaKomandyOtDTN;
		END_IF
	END_STATE
	
	STATE RazborKodaKomandyOtDTN 
		CASE (LP_KodKomandy) OF
			PK_DTN_INITSIALIZATSIYA:
				LP_KodSoobsheniyaDlyaPIVOtDTN := ZAPROS_INITSIALIZATSII_DTN;
				START PROCESS SbrosBitaInitsializatsiiV_DTN;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_GOTOV_K_RABOTE:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_GOTOV_K_RABOTE;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_ZAPUSK_TESTA:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_ZAPUSK_TESTA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_TEST_BEZ_OSHIBKI:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_TEST_BEZ_OSHIBKI;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_OSHIBKA_TESTA:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_OSHIBKA_TESTA;
				FlagDTN := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_OSHIBKA_FATALQNAYA:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_OSHIBKA_FATALQNAYA;
				FlagDTN := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_DANNYE_PO_TEMPERATURE_USTARELI:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_DANNYE_PO_TEMPERATURE_USTARELI;
				FlagDTN := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ;
				FlagDTN := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ;
				FlagDTN := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTN_TEMPERATURA_V_NORME:
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_DTN_TEMPERATURA_V_NORME;
				FlagDTN := VKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			ELSE
				LP_KodSoobsheniyaDlyaPIVOtDTN := PK_PIV_NEIZVESTNYJ_KOD_DTN;
				SET STATE PeredachaSoobsheniyaSParametromPIV;
		END_CASE
	END_STATE
	
	STATE PeredachaSoobsheniyaDlyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDTN) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDTN + LP_ParametrDlyaPIVOtDTN) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDTN + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtDTR
	VAR
		LP_KodSoobsheniyaDlyaPIVOtDTR : INT;
		LP_ParametrDlyaPIVOtDTR : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			SET STATE RazborKodaKomandyOtDTR;
		END_IF
	END_STATE
	
	STATE RazborKodaKomandyOtDTR 
		CASE (LP_KodKomandy) OF
			PK_DTR_INITSIALIZATSIYA:
				LP_KodSoobsheniyaDlyaPIVOtDTR := ZAPROS_INITSIALIZATSII_DTR;
				START PROCESS SbrosBitaInitsializatsiiV_DTR;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_GOTOV_K_RABOTE:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_GOTOV_K_RABOTE;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_ZAPUSK_TESTA:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_ZAPUSK_TESTA;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_TEST_BEZ_OSHIBKI:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_TEST_BEZ_OSHIBKI;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_OSHIBKA_TESTA:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_OSHIBKA_TESTA;
				FlagDTR := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_OSHIBKA_FATALQNAYA:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_OSHIBKA_FATALQNAYA;
				FlagDTR := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_DANNYE_PO_TEMPERATURE_USTARELI:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_DANNYE_PO_TEMPERATURE_USTARELI;
				FlagDTR := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_TEMPERATURA_NIZHE_MIN_DOPUSTIMOJ;
				FlagDTR := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_TEMPERATURA_VYSHE_MAKS_DOPUSTIMOJ;
				FlagDTR := VYKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			PK_DTR_TEMPERATURA_V_NORME:
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_DTR_TEMPERATURA_V_NORME;
				FlagDTR := VKL;
				SET STATE PeredachaSoobsheniyaDlyaPIV;
			ELSE
				LP_KodSoobsheniyaDlyaPIVOtDTR := PK_PIV_NEIZVESTNYJ_KOD_DTR;
				SET STATE PeredachaSoobsheniyaSParametromPIV;
		END_CASE
	END_STATE
	
	STATE PeredachaSoobsheniyaDlyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDTR) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDTR + LP_ParametrDlyaPIVOtDTR) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtDTR + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandOtIP2K_K1
	VAR
		LP_KodSoobsheniyaDlyaPIVOtIP : INT;
		LP_ParametrDlyaPIVOtIP : REAL;
		LP_KodKomandy : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_) THEN
			LP_KodKomandy := _FUNCTION_;
			CASE (LP_KodKomandy) OF
				PK_IP2K_K1_INITSIALIZATSIYA:
					Flag_IP2K_K1 := VYKL;
					LP_KodSoobsheniyaDlyaPIVOtIP := ZAPROS_INITSIALIZATSII_IP2K_K1;
					START PROCESS SbrosBitaInitsializatsiiV_IP2K_K1;
					SET STATE PeredachaSoobsheniyaDlyaPIV;
				PK_IP2K_K1_GOTOV_K_RABOTE:
					LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_IP2K_K1_GOTOV_K_RABOTE;
					SET STATE PeredachaSoobsheniyaDlyaPIV;
				PK_IP2K_K1_OTKAZ:
					Flag_IP2K_K1 := VYKL;
					LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_OTKAZ_IP2K_K1;
					LP_ParametrDlyaPIVOtIP := _FUNCTION_;
					SET STATE PeredachaKodaI_ParametraPIV;
				PK_IP2K_K1_VKLYUCHITQ:
					Flag_IP2K_K1 := VKL;
					LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_VKLYUCHEN_IP2K_K1;
					SET STATE PeredachaSoobsheniyaDlyaPIV;
				PK_IP2K_K1_VYKLYUCHITQ:
					Flag_IP2K_K1 := VYKL;
					IF ((PROCESS REG_W_IPN_K1 IN STATE ACTIVE) OR (PROCESS REG_W_IPN_K1_TESTOVOE IN STATE ACTIVE)) THEN
						LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_OTKAZ_IP2K_K1;
					ELSE 
						LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_VYKLYUCHEN_IP2K_K1;
					END_IF
					LP_ParametrDlyaPIVOtIP := _FUNCTION_;
					SET STATE PeredachaKodaI_ParametraPIV;
				PK_IP2K_K1_AVTONOMNYJ_REZHIM:
					LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_AVTONOMNYJ_REZHIM_IP2K_K1;
					SET STATE PeredachaSoobsheniyaDlyaPIV;
				PK_IP2K_K1_NEAVTONOMNYJ_REZHIM:
					IF (Flag_IP2K_K1) THEN
						START PROCESS VKL_REG_W_IPN_K1;
					ELSE 
						START PROCESS VYK_IPN_K1;
					END_IF
					LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_NEAVTONOMNYJ_REZHIM_IP2K_K1;
					SET STATE PeredachaSoobsheniyaDlyaPIV;
				ELSE
					LP_KodSoobsheniyaDlyaPIVOtIP := PK_PIV_NEIZVESTNYJ_KOD_IP2K_K1;
					SET STATE PeredachaSoobsheniyaSParametromPIV;
			END_CASE
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaDlyaPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtIP) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKodaI_ParametraPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtIP + LP_ParametrDlyaPIVOtIP) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaSParametromPIV 
		IF (_FUNCTION_ + LP_KodSoobsheniyaDlyaPIVOtIP + LP_KodKomandy) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegulyatorov
	STATE Nachalo 
		START PROCESS KontrolqSostoyaniyaRegVzR;
		START PROCESS KontrolqSostoyaniyaRegHzR;
		START PROCESS KontrolqSostoyaniyaRegVzU;
		START PROCESS KontrolqSostoyaniyaRegHzU;
		START PROCESS KontrolqSostoyaniyaRegWz;
		START PROCESS KontrolqSostoyaniyaRegWz_UGOL;
		START PROCESS KontrolqSostoyaniyaRegVtR;
		START PROCESS KontrolqSostoyaniyaRegHtR;
		START PROCESS KontrolqSostoyaniyaRegVtU;
		START PROCESS KontrolqSostoyaniyaRegHtU;
		START PROCESS KontrolqSostoyaniyaRegWt;
		START PROCESS KontrolqSostoyaniyaRegWt_UGOL;
		START PROCESS KontrolqSostoyaniya_REG_RG;
		START PROCESS KontrolqSostoyaniya_REG_D;
		START PROCESS KontrolqSostoyaniya_REG_W_IPN_K1;
		START PROCESS KontrolqSostoyaniya_REG_W_IPN_K2;
		START PROCESS KontrolqSostoyaniya_REG_TN;
		START PROCESS KontrolqSostoyaniya_REG_TR;
		START PROCESS KontrolqSostoyaniya_REG_ROSTA;
		START PROCESS KontrolqSostoyaniya_REG_UR;
		START PROCESS KontrolqSostoyaniya_REG_DK;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegVzR
	STATE Nachalo 
		IF (PROCESS ZAT_RS IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_VzR_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_ZAT_RS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS ZAT_RS IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_VzR_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			IF (_FUNCTION_ + PK_VPO_VYK_REG_Vz) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS ZAT_RS IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegHzR
	STATE Nachalo 
		IF (PROCESS ZAT_RK IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_XzR_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS ZAT_RK IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_XzR_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS ZAT_RK IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegVzU
	STATE Nachalo 
		IF (PROCESS ZAT_US IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_VzU_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_ZAT_US) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_VzU_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (NOT (PROCESS ZAT_RS IN STATE ACTIVE)) THEN
			IF (_FUNCTION_ + PK_VPO_VYK_REG_Vz) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS ZAT_US IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegHzU
	STATE Nachalo 
		IF ((PROCESS ZAT_UK IN STATE ACTIVE) OR (PROCESS ZAT_UK_US IN STATE ACTIVE) OR (PROCESS VKL_REG_ZAT_UK IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_XzU_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF ((NOT (PROCESS ZAT_UK IN STATE ACTIVE)) AND (NOT (PROCESS ZAT_UK_US IN STATE ACTIVE)) AND (NOT (PROCESS VKL_REG_ZAT_UK IN STATE ACTIVE))) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_XzU_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF ((PROCESS ZAT_UK IN STATE ACTIVE) OR (PROCESS ZAT_UK_US IN STATE ACTIVE) OR (PROCESS VKL_REG_ZAT_UK IN STATE ACTIVE)) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegWz
	STATE Nachalo 
		IF (PROCESS ZAT_VR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_Wz_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_ZAT_VR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS ZAT_VR IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_Wz_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (_FUNCTION_ + PK_VPO_VYK_ZAT_VR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS ZAT_VR IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegWz_UGOL
	STATE Nachalo 
		IF (PROCESS ZAT_UGOL IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_Wz_UGOL_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS ZAT_UGOL IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_Wz_UGOL_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS ZAT_UGOL IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegVtR
	STATE Nachalo 
		IF (PROCESS TIG_RS IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_VtR_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_TIG_RS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_VtR_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			IF (_FUNCTION_ + PK_VPO_VYK_REG_Vt) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS TIG_RS IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegHtR
	STATE Nachalo 
		IF (PROCESS TIG_RK IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_XtR_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS TIG_RK IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_XtR_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS TIG_RK IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegVtU
	STATE Nachalo 
		IF (PROCESS TIG_US IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_VtU_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_TIG_US) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_VtU_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
			IF (_FUNCTION_ + PK_VPO_VYK_REG_Vt) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS TIG_US IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegHtU
	STATE Nachalo 
		IF ((PROCESS TIG_UK IN STATE ACTIVE) OR (PROCESS VKL_REG_TIG_UK IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_XtU_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF ((NOT (PROCESS TIG_UK IN STATE ACTIVE)) AND (NOT (PROCESS VKL_REG_TIG_UK IN STATE ACTIVE))) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_XtU_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF ((PROCESS TIG_UK IN STATE ACTIVE) OR (PROCESS VKL_REG_TIG_UK IN STATE ACTIVE)) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegWt
	STATE Nachalo 
		IF (PROCESS TIG_VR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_Wt_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_TIG_VR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS TIG_VR IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_Wt_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (_FUNCTION_ + PK_VPO_VYK_TIG_VR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS TIG_VR IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaRegWt_UGOL
	STATE Nachalo 
		IF (PROCESS TIG_UGOL IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_Wt_UGOL_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS TIG_UGOL IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_Wt_UGOL_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS TIG_UGOL IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_RG
	STATE Nachalo 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_RG_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_RG_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_D
	STATE Nachalo 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_D_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_D IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_D_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_UR
	STATE Nachalo 
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_UR_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_UR IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_UR_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_DK
	STATE Nachalo 
		IF (PROCESS REG_DK IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_DK_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_DK IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_DK_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_DK IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_W_IPN_K1
	STATE Nachalo 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_W_IPN_K1_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_W_IPN_K1_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_W_IPN_K2
	STATE Nachalo 
		IF (PROCESS REG_W_IPN_K2 IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_W_IPN_K2_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_W_IPN_K2 IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_W_IPN_K2_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_W_IPN_K2 IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_TN
	STATE Nachalo 
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_TN_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VKL 
		IF (_FUNCTION_ + PK_VPO_VKL_REG_TN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VKL_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_TN IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_TN_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobK_VPO_REG_VYKL 
		IF (_FUNCTION_ + PK_VPO_VYK_REG_TN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO_VYK_REG;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VKL_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO_VYK_REG 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_TR
	STATE Nachalo 
		IF (PROCESS REG_TR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_TR_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_TR IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_TR_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_TR IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_REG_ROSTA
	STATE Nachalo 
		IF (PROCESS REG_ROSTA IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_REG_VYKL;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VKL 
		IF (_FUNCTION_ + REG_ROSTA_VKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (NOT (PROCESS REG_ROSTA IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_REG_VYKL 
		IF (_FUNCTION_ + REG_ROSTA_VYKLYUCHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (PROCESS REG_ROSTA IN STATE ACTIVE) THEN
			SET STATE SoobK_PIV_REG_VKL;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandUpravleniyaKlapanami_ot_PIV
	STATE Analiz 
		STOP;
		CASE (KodSobytiya_ot_PIV) OF
			OTKR_AVD1_MO_NK_VE3:
				START PROCESS OTKR_AVD1_MO_NK_VE3;
			ZAKR_AVD1_MO_NK_VE3:
				START PROCESS ZAKR_AVD1_MO_NK_VE3;
			OTKR_AVD2_MO_NK_VE4:
				START PROCESS OTKR_AVD2_MO_NK_VE4;
			ZAKR_AVD2_MO_NK_VE4:
				START PROCESS ZAKR_AVD2_MO_NK_VE4;
			OTKR_AVD1_MO_VK_VE5:
				START PROCESS OTKR_AVD1_MO_VK_VE5;
			ZAKR_AVD1_MO_VK_VE5:
				START PROCESS ZAKR_AVD1_MO_VK_VE5;
			OTKR_AVD2_MO_VK_VE6:
				START PROCESS OTKR_AVD2_MO_VK_VE6;
			ZAKR_AVD2_MO_VK_VE6:
				START PROCESS ZAKR_AVD2_MO_VK_VE6;
			OTKR_BPK_VE7:
				START PROCESS OTKR_BPK_VE7;
			ZAKR_BPK_VE7:
				START PROCESS ZAKR_BPK_VE7;
			OTKR_PRODUVKA_VE8:
				START PROCESS OTKR_PRODUVKA_VE8;
			ZAKR_PRODUVKA_VE8:
				START PROCESS ZAKR_PRODUVKA_VE8;
			OTKR_NADDUV_VK_VE9:
				START PROCESS OTKR_NADDUV_VK_VE9;
			ZAKR_NADDUV_VK_VE9:
				START PROCESS ZAKR_NADDUV_VK_VE9;
			OTKR_NADDUV_NK_VE12:
				START PROCESS OTKR_NADDUV_NK_VE12;
			ZAKR_NADDUV_NK_VE12:
				START PROCESS ZAKR_NADDUV_NK_VE12;
			OTKR_VM14:
				START PROCESS OTKR_VM14;
			ZAKR_VM14:
				START PROCESS ZAKR_VM14;
			VYK_VM14:
				START PROCESS VYK_VM14;
			VKL_AVD1:
				START PROCESS VKL_AVD1;
			VKL_AVD2:
				START PROCESS VKL_AVD2;
			VYK_AVD1:
				START PROCESS VYK_AVD1;
			VYK_AVD2:
				START PROCESS VYK_AVD2;
			PEREKLYUCHITQ_AVD:
				START PROCESS PEREKLYUCHITQ_AVD;
			VKL_AVD1_NK:
				START PROCESS VKL_AVD1_NK;
			VKL_AVD2_NK:
				START PROCESS VKL_AVD2_NK;
			VKL_AVD1_VK:
				START PROCESS VKL_AVD1_VK;
			VKL_AVD2_VK:
				START PROCESS VKL_AVD2_VK;
			RAZGERMETIZATSIYA_VK:
				IF ((TekushijRezhim = REZHIM_RR) AND (PROCESS VAKUUMIROVANIE_VK IN STATE INACTIVE) AND (PROCESS RAZGERMETIZATSIYA_VK IN STATE INACTIVE)) THEN
					START PROCESS RAZGERMETIZATSIYA_VK;
				ELSE 
					SET STATE NekorrektnoeSobytie;
				END_IF
			VAKUUMIROVANIE_VK:
				IF ((TekushijRezhim = REZHIM_RR) AND (PROCESS VAKUUMIROVANIE_VK IN STATE INACTIVE) AND (PROCESS RAZGERMETIZATSIYA_VK IN STATE INACTIVE)) THEN
					START PROCESS VAKUUMIROVANIE_VK;
				ELSE 
					SET STATE NekorrektnoeSobytie;
				END_IF
			OSTANOV_SHLYUZOVANIYA:
				START PROCESS OSTANOV_SHLYUZOVANIYA;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_NAT_AVD1_VE1
	STATE Nachalo 
		IF (PROCESS ZAKR_NAT_AVD1_VE1 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_NAT_AVD1_VE1;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE1;
		U_VE1 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE1 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE1;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE1_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_NAT_AVD1_VE1
	STATE Nachalo 
		IF (PROCESS OTKR_NAT_AVD1_VE1 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_NAT_AVD1_VE1;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE1;
		U_VE1 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE1 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE1;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE1_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE1
	STATE Nachalo 
		IF (K_VE1 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE1_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE1_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE1 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE1 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE1
	STATE KontrolqKontsevika 
		IF (K_VE1 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE1 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE1
	STATE KontrolqKontsevika 
		IF (K_VE1 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE1 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_NAT_AVD2_VE2
	STATE Nachalo 
		IF (PROCESS ZAKR_NAT_AVD2_VE2 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_NAT_AVD2_VE2;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE2;
		U_VE2 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE2 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE2;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE2_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_NAT_AVD2_VE2
	STATE Nachalo 
		IF (PROCESS OTKR_NAT_AVD2_VE2 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_NAT_AVD2_VE2;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE2;
		U_VE2 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE2 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE2;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE2_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE2
	STATE Nachalo 
		IF (K_VE2 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE2_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE2_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE2 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE2 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE2
	STATE KontrolqKontsevika 
		IF (K_VE2 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE2 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE2
	STATE KontrolqKontsevika 
		IF (K_VE2 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE2 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_AVD1_MO_NK_VE3
	STATE Nachalo 
		IF (FP_Pavd1 > (FP_Pnk + 0.5)) THEN
			SET STATE OshibkaDavleniya;
		ELSE 
			SET STATE OtkrytieKlapana;
		END_IF
	END_STATE
	
	STATE OtkrytieKlapana 
		IF (PROCESS ZAKR_AVD1_MO_NK_VE3 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_AVD1_MO_NK_VE3;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE3;
		U_VE3 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE3 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE3;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE3_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE3) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaDavleniya 
		IF (_FUNCTION_ + PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE3_Rnk_MENQSHE_Pavd1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_AVD1_MO_NK_VE3
	STATE Nachalo 
		IF (PROCESS OTKR_AVD1_MO_NK_VE3 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_AVD1_MO_NK_VE3;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE3;
		U_VE3 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE3 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE3;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE3_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE3) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE3
	STATE Nachalo 
		IF (K_VE3 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE3_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE3_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE3 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE3 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE3
	STATE KontrolqKontsevika 
		IF (K_VE3 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE3) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE3 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE3) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE3
	STATE KontrolqKontsevika 
		IF (K_VE3 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE3) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE3 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE3) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_AVD2_MO_NK_VE4
	STATE Nachalo 
		IF (FP_Pavd2 > (FP_Pnk + 0.5)) THEN
			SET STATE OshibkaDavleniya;
		ELSE 
			SET STATE OtkrytieKlapana;
		END_IF
	END_STATE
	
	STATE OtkrytieKlapana 
		IF (PROCESS ZAKR_AVD2_MO_NK_VE4 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_AVD2_MO_NK_VE4;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE4;
		U_VE4 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE4 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE4;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE4_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE4) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaDavleniya 
		IF (_FUNCTION_ + PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE4_Rnk_MENQSHE_Pavd2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_AVD2_MO_NK_VE4
	STATE Nachalo 
		IF (PROCESS OTKR_AVD2_MO_NK_VE4 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_AVD2_MO_NK_VE4;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE4;
		U_VE4 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE4 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE4;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE4_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE4) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE4
	STATE Nachalo 
		IF (K_VE4 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE4_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE4_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE4 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE4 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE4
	STATE KontrolqKontsevika 
		IF (K_VE4 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE4) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE4 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE4) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE4
	STATE KontrolqKontsevika 
		IF (K_VE4 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE4) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE4 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE4) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_AVD1_MO_VK_VE5
	STATE Nachalo 
		IF (FP_Pavd1 > (FP_Pvk + 0.5)) THEN
			SET STATE OshibkaDavleniya;
		ELSE 
			SET STATE OtkrytieKlapana;
		END_IF
	END_STATE
	
	STATE OtkrytieKlapana 
		IF (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_AVD1_MO_VK_VE5;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE5;
		U_VE5 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE5 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE5;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE5_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE5) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaDavleniya 
		IF (_FUNCTION_ + PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE5_Rvk_MENQSHE_Pavd1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_AVD1_MO_VK_VE5
	STATE Nachalo 
		IF (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_AVD1_MO_VK_VE5;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE5;
		U_VE5 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE5 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE5;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE5_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE5) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE5
	STATE Nachalo 
		IF (K_VE5 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE5_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE5_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE5 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE5 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE5
	STATE KontrolqKontsevika 
		IF (K_VE5 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE5) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE5 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE5) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE5
	STATE KontrolqKontsevika 
		IF (K_VE5 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE5) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE5 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE5) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_AVD2_MO_VK_VE6
	STATE Nachalo 
		IF (FP_Pavd2 > (FP_Pvk + 0.5)) THEN
			SET STATE OshibkaDavleniya;
		ELSE 
			SET STATE OtkrytieKlapana;
		END_IF
	END_STATE
	
	STATE OtkrytieKlapana 
		IF (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_AVD2_MO_VK_VE6;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE6;
		U_VE6 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE6 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE6;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE6_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE6) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaDavleniya 
		IF (_FUNCTION_ + PK_PIV_NET_USLOVIJ_OTKRYTIYA_VE6_Rvk_MENQSHE_Pavd2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_AVD2_MO_VK_VE6
	STATE Nachalo 
		IF (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_AVD2_MO_VK_VE6;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE6;
		U_VE6 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE6 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE6;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE6_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE6) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE6
	STATE Nachalo 
		IF (K_VE6 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE6_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE6_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE6 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE6 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE6
	STATE KontrolqKontsevika 
		IF (K_VE6 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE6) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE6 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE6) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE6
	STATE KontrolqKontsevika 
		IF (K_VE6 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE6) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE6 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE6) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_BPK_VE7
	STATE Nachalo 
		IF (PROCESS ZAKR_BPK_VE7 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_BPK_VE7;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE7;
		U_VE7 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE7 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE7;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE7_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE7) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_BPK_VE7
	STATE Nachalo 
		IF (PROCESS OTKR_BPK_VE7 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_BPK_VE7;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE7;
		U_VE7 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE7 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE7;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE7_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE7) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE7
	STATE Nachalo 
		IF (K_VE7 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE7_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE7_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE7 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE7 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE7
	STATE KontrolqKontsevika 
		IF (K_VE7 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE7) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE7 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE7) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE7
	STATE KontrolqKontsevika 
		IF (K_VE7 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE7) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE7 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE7) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_PRODUVKA_VE8
	STATE Nachalo 
		IF (PROCESS ZAKR_PRODUVKA_VE8 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_PRODUVKA_VE8;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE8;
		U_VE8 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (U_VE8 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE8;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE8_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE8) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_PRODUVKA_VE8
	STATE Nachalo 
		IF (PROCESS OTKR_PRODUVKA_VE8 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_PRODUVKA_VE8;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE8;
		U_VE8 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (U_VE8 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE8;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE8_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE8) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE8
	STATE Nachalo 
		IF (U_VE8 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE8_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE8_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (U_VE8 = ZAKR) THEN
			SET STATE KlapanZakryt;
		ELSE 
			IF (FP_Pvk >= NP_Patmosf) THEN
				IF (PROCESS ZAKR_PRODUVKA_VE8 IN STATE INACTIVE) THEN
					START PROCESS ZAKR_PRODUVKA_VE8;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (U_VE8 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE8
	STATE KontrolqKontsevika 
		IF (U_VE8 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE8) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE8 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE8) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE8
	STATE KontrolqKontsevika 
		IF (U_VE8 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE8) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE8 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE8) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_NADDUV_VK_VE9
	STATE Nachalo 
		IF (PROCESS ZAKR_NADDUV_VK_VE9 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_NADDUV_VK_VE9;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE9;
		U_VE9 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (U_VE9 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE9;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE9_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE9) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_NADDUV_VK_VE9
	STATE Nachalo 
		IF (PROCESS OTKR_NADDUV_VK_VE9 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_NADDUV_VK_VE9;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE9;
		U_VE9 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (U_VE9 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE9;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE9_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE9) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE9
	STATE Nachalo 
		IF (U_VE9 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE9_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE9_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (U_VE9 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (U_VE9 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE9
	STATE KontrolqKontsevika 
		IF (U_VE9 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE9) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE9 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE9) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE9
	STATE KontrolqKontsevika 
		IF (U_VE9 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE9) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE9 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE9) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_NADDUV_NK_VE12
	STATE Nachalo 
		IF (PROCESS ZAKR_NADDUV_NK_VE12 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_NADDUV_NK_VE12;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE12;
		U_VE12 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (U_VE12 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE12;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE12_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE12) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_NADDUV_NK_VE12
	STATE Nachalo 
		IF (PROCESS OTKR_NADDUV_NK_VE12 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_NADDUV_NK_VE12;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE12;
		U_VE12 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (U_VE12 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE12;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE12_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE12) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE12
	STATE Nachalo 
		IF (U_VE12 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE12_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE12_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (U_VE12 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (U_VE12 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE12
	STATE KontrolqKontsevika 
		IF (U_VE12 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE12) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE12 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE12) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE12
	STATE KontrolqKontsevika 
		IF (U_VE12 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE12) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE12 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE12) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_VYHLOP_AVD2_VE10
	STATE Nachalo 
		IF (PROCESS ZAKR_VYHLOP_AVD2_VE10 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_VYHLOP_AVD2_VE10;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE10;
		U_VE10 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE10 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE10;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE10_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE10) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_VYHLOP_AVD2_VE10
	STATE Nachalo 
		IF (PROCESS OTKR_VYHLOP_AVD2_VE10 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_VYHLOP_AVD2_VE10;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE10;
		U_VE10 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE10 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE10;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE10_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE10) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE10
	STATE Nachalo 
		IF (K_VE10 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE10_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE10_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE10 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE10 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE10
	STATE KontrolqKontsevika 
		IF (K_VE10 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE10) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE10 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE10) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE10
	STATE KontrolqKontsevika 
		IF (K_VE10 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE10) THEN
				IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD2;
				END_IF
				SET NEXT;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE10 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE10) THEN
				IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD2;
				END_IF
				SET NEXT;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_VYHLOP_AVD1_VE11
	STATE Nachalo 
		IF (PROCESS ZAKR_VYHLOP_AVD1_VE11 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_VYHLOP_AVD1_VE11;
		END_IF
		STOP PROCESS KontrolqOtkrytiyaVE11;
		U_VE11 := OTKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE11 = OTKR) THEN
			START PROCESS KontrolqZakrytiyaVE11;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE11_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_OTKR_VE11) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_VYHLOP_AVD1_VE11
	STATE Nachalo 
		IF (PROCESS OTKR_VYHLOP_AVD1_VE11 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_VYHLOP_AVD1_VE11;
		END_IF
		STOP PROCESS KontrolqZakrytiyaVE11;
		U_VE11 := ZAKR;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_VE11 = ZAKR) THEN
			START PROCESS KontrolqOtkrytiyaVE11;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KLAPAN_VE11_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_ZAKR_VE11) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyVE11
	STATE Nachalo 
		IF (K_VE11 = OTKR) THEN
			SET STATE KlapanOtkryt;
		ELSE 
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE KlapanOtkryt 
		IF (_FUNCTION_ + PK_PIV_VE11_OTKRYT) THEN
			SET STATE OzhidanieZakrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanZakryt 
		IF (_FUNCTION_ + PK_PIV_VE11_ZAKRYT) THEN
			SET STATE OzhidanieOtkrytiya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_VE11 = ZAKR) THEN
			SET STATE KlapanZakryt;
		END_IF
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_VE11 = OTKR) THEN
			SET STATE KlapanOtkryt;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkrytiyaVE11
	STATE KontrolqKontsevika 
		IF (K_VE11 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_VE11) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE11 = OTKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_OTKR_U_VE11) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqZakrytiyaVE11
	STATE KontrolqKontsevika 
		IF (K_VE11 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_VE11) THEN
				IF (NOT (PROCESS VYK_AVD1 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD1;
				END_IF
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_VE11 = ZAKR) THEN
			IF (_FUNCTION_ + PK_PIV_NEKNTR_ZAKR_U_VE11) THEN
				IF (NOT (PROCESS VYK_AVD1 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD1;
				END_IF
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS OTKR_VM14
	STATE Nachalo 
		IF (PROCESS ZAKR_VM14 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_VM14;
		END_IF
		IF (PROCESS VYK_VM14 IN STATE ACTIVE) THEN
			ERROR PROCESS VYK_VM14;
		END_IF
		IF (K_OTKR_VM14 <> SRABOTAL) THEN
			U_OTKR_VM14 := VKL;
			U_ZAKR_VM14 := VYKL;
			SET STATE KontrolqOtkrytiya;
		ELSE 
			STOP;
		END_IF
	END_STATE
	
	STATE KontrolqOtkrytiya 
		IF (K_OTKR_VM14 = SRABOTAL) THEN
			U_OTKR_VM14 := VYKL;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T2 THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_VM14_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_VREMYA_OTKR_VM14_ISTEKLO) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAKR_VM14
	STATE Nachalo 
		IF (PROCESS OTKR_VM14 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_VM14;
		END_IF
		IF (PROCESS VYK_VM14 IN STATE ACTIVE) THEN
			ERROR PROCESS VYK_VM14;
		END_IF
		IF (K_ZAKR_VM14 <> SRABOTAL) THEN
			U_OTKR_VM14 := VYKL;
			U_ZAKR_VM14 := VKL;
			SET STATE KontrolqZakrytiya;
		ELSE 
			STOP;
		END_IF
	END_STATE
	
	STATE KontrolqZakrytiya 
		IF (K_ZAKR_VM14 = SRABOTAL) THEN
			U_ZAKR_VM14 := VYKL;
			SET STATE PeredachaSoobsheniya;
		END_IF
		TIMEOUT T2 THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_VM14_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_VREMYA_ZAKR_VM14_ISTEKLO) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_VM14
	STATE Nachalo 
		IF (PROCESS OTKR_VM14 IN STATE ACTIVE) THEN
			ERROR PROCESS OTKR_VM14;
		END_IF
		IF (PROCESS ZAKR_VM14 IN STATE ACTIVE) THEN
			ERROR PROCESS ZAKR_VM14;
		END_IF
		IF ((NOT U_ZAKR_VM14) AND (NOT U_OTKR_VM14)) THEN
			STOP;
		ELSE 
			U_OTKR_VM14 := VYKL;
			U_ZAKR_VM14 := VYKL;
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS KontrolqUpravleniyaVM14
	STATE Nachalo 
		IF ((NOT U_OTKR_VM14) AND (NOT U_ZAKR_VM14)) THEN
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHENIE_VM14) THEN
				SET STATE SmenaSobytiyaVyklVM14;
			END_IF
		ELSE 
			IF ((NOT U_OTKR_VM14) AND (U_ZAKR_VM14)) THEN
				IF (_FUNCTION_ + PK_PIV_ZAKR_VM14) THEN
					SET STATE SmenaSobytiyaZakrVM14;
				END_IF
			ELSE 
				IF ((U_OTKR_VM14) AND (NOT U_ZAKR_VM14)) THEN
					IF (_FUNCTION_ + PK_PIV_OTKR_VM14) THEN
						SET STATE SmenaSobytiyaOtkrVM14;
					END_IF
				ELSE 
					IF (_FUNCTION_ + PK_PIV_OSHIBKA_UPRAVLENIYA_VM14) THEN
						SET STATE SmenaSobytiyaOshUprVM14;
					END_IF
				END_IF
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSobytiyaVyklVM14 
		IF (NOT ((NOT U_OTKR_VM14) AND (NOT U_ZAKR_VM14))) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaZakrVM14 
		IF (NOT ((NOT U_OTKR_VM14) AND (U_ZAKR_VM14))) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaOtkrVM14 
		IF (NOT ((U_OTKR_VM14) AND (NOT U_ZAKR_VM14))) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaOshUprVM14 
		IF (NOT ((U_OTKR_VM14) AND (U_ZAKR_VM14))) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaVM14
	STATE Nachalo 
		IF ((NOT K_OTKR_VM14) AND (NOT K_ZAKR_VM14)) THEN
			IF (_FUNCTION_ + PK_PIV_SREDNEE_SOSTOYANIE_VM14) THEN
				SET STATE SmenaSobytiyaSredVM14;
			END_IF
		ELSE 
			IF ((NOT K_OTKR_VM14) AND (K_ZAKR_VM14)) THEN
				IF (_FUNCTION_ + PK_PIV_VM14_ZAKRYT) THEN
					SET STATE SmenaSobytiyaZakrVM14;
				END_IF
			ELSE 
				IF ((K_OTKR_VM14) AND (NOT K_ZAKR_VM14)) THEN
					IF (_FUNCTION_ + PK_PIV_VM14_OTKRYT) THEN
						SET STATE SmenaSobytiyaOtkrVM14;
					END_IF
				ELSE 
					IF (_FUNCTION_ + PK_PIV_SOSTOYANIE_OSHIBKI_VM14) THEN
						SET STATE SmenaSobytiyaOshVM14;
					END_IF
				END_IF
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSobytiyaSredVM14 
		IF (K_OTKR_VM14 OR K_ZAKR_VM14) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaZakrVM14 
		IF (K_OTKR_VM14 OR (NOT K_ZAKR_VM14)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaOtkrVM14 
		IF ((NOT K_OTKR_VM14) OR K_ZAKR_VM14) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaOshVM14 
		IF ((NOT K_OTKR_VM14) OR (NOT K_ZAKR_VM14)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaZatvoraVakuumnogo
	STATE Nachalo 
		IF ((NOT K_OTKR_ZATVOR_V) AND (NOT K_ZAKR_ZATVOR_V)) THEN
			IF (_FUNCTION_ + PK_PIV_SREDNEE_SOSTOYANIE_ZATVORA_VAKUUMNOGO) THEN
				SET STATE SmenaSostoyaniyaSrednego;
			END_IF
		ELSE 
			IF ((NOT K_OTKR_ZATVOR_V) AND (K_ZAKR_ZATVOR_V)) THEN
				IF (_FUNCTION_ + PK_PIV_ZATVOR_VAKUUMNYJ_ZAKRYT) THEN
					SET STATE SmenaSostoyaniyaZakrytiya;
				END_IF
			ELSE 
				IF ((K_OTKR_ZATVOR_V) AND (NOT K_ZAKR_ZATVOR_V)) THEN
					IF (_FUNCTION_ + PK_PIV_ZATVOR_VAKUUMNYJ_OTKRYT) THEN
						SET STATE SmenaSostoyaniyaOtkrytiya;
					END_IF
				ELSE 
					IF (_FUNCTION_ + PK_PIV_SOSTOYANIE_OSHIBKI_ZATVORA_VAKUUMNOGO) THEN
						SET STATE SmenaSostoyaniyaOshibki;
					END_IF
				END_IF
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaSrednego 
		IF (K_OTKR_ZATVOR_V OR K_ZAKR_ZATVOR_V) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaZakrytiya 
		IF (K_OTKR_ZATVOR_V OR (NOT K_ZAKR_ZATVOR_V)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaOtkrytiya 
		IF ((NOT K_OTKR_ZATVOR_V) OR K_ZAKR_ZATVOR_V) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaOshibki 
		IF ((NOT K_OTKR_ZATVOR_V) OR (NOT K_ZAKR_ZATVOR_V)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqPolozheniyaZatravkiPriZakrytiiZatvoraVakuumnogo
	STATE Nachalo 
		IF ((K_OTKR_ZATVOR_V) AND (NOT K_ZAKR_ZATVOR_V)) THEN
			SET STATE SmenaSostoyaniyaOtkrytiya;
		ELSE 
			IF (KOORD_ZAT <> ZAT_V_KVP) THEN
				SET NEXT;
			ELSE 
				SET STATE SmenaSostoyaniyaNeOtkrytiya;
			END_IF
		END_IF
	END_STATE
	
	STATE PreduprezhdenieOperatoruOZatravke 
		IF (_FUNCTION_ + PK_PIV_ZAKRYTIE_ZV_PRI_OPUSHENNOJ_ZATRAVKE) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaNeOtkrytiya 
		IF ((K_OTKR_ZATVOR_V) AND (NOT K_ZAKR_ZATVOR_V)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaOtkrytiya 
		IF ((NOT K_OTKR_ZATVOR_V) OR K_ZAKR_ZATVOR_V) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaDatchikaPrivyazki
	STATE Nachalo 
		IF (NOT U_LAZERA_DP) THEN
			IF (_FUNCTION_ + PK_PIV_DP_VYKLYUCHEN) THEN
				SET STATE SmenaSostoyaniyaVyklyuchen;
			END_IF
		ELSE 
			IF (K_DP) THEN
				IF (_FUNCTION_ + PK_PIV_LUCH_DP_DOSTIG_FOTOPRIEMNIKA) THEN
					SET STATE SmenaSostoyaniyaOtkrytiya;
				END_IF
			ELSE 
				IF (_FUNCTION_ + PK_PIV_LUCH_DP_PEREKRYT_PREPYATSTVIEM) THEN
					SET STATE SmenaSostoyaniyaZakrytiya;
				END_IF
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaVyklyuchen 
		IF (U_LAZERA_DP) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaZakrytiya 
		IF (K_DP OR (NOT U_LAZERA_DP)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaOtkrytiya 
		IF ((NOT U_LAZERA_DP) OR (NOT K_DP)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaDatchikaKasaniya
	VAR
		LP_FlagPervogoKasaniya : BOOL;
	END_VAR
	
	STATE PoVklyucheniyu 
		LP_FlagPervogoKasaniya := VYKL;
		SET NEXT;
	END_STATE
	
	STATE Nachalo 
		IF ((_FUNCTION_ + FP_Xz > 360.0) AND (TekushijRezhim <> REZHIM_INITSIALIZATSII)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshenieKasaniya 
		IF (K_DATCHIKA_KASANIYA) THEN
			IF (_FUNCTION_ + PK_PIV_DK_ESTQ_KASANIE) THEN
				LP_FlagPervogoKasaniya := VKL;
				SET STATE SmenaSostoyaniyaKasanie;
			END_IF
		ELSE 
			IF (LP_FlagPervogoKasaniya) THEN
				IF (_FUNCTION_ + PK_PIV_DK_NET_KASANIYA) THEN
					SET STATE SmenaSostoyaniyaNetKasaniya;
				END_IF
			ELSE 
				SET STATE SmenaSostoyaniyaNetKasaniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaKasanie 
		IF (NOT K_DATCHIKA_KASANIYA) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaNetKasaniya 
		IF (K_DATCHIKA_KASANIYA) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaBlokirovki_VK_NK
	STATE Nachalo 
		IF (U_RAZBLOKIROVKA_VK_NK) THEN
			IF (_FUNCTION_ + NET_BLOKIROVKI_VK_NK) THEN
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + ESTQ_BLOKIROVKA_VK_NK) THEN
				SET STATE SmenaSostoyaniyaVYKL;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaVKL 
		IF (NOT U_RAZBLOKIROVKA_VK_NK) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaVYKL 
		IF (U_RAZBLOKIROVKA_VK_NK) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRezhimaRaboty
	VAR
		LP_Predydushee : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT TekushijRezhim);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> TekushijRezhim) THEN
			LP_Predydushee := TekushijRezhim;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqEtapaRaboty
	VAR
		LP_Predydushee : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT TekushijEtap);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> TekushijEtap) THEN
			LP_Predydushee := TekushijEtap;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE DejstviyaPoSmeneEtapa 
		CASE (LP_Predydushee) OF
			ETAP_ZATRAVLIVANIE,
			ETAP_TP_PEREHOD_ZATR_SHEJKA,
			ETAP_VYRASHIVANIE_SHEJKI,
			ETAP_TP_PEREHOD_SHEJKA_KONUS,
			ETAP_VYRASHIVANIE_KONUSA,
			ETAP_PEREHOD_KONUS_TSILINDR,
			ETAP_STABILIZATSIYA_TSILINDRA,
			ETAP_TP_VYRASHIVANIE_TSILINDRA,
			ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS,
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				OP_KoordinataTekCHastiMonokristalla := FP_Xz;
				SET NEXT;
			ELSE
				SET STATE SoobshObIzmenenii;
		END_CASE
	END_STATE
	
	STATE PeredachaKoordNachalaTekCHasti 
		IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_TEK_CHASTI + OP_KoordinataTekCHastiMonokristalla) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaOpredelyaemyhKoordinat 
		CASE (LP_Predydushee) OF
			ETAP_ZATRAVLIVANIE:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_ZATRAVLIVANIYA + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaZatravlivaniya := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_TP_PEREHOD_ZATR_SHEJKA:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_PEREHODA_ZATRAVKA_SHEJKA + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaPerehodaZatravka_SHejka := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_VYRASHIVANIE_SHEJKI:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_SHEJKI + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaSHejki := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_TP_PEREHOD_SHEJKA_KONUS:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_PEREHODA_SHEJKA_KONUS + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaPerehodaSHejka_Konus := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_VYRASHIVANIE_KONUSA:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_KONUSA + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaKonusa := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_PEREHOD_KONUS_TSILINDR:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_PEREHODA_KONUS_TSILINDR + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaPerehodaKonus_TSilindr := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_STABILIZATSIYA_TSILINDRA:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_STABILIZATSII_TSILINDRA + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaStabilizatsiiTSilindra := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_TP_VYRASHIVANIE_TSILINDRA:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_TSILINDRA + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaTSilindra := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_PEREHODA_TSILINDR_OBR_KONUS + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaPerehodaTSilindr_ObrKonus := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				IF (_FUNCTION_ + PK_PIV_KOORDINATA_NACHALA_OBR_KONUSA + OP_KoordinataTekCHastiMonokristalla) THEN
					OP_KoordinataNachalaObratnogoKonusa := OP_KoordinataTekCHastiMonokristalla;
					SET NEXT;
				END_IF
			ELSE
				SET NEXT;
		END_CASE
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS VKL_NVR1
	STATE Nachalo 
		IF (PROCESS VYKL_NVR1 IN STATE ACTIVE) THEN
			ERROR PROCESS VYKL_NVR1;
		END_IF
		STOP PROCESS KontrolqVklyucheniyaNVR1;
		U_NVR1 := VKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_NVR1 = VKL) THEN
			START PROCESS KontrolqVyklyucheniyaNVR1;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NVR1_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_NVR1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYKL_NVR1
	STATE Nachalo 
		IF (PROCESS VKL_NVR1 IN STATE ACTIVE) THEN
			ERROR PROCESS VKL_NVR1;
		END_IF
		STOP PROCESS KontrolqVyklyucheniyaNVR1;
		U_NVR1 := VYKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_NVR1 = VYKL) THEN
			START PROCESS KontrolqVklyucheniyaNVR1;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NVR1_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_NVR1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyNVR1
	STATE Nachalo 
		IF (K_NVR1 = VKL) THEN
			SET STATE NVR1Vklyuchen;
		ELSE 
			SET STATE NVR1Vyklyuchen;
		END_IF
	END_STATE
	
	STATE NVR1Vklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_PUSKATELQ_NVR1_VKLYUCHENY) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NVR1Vyklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_NVR1_VYKLYUCHENY) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (K_NVR1 = VYKL) THEN
			SET STATE NVR1Vyklyuchen;
		END_IF
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (K_NVR1 = VKL) THEN
			SET STATE NVR1Vklyuchen;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVklyucheniyaNVR1
	STATE KontrolqKontsevika 
		IF (K_NVR1 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_NVR1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_NVR1 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_NVR1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVyklyucheniyaNVR1
	STATE KontrolqKontsevika 
		IF (K_NVR1 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_NVR1) THEN
				IF (NOT (PROCESS VYK_AVD1 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD1;
				END_IF
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_NVR1 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_NVR1) THEN
				IF (NOT (PROCESS VYK_AVD1 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD1;
				END_IF
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_NVR2
	STATE Nachalo 
		IF (PROCESS VYKL_NVR2 IN STATE ACTIVE) THEN
			ERROR PROCESS VYKL_NVR2;
		END_IF
		STOP PROCESS KontrolqVklyucheniyaNVR2;
		U_NVR2 := VKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_NVR2 = VKL) THEN
			START PROCESS KontrolqVyklyucheniyaNVR2;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NVR2_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_NVR2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYKL_NVR2
	STATE Nachalo 
		IF (PROCESS VKL_NVR2 IN STATE ACTIVE) THEN
			ERROR PROCESS VKL_NVR2;
		END_IF
		STOP PROCESS KontrolqVyklyucheniyaNVR2;
		U_NVR2 := VYKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_NVR2 = VYKL) THEN
			START PROCESS KontrolqVklyucheniyaNVR2;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NVR2_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_NVR2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyNVR2
	STATE Nachalo 
		IF (K_NVR2 = VKL) THEN
			SET STATE NVR2Vklyuchen;
		ELSE 
			SET STATE NVR2Vyklyuchen;
		END_IF
	END_STATE
	
	STATE NVR2Vklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_PUSKATELQ_NVR2_VKLYUCHENY) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NVR2Vyklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_NVR2_VYKLYUCHENY) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (K_NVR2 = VYKL) THEN
			SET STATE NVR2Vyklyuchen;
		END_IF
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (K_NVR2 = VKL) THEN
			SET STATE NVR2Vklyuchen;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVklyucheniyaNVR2
	STATE KontrolqKontsevika 
		IF (K_NVR2 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_NVR2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_NVR2 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_NVR2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVyklyucheniyaNVR2
	STATE KontrolqKontsevika 
		IF (K_NVR2 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_NVR2) THEN
				IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD2;
				END_IF
				SET NEXT;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_NVR2 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_NVR2) THEN
				IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
					START PROCESS VYK_AVD2;
				END_IF
				SET NEXT;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_DVN1
	STATE Nachalo 
		IF (PROCESS VYKL_DVN1 IN STATE ACTIVE) THEN
			ERROR PROCESS VYKL_DVN1;
		END_IF
		STOP PROCESS KontrolqVklyucheniyaDVN1;
		U_DVN1 := VKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_DVN1 = VKL) THEN
			START PROCESS KontrolqVyklyucheniyaDVN1;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_DVN1_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_DVN1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYKL_DVN1
	STATE Nachalo 
		IF (PROCESS VKL_DVN1 IN STATE ACTIVE) THEN
			ERROR PROCESS VKL_DVN1;
		END_IF
		STOP PROCESS KontrolqVyklyucheniyaDVN1;
		U_DVN1 := VYKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_DVN1 = VYKL) THEN
			START PROCESS KontrolqVklyucheniyaDVN1;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_DVN1_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_DVN1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyDVN1
	STATE Nachalo 
		IF (K_DVN1 = VKL) THEN
			SET STATE DVN1Vklyuchen;
		ELSE 
			SET STATE DVN1Vyklyuchen;
		END_IF
	END_STATE
	
	STATE DVN1Vklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_PUSKATELQ_DVN1_VKLYUCHENY) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE DVN1Vyklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_DVN1_VYKLYUCHENY) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (K_DVN1 = VYKL) THEN
			SET STATE DVN1Vyklyuchen;
		END_IF
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (K_DVN1 = VKL) THEN
			SET STATE DVN1Vklyuchen;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVklyucheniyaDVN1
	STATE KontrolqKontsevika 
		IF (K_DVN1 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_DVN1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_DVN1 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_DVN1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVyklyucheniyaDVN1
	STATE KontrolqKontsevika 
		IF (K_DVN1 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_DVN1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_DVN1 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_DVN1) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_DVN2
	STATE Nachalo 
		IF (PROCESS VYKL_DVN2 IN STATE ACTIVE) THEN
			ERROR PROCESS VYKL_DVN2;
		END_IF
		STOP PROCESS KontrolqVklyucheniyaDVN2;
		U_DVN2 := VKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_DVN2 = VKL) THEN
			START PROCESS KontrolqVyklyucheniyaDVN2;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_DVN2_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VKL_DVN2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYKL_DVN2
	STATE Nachalo 
		IF (PROCESS VKL_DVN2 IN STATE ACTIVE) THEN
			ERROR PROCESS VKL_DVN2;
		END_IF
		STOP PROCESS KontrolqVyklyucheniyaDVN2;
		U_DVN2 := VYKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (K_DVN2 = VYKL) THEN
			START PROCESS KontrolqVklyucheniyaDVN2;
			SET NEXT;
		END_IF
		TIMEOUT T_NA_SRABATYVANIE_USTROJSTV_GVS THEN
			SET STATE Oshibka;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_DVN2_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Oshibka 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_AVTOMATA_ILI_PUSKATELYA_PRI_VYKL_DVN2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabotyDVN2
	STATE Nachalo 
		IF (K_DVN2 = VKL) THEN
			SET STATE DVN2Vklyuchen;
		ELSE 
			SET STATE DVN2Vyklyuchen;
		END_IF
	END_STATE
	
	STATE DVN2Vklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_PUSKATELQ_DVN2_VKLYUCHENY) THEN
			SET STATE OzhidanieVyklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE DVN2Vyklyuchen 
		IF (_FUNCTION_ + PK_PIV_AVTOMAT_I_ILI_PUSKATELQ_DVN2_VYKLYUCHENY) THEN
			SET STATE OzhidanieVklyucheniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (K_DVN2 = VYKL) THEN
			SET STATE DVN2Vyklyuchen;
		END_IF
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (K_DVN2 = VKL) THEN
			SET STATE DVN2Vklyuchen;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVklyucheniyaDVN2
	STATE KontrolqKontsevika 
		IF (K_DVN2 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_DVN2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_DVN2 = VKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VKLYUCHENIE_U_DVN2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVyklyucheniyaDVN2
	STATE KontrolqKontsevika 
		IF (K_DVN2 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_DVN2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqUpravleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUpravleniya 
		IF (U_DVN2 = VYKL) THEN
			IF (_FUNCTION_ + PK_PIV_NEKONTROLIRUEMOE_VYKLYUCHENIE_U_DVN2) THEN
				ERROR;
			END_IF
		ELSE 
			SET STATE KontrolqKontsevika;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqUslovijVklyucheniyaDVN1_Pavd1_R1_T1
	STATE Nachalo 
		IF (FP_Pavd1 <= NP_DavlenieVklyucheniyaDVN_P1) THEN
			STOP;
		END_IF
		TIMEOUT NP_KontrolqnoeVremyaDostizheniyaP1_T1 THEN
			SET STATE PeredachaSoobsheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NARUSHENIE_GERMETICHNOSTI_AVD1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqUslovijVklyucheniyaDVN2_Pavd2_R1_T1
	STATE Nachalo 
		IF (FP_Pavd2 <= NP_DavlenieVklyucheniyaDVN_P1) THEN
			STOP;
		END_IF
		TIMEOUT NP_KontrolqnoeVremyaDostizheniyaP1_T1 THEN
			SET STATE PeredachaSoobsheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_NARUSHENIE_GERMETICHNOSTI_AVD2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7
	STATE Nachalo 
		IF (FP_Pavd1 <= NP_DavlenieVklyucheniyaDVN_P1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TK_VremyaOtkachkiDopustimoe_T7 THEN
			SET STATE PeredachaSoobsheniya;
		END_TIMEOUT
	END_STATE
	
	STATE VakuumirovaniePoVremeni 
		TIMEOUT DESYATQ_SEKUND THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KNTR_VREMYA_ISTEKLO__Pavd1_VYSHE_Pnk) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7
	STATE Nachalo 
		IF (FP_Pavd2 <= NP_DavlenieVklyucheniyaDVN_P1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TK_VremyaOtkachkiDopustimoe_T7 THEN
			SET STATE PeredachaSoobsheniya;
		END_TIMEOUT
	END_STATE
	
	STATE VakuumirovaniePoVremeni 
		TIMEOUT DESYATQ_SEKUND THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_KNTR_VREMYA_ISTEKLO__Pavd2_VYSHE_Pnk) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS VKL_AVD1
	STATE Nachalo 
		START PROCESS Kontrolq_K_RP8_PriVklyucheniiAVD;
		IF (PROCESS VYK_AVD1 IN STATE ACTIVE) THEN
			ERROR PROCESS VYK_AVD1;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE SHelkaemKlapany 
		START PROCESS ZAKR_NAT_AVD1_VE1;
		START PROCESS OTKR_VYHLOP_AVD1_VE11;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (NOT (PROCESS ZAKR_NAT_AVD1_VE1 IN STATE ACTIVE) AND NOT (PROCESS OTKR_VYHLOP_AVD1_VE11 IN STATE ACTIVE)) THEN
			IF ((PROCESS ZAKR_NAT_AVD1_VE1 IN STATE ERROR) OR (PROCESS OTKR_VYHLOP_AVD1_VE11 IN STATE ERROR)) THEN
				SET STATE VyklyucheniePoOshibke;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieNVR1 
		START PROCESS VKL_NVR1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklNVR 
		IF (NOT (PROCESS VKL_NVR1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_NVR1 IN STATE ERROR) THEN
				SET STATE VyklyucheniePoOshibke;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaUslovijVklyucheniyaDVN1 
		IF (PROCESS VKL_AVD1_VK IN STATE ACTIVE) THEN
			SET STATE RazreshenieVklyucheniyaDVN;
		ELSE 
			START PROCESS KontrolqUslovijVklyucheniyaDVN1_Pavd1_R1_T1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE RezulqtatKontrolya 
		IF (NOT (PROCESS KontrolqUslovijVklyucheniyaDVN1_Pavd1_R1_T1 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqUslovijVklyucheniyaDVN1_Pavd1_R1_T1 IN STATE ERROR) THEN
				SET STATE VyklyucheniePoOshibke;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE RazreshenieVklyucheniyaDVN 
		START PROCESS UpravlenieDVN1;
		SET NEXT;
	END_STATE
	
	STATE SoobshenieVklyucheniyaAVD1 
		IF (_FUNCTION_ + PK_PIV_AVD1_VKLYUCHEN) THEN
			Flag_AVD1 := VKL;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE VyklyucheniePoOshibke 
		IF (NOT (PROCESS VYK_AVD1 IN STATE ACTIVE)) THEN
			START PROCESS VYK_AVD1;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE SoobshenieOtkazVklyucheniyaAVD1 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_VKLYUCHENIYA_AVD1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS UpravlenieDVN1
	STATE Nachalo 
		IF ((K_NVR1) AND (U_NVR1) AND (K_VE3)) THEN
		ELSE 
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_SEKUNDY THEN
			START PROCESS VKL_DVN1;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklDVNiOSTANOV 
		IF (NOT (PROCESS VKL_DVN1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_DVN1 IN STATE ERROR) THEN
				START PROCESS VYKL_DVN1;
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklDVN 
		IF (NOT (PROCESS VKL_DVN1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_DVN1 IN STATE ERROR) THEN
				START PROCESS VYKL_DVN1;
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaNaVklyuchenie 
		IF (FP_Pavd1 >= 90.0) THEN
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_SEKUND THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUslovijVyklyucheniyaDVN 
		IF ((NOT K_NVR1) OR (NOT U_NVR1) OR (NOT K_VE3 OR (NOT K_VE7 AND K_ZAKR_VM14))) THEN
			START PROCESS VYKL_DVN1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqVyklDVN 
		IF (NOT (PROCESS VYKL_DVN1 IN STATE ACTIVE)) THEN
			IF (PROCESS VYKL_DVN1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaNaVyklyuchenie 
		TIMEOUT TRIDTSATQ_SEKUND THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS VKL_AVD2
	STATE Nachalo 
		START PROCESS Kontrolq_K_RP8_PriVklyucheniiAVD;
		IF (PROCESS VYK_AVD2 IN STATE ACTIVE) THEN
			ERROR PROCESS VYK_AVD2;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE SHelkaemKlapany 
		START PROCESS ZAKR_NAT_AVD2_VE2;
		START PROCESS OTKR_VYHLOP_AVD2_VE10;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (NOT (PROCESS ZAKR_NAT_AVD2_VE2 IN STATE ACTIVE) AND NOT (PROCESS OTKR_VYHLOP_AVD2_VE10 IN STATE ACTIVE)) THEN
			IF ((PROCESS ZAKR_NAT_AVD2_VE2 IN STATE ERROR) OR (PROCESS OTKR_VYHLOP_AVD2_VE10 IN STATE ERROR)) THEN
				SET STATE VyklyucheniePoOshibke;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieNVR2 
		START PROCESS VKL_NVR2;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklNVR 
		IF (NOT (PROCESS VKL_NVR2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_NVR2 IN STATE ERROR) THEN
				SET STATE VyklyucheniePoOshibke;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaUslovijVklyucheniyaDVN2 
		IF (PROCESS VKL_AVD2_VK IN STATE ACTIVE) THEN
			SET STATE RazreshenieVklyucheniyaDVN;
		ELSE 
			START PROCESS KontrolqUslovijVklyucheniyaDVN2_Pavd2_R1_T1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE RezulqtatKontrolya 
		IF (NOT (PROCESS KontrolqUslovijVklyucheniyaDVN2_Pavd2_R1_T1 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqUslovijVklyucheniyaDVN2_Pavd2_R1_T1 IN STATE ERROR) THEN
				SET STATE VyklyucheniePoOshibke;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE RazreshenieVklyucheniyaDVN 
		START PROCESS UpravlenieDVN2;
		SET NEXT;
	END_STATE
	
	STATE SoobshenieVklyucheniyaAVD2 
		IF (_FUNCTION_ + PK_PIV_AVD2_VKLYUCHEN) THEN
			Flag_AVD2 := VKL;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE VyklyucheniePoOshibke 
		IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
			START PROCESS VYK_AVD2;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE SoobshenieOtkazVklyucheniyaAVD2 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_VKLYUCHENIYA_AVD2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS UpravlenieDVN2
	STATE Nachalo 
		IF ((K_NVR2) AND (U_NVR2) AND (K_VE4)) THEN
		ELSE 
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_SEKUNDY THEN
			START PROCESS VKL_DVN2;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklDVNiOSTANOV 
		IF (NOT (PROCESS VKL_DVN2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_DVN2 IN STATE ERROR) THEN
				START PROCESS VYKL_DVN2;
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklDVN 
		IF (NOT (PROCESS VKL_DVN2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_DVN2 IN STATE ERROR) THEN
				START PROCESS VYKL_DVN2;
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaNaVklyuchenie 
		IF (FP_Pavd2 >= 90.0) THEN
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_SEKUND THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUslovijVyklyucheniyaDVN 
		IF ((NOT K_NVR2) OR (NOT U_NVR2) OR (NOT K_VE4 OR (NOT K_VE7 AND K_ZAKR_VM14))) THEN
			START PROCESS VYKL_DVN2;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqVyklDVN 
		IF (NOT (PROCESS VYKL_DVN2 IN STATE ACTIVE)) THEN
			IF (PROCESS VYKL_DVN2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaNaVyklyuchenie 
		TIMEOUT TRIDTSATQ_SEKUND THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS VYK_AVD1
	STATE Nachalo 
		Flag_AVD1 := VYKL;
		IF (PROCESS VKL_AVD1 IN STATE ACTIVE) THEN
			ERROR PROCESS VKL_AVD1;
		END_IF
		SET STATE SHelkaemKlapany;
	END_STATE
	
	STATE SHelkaemKlapany 
		START PROCESS ZAKR_AVD1_MO_NK_VE3;
		START PROCESS ZAKR_AVD1_MO_VK_VE5;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (NOT (PROCESS ZAKR_AVD1_MO_NK_VE3 IN STATE ACTIVE) AND NOT (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF ((PROCESS ZAKR_AVD1_MO_NK_VE3 IN STATE ERROR) OR (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET STATE VyklyuchenieDVN1;
			END_IF
		END_IF
	END_STATE
	
	STATE VyklyuchenieDVN1 
		STOP PROCESS UpravlenieDVN1;
		START PROCESS VYKL_DVN1;
		SET STATE ProverkaVyklyucheniyaDVN1;
	END_STATE
	
	STATE ProverkaVyklyucheniyaDVN1 
		IF (NOT (PROCESS VYKL_DVN1 IN STATE ACTIVE)) THEN
			IF (PROCESS VYKL_DVN1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE TajmautVyklDVN1;
			END_IF
		END_IF
	END_STATE
	
	STATE TajmautVyklDVN1 
		TIMEOUT T_DVN_NVR THEN
			SET STATE OtkrytieNatekaniya;
		END_TIMEOUT
	END_STATE
	
	STATE OtkrytieNatekaniya 
		START PROCESS OTKR_NAT_AVD1_VE1;
		SET STATE KontrolqOtkrytiyaNatekaniya;
	END_STATE
	
	STATE KontrolqOtkrytiyaNatekaniya 
		IF (NOT (PROCESS OTKR_NAT_AVD1_VE1 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_NAT_AVD1_VE1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE VyklyucheniyaNVR1;
			END_IF
		END_IF
	END_STATE
	
	STATE VyklyucheniyaNVR1 
		START PROCESS VYKL_NVR1;
		SET STATE ProverkaVyklyucheniyaNVR1;
	END_STATE
	
	STATE ProverkaVyklyucheniyaNVR1 
		IF (NOT (PROCESS VYKL_NVR1 IN STATE ACTIVE)) THEN
			IF (PROCESS VYKL_NVR1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE TajmautVyklNVR1;
			END_IF
		END_IF
	END_STATE
	
	STATE TajmautVyklNVR1 
		TIMEOUT T_NA_NATEKANIE_VOZDUHA_V_AVD THEN
			SET STATE ZakrytieVyhlopa;
		END_TIMEOUT
	END_STATE
	
	STATE ZakrytieVyhlopa 
		START PROCESS ZAKR_VYHLOP_AVD1_VE11;
		SET STATE ProverkaZakrytiyaVyhlopa;
	END_STATE
	
	STATE ProverkaZakrytiyaVyhlopa 
		IF (NOT (PROCESS ZAKR_VYHLOP_AVD1_VE11 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_VYHLOP_AVD1_VE11 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE ZakrytieNatekaniya;
			END_IF
		END_IF
	END_STATE
	
	STATE ZakrytieNatekaniya 
		START PROCESS ZAKR_NAT_AVD1_VE1;
		SET STATE ProverkaZakrytiyaNatekaniya;
	END_STATE
	
	STATE ProverkaZakrytiyaNatekaniya 
		IF (NOT (PROCESS ZAKR_NAT_AVD1_VE1 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_NAT_AVD1_VE1 IN STATE ERROR) THEN
				SET STATE SoobshenieOtkazVyklyucheniyaAVD1;
			ELSE 
				SET STATE SoobshenieVyklyucheniyaAVD1;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshenieVyklyucheniyaAVD1 
		IF (_FUNCTION_ + PK_PIV_AVD1_VYKLYUCHEN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieOtkazVyklyucheniyaAVD1 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_VYKLYUCHENIYA_AVD1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_AVD2
	STATE Nachalo 
		Flag_AVD2 := VYKL;
		IF (PROCESS VKL_AVD2 IN STATE ACTIVE) THEN
			ERROR PROCESS VKL_AVD2;
		END_IF
		SET STATE SHelkaemKlapany;
	END_STATE
	
	STATE SHelkaemKlapany 
		START PROCESS ZAKR_AVD2_MO_NK_VE4;
		START PROCESS ZAKR_AVD2_MO_VK_VE6;
		SET STATE KontrolqSrabatyvaniya;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (NOT (PROCESS ZAKR_AVD2_MO_NK_VE4 IN STATE ACTIVE) AND NOT (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF ((PROCESS ZAKR_AVD2_MO_NK_VE4 IN STATE ERROR) OR (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET STATE VyklyuchenieDVN2;
			END_IF
		END_IF
	END_STATE
	
	STATE VyklyuchenieDVN2 
		STOP PROCESS UpravlenieDVN2;
		START PROCESS VYKL_DVN2;
		SET STATE ProverkaVyklyucheniyaDVN2;
	END_STATE
	
	STATE ProverkaVyklyucheniyaDVN2 
		IF (NOT (PROCESS VYKL_DVN2 IN STATE ACTIVE)) THEN
			IF (PROCESS VYKL_DVN2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE TajmautVyklDVN2;
			END_IF
		END_IF
	END_STATE
	
	STATE TajmautVyklDVN2 
		TIMEOUT T_DVN_NVR THEN
			SET STATE OtkrytieNatekaniya;
		END_TIMEOUT
	END_STATE
	
	STATE OtkrytieNatekaniya 
		START PROCESS OTKR_NAT_AVD2_VE2;
		SET STATE KontrolqOtkrytiyaNatekaniya;
	END_STATE
	
	STATE KontrolqOtkrytiyaNatekaniya 
		IF (NOT (PROCESS OTKR_NAT_AVD2_VE2 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_NAT_AVD2_VE2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE VyklyucheniyaNVR2;
			END_IF
		END_IF
	END_STATE
	
	STATE VyklyucheniyaNVR2 
		START PROCESS VYKL_NVR2;
		SET STATE ProverkaVyklyucheniyaNVR2;
	END_STATE
	
	STATE ProverkaVyklyucheniyaNVR2 
		IF (NOT (PROCESS VYKL_NVR2 IN STATE ACTIVE)) THEN
			IF (PROCESS VYKL_NVR2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE TajmautVyklNVR2;
			END_IF
		END_IF
	END_STATE
	
	STATE TajmautVyklNVR2 
		TIMEOUT T_NA_NATEKANIE_VOZDUHA_V_AVD THEN
			SET STATE ZakrytieVyhlopa;
		END_TIMEOUT
	END_STATE
	
	STATE ZakrytieVyhlopa 
		START PROCESS ZAKR_VYHLOP_AVD2_VE10;
		SET STATE ProverkaZakrytiyaVyhlopa;
	END_STATE
	
	STATE ProverkaZakrytiyaVyhlopa 
		IF (NOT (PROCESS ZAKR_VYHLOP_AVD2_VE10 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_VYHLOP_AVD2_VE10 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE ZakrytieNatekaniya;
			END_IF
		END_IF
	END_STATE
	
	STATE ZakrytieNatekaniya 
		START PROCESS ZAKR_NAT_AVD2_VE2;
		SET STATE ProverkaZakrytiyaNatekaniya;
	END_STATE
	
	STATE ProverkaZakrytiyaNatekaniya 
		IF (NOT (PROCESS ZAKR_NAT_AVD2_VE2 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_NAT_AVD2_VE2 IN STATE ERROR) THEN
				SET STATE SoobshenieOtkazVyklyucheniyaAVD2;
			ELSE 
				SET STATE SoobshenieVyklyucheniyaAVD2;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshenieVyklyucheniyaAVD2 
		IF (_FUNCTION_ + PK_PIV_AVD2_VYKLYUCHEN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieOtkazVyklyucheniyaAVD2 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_VYKLYUCHENIYA_AVD2) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_AVD1_NK
	STATE Nachalo 
		IF (FP_Pnk > NP_Patmosf) THEN
			SET STATE BolqsheAtmosfernogo;
		ELSE 
			SET STATE MenqsheRavnoAtmosfernogo;
		END_IF
	END_STATE
	
	STATE BolqsheAtmosfernogo 
		START PROCESS OTKR_AVD1_MO_NK_VE3;
		SET STATE ProverkaOtkrytiyaMagistraliAVD1;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistraliAVD1 
		IF (NOT (PROCESS OTKR_AVD1_MO_NK_VE3 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD1_MO_NK_VE3 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE VklyuchenieAVD1;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieAVD1 
		START PROCESS VKL_AVD1;
		SET STATE ProverkaVklyucheniyaAVD1;
	END_STATE
	
	STATE ProverkaVklyucheniyaAVD1 
		IF (NOT (PROCESS VKL_AVD1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE MenqsheRavnoAtmosfernogo 
		START PROCESS VKL_AVD1;
		SET STATE ProverkaVklyucheniya_AVD1;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD1 
		IF (NOT (PROCESS VKL_AVD1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE ProverkaUslovijPodklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaUslovijPodklyucheniya 
		START PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7;
		SET STATE ProverkaRezulqtatovKontrolya;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE OtkrytieMagistraliOtkachki;
			END_IF
		END_IF
	END_STATE
	
	STATE OtkrytieMagistraliOtkachki 
		START PROCESS OTKR_AVD1_MO_NK_VE3;
		SET STATE ProverkaOtkrytiyaMagistrali_AVD1;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistrali_AVD1 
		IF (NOT (PROCESS OTKR_AVD1_MO_NK_VE3 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD1_MO_NK_VE3 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VKL_AVD2_NK
	STATE Nachalo 
		IF (FP_Pnk > NP_Patmosf) THEN
			SET STATE BolqsheAtmosfernogo;
		ELSE 
			SET STATE MenqsheRavnoAtmosfernogo;
		END_IF
	END_STATE
	
	STATE BolqsheAtmosfernogo 
		START PROCESS OTKR_AVD2_MO_NK_VE4;
		SET STATE ProverkaOtkrytiyaMagistraliAVD2;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistraliAVD2 
		IF (NOT (PROCESS OTKR_AVD2_MO_NK_VE4 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD2_MO_NK_VE4 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE VklyuchenieAVD2;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieAVD2 
		START PROCESS VKL_AVD2;
		SET STATE ProverkaVklyucheniyaAVD2;
	END_STATE
	
	STATE ProverkaVklyucheniyaAVD2 
		IF (NOT (PROCESS VKL_AVD2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE MenqsheRavnoAtmosfernogo 
		START PROCESS VKL_AVD2;
		SET STATE ProverkaVklyucheniya_AVD2;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD2 
		IF (NOT (PROCESS VKL_AVD2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE ProverkaUslovijPodklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaUslovijPodklyucheniya 
		START PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7;
		SET STATE ProverkaRezulqtatovKontrolya;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE OtkrytieMagistraliOtkachki;
			END_IF
		END_IF
	END_STATE
	
	STATE OtkrytieMagistraliOtkachki 
		START PROCESS OTKR_AVD2_MO_NK_VE4;
		SET STATE ProverkaOtkrytiyaMagistrali_AVD2;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistrali_AVD2 
		IF (NOT (PROCESS OTKR_AVD2_MO_NK_VE4 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD2_MO_NK_VE4 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VKL_AVD1_VK
	STATE Nachalo 
		IF (FP_Pvk > NP_Patmosf) THEN
			SET NEXT;
		ELSE 
			SET STATE MenqsheRavnoAtmosfernogo;
		END_IF
	END_STATE
	
	STATE BolqsheAtmosfernogo 
		START PROCESS OTKR_AVD1_MO_VK_VE5;
		SET NEXT;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistraliAVD1 
		IF (NOT (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieAVD1 
		START PROCESS VKL_AVD1;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniyaAVD1 
		IF (NOT (PROCESS VKL_AVD1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE MenqsheRavnoAtmosfernogo 
		START PROCESS VKL_AVD1;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD1 
		IF (NOT (PROCESS VKL_AVD1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaUslovijPodklyucheniya 
		START PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqUslovijPodklAVD1kMO_Pavd1_R2_T7 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE OtkrytieMagistraliOtkachki 
		START PROCESS OTKR_AVD1_MO_VK_VE5;
		SET NEXT;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistrali_AVD1 
		IF (NOT (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VKL_AVD2_VK
	STATE Nachalo 
		IF (FP_Pvk > NP_Patmosf) THEN
			SET STATE BolqsheAtmosfernogo;
		ELSE 
			SET STATE MenqsheRavnoAtmosfernogo;
		END_IF
	END_STATE
	
	STATE BolqsheAtmosfernogo 
		START PROCESS OTKR_AVD2_MO_VK_VE6;
		SET STATE ProverkaOtkrytiyaMagistraliAVD2;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistraliAVD2 
		IF (NOT (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE VklyuchenieAVD2;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieAVD2 
		START PROCESS VKL_AVD2;
		SET STATE ProverkaVklyucheniyaAVD2;
	END_STATE
	
	STATE ProverkaVklyucheniyaAVD2 
		IF (NOT (PROCESS VKL_AVD2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE MenqsheRavnoAtmosfernogo 
		START PROCESS VKL_AVD2;
		SET STATE ProverkaVklyucheniya_AVD2;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD2 
		IF (NOT (PROCESS VKL_AVD2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE ProverkaUslovijPodklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaUslovijPodklyucheniya 
		START PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7;
		SET STATE ProverkaRezulqtatovKontrolya;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqUslovijPodklAVD2kMO_Pavd2_R2_T7 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET STATE OtkrytieMagistraliOtkachki;
			END_IF
		END_IF
	END_STATE
	
	STATE OtkrytieMagistraliOtkachki 
		START PROCESS OTKR_AVD2_MO_VK_VE6;
		SET STATE ProverkaOtkrytiyaMagistrali_AVD2;
	END_STATE
	
	STATE ProverkaOtkrytiyaMagistrali_AVD2 
		IF (NOT (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RAZGERMETIZATSIYA_VK
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_NACHALO_RAZGERMETIZATSII_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqNachalqnyhUslovij 
		IF ((K_OTKR_ZATVOR_V) AND (NOT K_VE5) AND (NOT K_VE6)) THEN
			SET NEXT;
		ELSE 
			SET STATE OshibkaNachalqnyhUslovij;
		END_IF
	END_STATE
	
	STATE ZamerMassy 
		OP_Mkr_NaNachaloRazregermetizatsiiVK := FP_Mmonokristalla;
		SET NEXT;
	END_STATE
	
	STATE PrikazOperatoruZakrytqZV 
		IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_ZATVOR_VAKUUMNYJ) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieNeOtkrytiya 
		IF (NOT K_OTKR_ZATVOR_V) THEN
			START PROCESS OTKR_NADDUV_NK_VE12;
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE PrikazOperatoruZakrytqZV;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieZakrytiya 
		IF (K_ZAKR_ZATVOR_V) THEN
			START PROCESS ZAKR_NADDUV_VK_VE9;
			START PROCESS OTKR_PRODUVKA_VE8;
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE PrikazOperatoruZakrytqZV;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqPvk 
		IF (FP_Pvk >= NP_Patmosf) THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			SET STATE SoobsheniiOKontseRazgermetizatsii;
		END_IF
		TIMEOUT DVADTSATQ_MINUT THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE Preduprezhdenie_NetAtmosferyZaZadannoeVremya 
		IF (_FUNCTION_ + PK_PIV_PREVYSHENO_VREMYA_RAZGERMETIZATSII_VK) THEN
			SET STATE KontrolqPvk;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE SoobsheniiOKontseRazgermetizatsii 
		IF (_FUNCTION_ + PK_PIV_KONETS_RAZGERMETIZATSII_VK) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaNachalqnyhUslovij 
		IF (_FUNCTION_ + PK_PIV_NET_USLOVIJ_SHLYUZOVANIYA_ZV_VE5_VE6) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE SoobsheniiOKontse 
		IF (_FUNCTION_ + PK_PIV_KONETS_RAZGERMETIZATSII_VK) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS VAKUUMIROVANIE_VK
	VAR
		LP_CHisloTSiklov : INT;
	END_VAR
	
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_NACHALO_VAKUUMIROVANIYA_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqNachalqnyhUslovij 
		IF ((K_ZAKR_ZATVOR_V) AND (FP_Pvk >= NP_Patmosf) AND (PROCESS REG_D IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			SET STATE OshibkaNachalqnyhUslovij;
		END_IF
	END_STATE
	
	STATE KorrektsiyaMassy 
		LP_CHisloTSiklov := 0;
		IF (_FUNCTION_ + OP_Mkr_NaNachaloRazregermetizatsiiVK - FP_Mmonokristalla > 0.5) THEN
			TK_MnachalqnojZagruzki := TK_MnachalqnojZagruzki - OP_Mkr_NaNachaloRazregermetizatsiiVK - FP_Mmonokristalla;
		END_IF
		IF (NOT K_VE3 AND K_VE4) THEN
			SET NEXT;
		ELSE 
			IF (K_VE3 AND NOT K_VE4) THEN
				SET STATE AVD2_NaVK;
			ELSE 
				SET STATE NerazreshimayaSituatsiya;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD1_NaVK 
		START PROCESS VKL_AVD1_VK;
		SET NEXT;
	END_STATE
	
	STATE AVD1_ProverkaVklyucheniyaNasosa 
		IF (NOT (PROCESS VKL_AVD1_VK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1_VK IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD1_KontrolqDavleniya100 
		IF (FP_Pvk <= 100.0) THEN
			LP_CHisloTSiklov := LP_CHisloTSiklov + 1;
			IF (LP_CHisloTSiklov < 3) THEN
				START PROCESS OTKR_PRODUVKA_VE8;
				START PROCESS ZAKR_AVD1_MO_VK_VE5;
				SET NEXT;
			ELSE 
				START PROCESS OTKR_PRODUVKA_VE8;
				SET STATE AVD1_Pauza2Min;
			END_IF
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE OtkazSHlyuzovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE AVD1_ProverkaZakrytiyaVE5 
		IF (NOT (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD1_KontrolqDavleniya500 
		IF (FP_Pvk >= 500.0) THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			START PROCESS OTKR_AVD1_MO_VK_VE5;
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE OtkazSHlyuzovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE AVD1_ProverkaOtkrytiyaVE5 
		IF (NOT (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD1_MO_VK_VE5 IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET STATE AVD1_KontrolqDavleniya100;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD1_Pauza2Min 
		TIMEOUT DVE_MINUTY THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE AVD1_OkonchatelqnyjKontrolqDavleniya 
		IF (FP_Pvk <= (FP_Pnk + 5.0)) THEN
			START PROCESS VYK_AVD1;
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE OtkazSHlyuzovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE AVD1_ProverkaVyklyucheniya 
		IF (NOT (PROCESS VYK_AVD1 IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_AVD1 IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET STATE PrikazOperatoruOtkrytqZV;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD2_NaVK 
		START PROCESS VKL_AVD2_VK;
		SET NEXT;
	END_STATE
	
	STATE AVD2_ProverkaVklyucheniyaNasosa 
		IF (NOT (PROCESS VKL_AVD2_VK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2_VK IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD2_KontrolqDavleniya100 
		IF (FP_Pvk <= 100.0) THEN
			LP_CHisloTSiklov := LP_CHisloTSiklov + 1;
			IF (LP_CHisloTSiklov < 3) THEN
				START PROCESS OTKR_PRODUVKA_VE8;
				START PROCESS ZAKR_AVD2_MO_VK_VE6;
				SET NEXT;
			ELSE 
				START PROCESS OTKR_PRODUVKA_VE8;
				SET STATE AVD2_Pauza2Min;
			END_IF
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE OtkazSHlyuzovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE AVD2_ProverkaZakrytiyaVE6 
		IF (NOT (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD2_KontrolqDavleniya500 
		IF (FP_Pvk >= 500.0) THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			START PROCESS OTKR_AVD2_MO_VK_VE6;
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE OtkazSHlyuzovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE AVD2_ProverkaOtkrytiyaVE6 
		IF (NOT (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_AVD2_MO_VK_VE6 IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET STATE AVD2_KontrolqDavleniya100;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD2_Pauza2Min 
		TIMEOUT DVE_MINUTY THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE AVD2_OkonchatelqnyjKontrolqDavleniya 
		IF (FP_Pvk <= (FP_Pnk + 5.0)) THEN
			START PROCESS VYK_AVD2;
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE OtkazSHlyuzovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE AVD2_ProverkaVyklyucheniya 
		IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_AVD2 IN STATE ERROR) THEN
				SET STATE OtkazSHlyuzovaniya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PrikazOperatoruOtkrytqZV 
		IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieNeZakrytiya 
		IF (NOT K_ZAKR_ZATVOR_V) THEN
			START PROCESS OTKR_NADDUV_VK_VE9;
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE PrikazOperatoruOtkrytqZV;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieOtkrytiya 
		IF (K_OTKR_ZATVOR_V) THEN
			START PROCESS ZAKR_NADDUV_NK_VE12;
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE PrikazOperatoruOtkrytqZV;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieOKontseVakuumirovaniya 
		IF (_FUNCTION_ + PK_PIV_KONETS_VAKUUMIROVANIYA_VK) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OtkazSHlyuzovaniya 
		START PROCESS OSTANOV_SHLYUZOVANIYA;
		SET NEXT;
	END_STATE
	
	STATE OzhidanieVyklyucheniyaProtsessomOSTANOV_SHLYUZOVANIYA 
		TIMEOUT DESYATQ_MINUT THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaNachalqnyhUslovij 
		IF (_FUNCTION_ + PK_PIV_NET_USLOVIJ_SHLYUZOVANIYA_ZV_Pvk_REG_D) THEN
			SET STATE ZavershayusheeSoobshenieOKontseVakuumirovaniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE NerazreshimayaSituatsiya 
		IF (_FUNCTION_ + PK_PIV_NESHTATNAYA_SITUATSIYA_SHLYUZOVANIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE ZavershayusheeSoobshenieOKontseVakuumirovaniya 
		IF (_FUNCTION_ + PK_PIV_KONETS_VAKUUMIROVANIYA_VK) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS OSTANOV_SHLYUZOVANIYA
	STATE SoobshenieObOstanove 
		IF (_FUNCTION_ + PK_PIV_OSTANOV_SHLYUZOVANIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE VyborCHegoZHeOstanavlivatq 
		IF (PROCESS RAZGERMETIZATSIYA_VK IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			IF (PROCESS VAKUUMIROVANIE_VK IN STATE ACTIVE) THEN
				SET STATE OstanovVakuumirovaniya;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE OstanovRazgermetizatsii 
		IF (K_ZAKR_ZATVOR_V) THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			START PROCESS ZAKR_NADDUV_VK_VE9;
		ELSE 
			IF (NOT K_OTKR_ZATVOR_V) THEN
				START PROCESS ZAKR_NADDUV_NK_VE12;
			END_IF
		END_IF
		STOP PROCESS RAZGERMETIZATSIYA_VK;
		STOP;
	END_STATE
	
	STATE OstanovVakuumirovaniya 
		IF (K_ZAKR_ZATVOR_V) THEN
			START PROCESS ZAKR_PRODUVKA_VE8;
			START PROCESS ZAKR_NADDUV_VK_VE9;
			START PROCESS ZAKR_AVD1_MO_VK_VE5;
			START PROCESS ZAKR_AVD2_MO_VK_VE6;
		END_IF
		STOP PROCESS VAKUUMIROVANIE_VK;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PEREKLYUCHITQ_AVD
	STATE Nachalo 
		IF (Flag_AVD1 AND NOT Flag_AVD2) THEN
			SET STATE NaAVD2;
		ELSE 
			IF (NOT Flag_AVD1 AND Flag_AVD2) THEN
				SET STATE NaAVD1;
			ELSE 
				SET STATE NerazreshimayaSituatsiya;
			END_IF
		END_IF
	END_STATE
	
	STATE NaAVD1 
		IF (K_VE4 AND NOT K_VE6) THEN
			SET STATE AVD1_NA_NK;
		ELSE 
			IF (NOT K_VE4 AND K_VE6) THEN
				SET STATE AVD1_NA_VK;
			ELSE 
				SET STATE NerazreshimayaSituatsiya;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD1_NA_NK 
		START PROCESS VKL_AVD1_NK;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD1_NK 
		IF (NOT (PROCESS VKL_AVD1_NK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1_NK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS VYK_AVD2;
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD1_NA_VK 
		START PROCESS VKL_AVD1_VK;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD1_VK 
		IF (NOT (PROCESS VKL_AVD1_VK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1_VK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS VYK_AVD2;
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE NaAVD2 
		IF (K_VE3 AND NOT K_VE5) THEN
			SET STATE AVD2_NA_NK;
		ELSE 
			IF (NOT K_VE3 AND K_VE5) THEN
				SET STATE AVD2_NA_VK;
			ELSE 
				SET STATE NerazreshimayaSituatsiya;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD2_NA_NK 
		START PROCESS VKL_AVD2_NK;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD2_NK 
		IF (NOT (PROCESS VKL_AVD2_NK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2_NK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS VYK_AVD1;
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE AVD2_NA_VK 
		START PROCESS VKL_AVD2_VK;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniya_AVD2_VK 
		IF (NOT (PROCESS VKL_AVD2_VK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD2_VK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS VYK_AVD1;
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE NerazreshimayaSituatsiya 
		IF (_FUNCTION_ + PK_PIV_NERAZRESHIMAYA_SITUATSIYA_PEREKLYUCHENIYA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqVremeniRabotyAgregataVakuumnogo
	VAR
		SchetchikMinut : LINT;
	END_VAR
	
	STATE Nachalo 
		SchetchikMinut := 0;
		SET STATE Pauza1min;
	END_STATE
	
	STATE Pauza1min 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE KontrolqMinut;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqMinut 
		SchetchikMinut := SchetchikMinut + 1;
		SET STATE Pauza1min;
		IF (SchetchikMinut >= VREMYA_RABOTY_AGR_VAKUUMNOGO) THEN
			SET STATE PeredachaSoobsheniya;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_PREVYSHENO_VREMYA_RABOTY_AGREGATA_VAKUUMNOGO) THEN
			SchetchikMinut := SchetchikMinut - 1;
			SET STATE Pauza1min;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqObnovleniyaSostoyaniyaIspolnitelqnyhUstrojstv
	STATE Nachalo 
		START PROCESS KontrolqRezhimaRaboty;
		START PROCESS KontrolqEtapaRaboty;
		START PROCESS KontrolqKoordinatyZatravki;
		START PROCESS KontrolqKoordinatyTiglya;
		START PROCESS SrednyayaSkorostqRosta;
		START PROCESS KontrolqRabotyVE1;
		START PROCESS KontrolqRabotyVE2;
		START PROCESS KontrolqRabotyVE3;
		START PROCESS KontrolqRabotyVE4;
		START PROCESS KontrolqRabotyVE5;
		START PROCESS KontrolqRabotyVE6;
		START PROCESS KontrolqRabotyVE7;
		START PROCESS KontrolqRabotyVE8;
		START PROCESS KontrolqRabotyVE9;
		START PROCESS KontrolqRabotyVE10;
		START PROCESS KontrolqRabotyVE11;
		START PROCESS KontrolqRabotyVE12;
		START PROCESS KontrolqRabotyNVR1;
		START PROCESS KontrolqRabotyNVR2;
		START PROCESS KontrolqRabotyDVN1;
		START PROCESS KontrolqRabotyDVN2;
		START PROCESS KontrolqUpravleniyaVM14;
		START PROCESS KontrolqSostoyaniyaVM14;
		START PROCESS KontrolqSostoyaniyaZatvoraVakuumnogo;
		START PROCESS KontrolqPolozheniyaZatravkiPriZakrytiiZatvoraVakuumnogo;
		START PROCESS KontrolqPeremesheniyaZatravkiVnizPriZakrytomZV;
		START PROCESS KontrolqSostoyaniyaDatchikaPrivyazki;
		START PROCESS KontrolqSostoyaniyaDatchikaKasaniya;
		START PROCESS KontrolqSostoyaniyaBlokirovki_VK_NK;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaVK;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaKryshkiNK;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaKollektoraVakuumnogo;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaNK;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaBazovojPlity;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaSHtokaTiglya;
		START PROCESS KontrolqTemperaturyVodyOhlazhdeniyaTokovvodov;
		START PROCESS KontrolqTemperaturyVodyNaVhode;
		START PROCESS KontrolqSostoyaniyaMN;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaVK_RP1;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaKryshkiNK_RP2;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaNK_RP3;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaBazovojPlity_RP4;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaKollektoraVakuumnogo_RP5;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaSHtokaPrivodaTiglya_RP6;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaTokovvodov_RP7;
		START PROCESS KontrolqReleProtokaOhlazhdeniyaAVD_RP8;
		START PROCESS KontrolqSostoyaniya_K_V1;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SrednyayaSkorostqRosta
	VAR
		LP_VremyaGotovnosti : LINT;
	END_VAR
	
	STATE Nachalo 
		_VOID_ := _FUNCTION_;
		LP_VremyaGotovnosti := 0;
		FlagGotovnostiVrosta := VYKL;
		SET NEXT;
	END_STATE
	
	STATE NaborStatistiki 
		LP_VremyaGotovnosti := LP_VremyaGotovnosti + 1;
		FP_Vrosta := _FUNCTION_ + NP_VremyaOsredneniyaVzVrosta + FP_Vz;
		IF (LP_VremyaGotovnosti >= NP_VremyaOsredneniyaVzVrosta) THEN
			FlagGotovnostiVrosta := VKL;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NormalqnayaRabota 
		FP_Vrosta := _FUNCTION_ + NP_VremyaOsredneniyaVzVrosta + FP_Vz;
		SET NEXT;
	END_STATE
	
	STATE Pauza 
		TIMEOUT NP_Pauza_Vrosta THEN
			SET STATE NormalqnayaRabota;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandUpravleniyaRegulyatorami_ot_PIV
	VAR
		LP_Flag : INT;
	END_VAR
	
	STATE Analiz 
		LP_Flag := VKL;
		CASE (KodSobytiya_ot_PIV) OF
			VKL_REG_RG:
				START PROCESS REG_RG;
			VYK_REG_RG:
				START PROCESS VYK_REG_RG;
			VKL_REG_D:
				START PROCESS REG_D;
			VYK_REG_D:
				START PROCESS VYK_REG_D;
			VKL_REG_W_IPN_K1:
				STOP PROCESS REG_TR;
				STOP PROCESS REG_TN;
				STOP PROCESS REG_ROSTA;
				START PROCESS VKL_REG_W_IPN_K1;
			VKL_REG_TN:
				STOP PROCESS REG_TR;
				STOP PROCESS REG_ROSTA;
				START PROCESS VKL_REG_TN;
			VKL_REG_TR:
				STOP PROCESS REG_ROSTA;
				START PROCESS VKL_REG_TR;
			VKL_REG_ROSTA:
				STOP PROCESS REG_TR;
				START PROCESS VKL_REG_ROSTA;
			VYK_REG_TN:
				STOP PROCESS REG_TN;
			VYK_REG_TR:
				STOP PROCESS REG_TR;
			VYK_REG_ROSTA:
				STOP PROCESS REG_ROSTA;
			VYK_IPN_K1:
				START PROCESS VYK_IPN_K1;
			VKL_REG_W_IPN_K2:
				_BREAK_ := _BREAK_;
			VYK_IPN_K2:
				START PROCESS VYK_IPN_K2;
			VYK_IPN:
				START PROCESS VYK_IPN;
			VKL_REG_UR:
				START PROCESS REG_UR;
			VYK_REG_UR:
				START PROCESS VYK_REG_UR;
			VKL_REG_DK:
				START PROCESS REG_DK;
			VYK_REG_DK:
				START PROCESS VYK_REG_DK;
			ZAT_RS:
				START PROCESS ZAT_RS;
			ZAT_RK:
				START PROCESS ZAT_RK;
			ZAT_US:
				START PROCESS ZAT_US;
			ZAT_UK:
				START PROCESS ZAT_UK;
			VKL_REG_ZAT_UK:
				START PROCESS VKL_REG_ZAT_UK;
			VYK_ZATRAVKU:
				START PROCESS VYK_ZATRAVKU;
			TIG_RS:
				START PROCESS TIG_RS;
			TIG_RK:
				START PROCESS TIG_RK;
			TIG_US:
				START PROCESS TIG_US;
			TIG_UK:
				START PROCESS TIG_UK;
			VKL_REG_TIG_UK:
				START PROCESS VKL_REG_TIG_UK;
			VYK_TIGELQ:
				START PROCESS VYK_TIGELQ;
			ZAT_VR:
				START PROCESS ZAT_VR;
			ZAT_UGOL:
				START PROCESS ZAT_UGOL;
			VYK_ZAT_VR:
				START PROCESS VYK_ZAT_VR;
			TIG_VR:
				START PROCESS TIG_VR;
			TIG_UGOL:
				START PROCESS TIG_UGOL;
			VYK_TIG_VR:
				START PROCESS VYK_TIG_VR;
			ELSE
				LP_Flag := VYKL;
				SET STATE NekorrektnoeSobytie;
		END_CASE
		IF (LP_Flag = VKL) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKoordinatnojKomandy_ot_PIV
	VAR
		LP_Flag : INT;
	END_VAR
	
	STATE Analiz 
		LP_Flag := VKL;
		CASE (KodSobytiya_ot_PIV) OF
			ZAT_KNP:
				START PROCESS ZAT_KNP;
			ZAT_DP:
				START PROCESS ZAT_DP;
			ZAT_KVP:
				START PROCESS ZAT_KVP;
			USTANOVITQ_KOORDINATU_ZATRAVKI:
				UstanovochnayaKoordinataZatravki := _FUNCTION_;
				START PROCESS USTANOVITQ_KOORDINATU_ZATRAVKI;
			DVIZHENIE_ZATRAVKI_PO_NOMINALQNYM_KOEFFITSIENTAM:
				START PROCESS DVIZHENIE_ZATRAVKI_PO_NOMINALQNYM_KOEFFITSIENTAM;
			RASSCHITATQ_REALQNYE_KOEFFITSIENTY_ZATRAVKI:
				Realqnaya_Xz_Izmerennaya_Operatorom := NP_Lz_OT_KVP_DO_KNP;
				START PROCESS RASSCHITATQ_REALQNYE_KOEFFITSIENTY_ZATRAVKI;
			PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP:
				START PROCESS PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP;
			PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_STYKA_NK:
				START PROCESS PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_STYKA_NK;
			TIG_KNP:
				START PROCESS TIG_KNP;
			TIG_PVK:
				START PROCESS TIG_PVK;
			TIG_KVP:
				START PROCESS TIG_KVP;
			USTANOVITQ_KOORDINATU_TIGLYA:
				UstanovochnayaKoordinataTiglya := _FUNCTION_;
				START PROCESS USTANOVITQ_KOORDINATU_TIGLYA;
			PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_KNP_TIGLYA_DO_KVP:
				START PROCESS PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_KNP_TIGLYA_DO_KVP;
			PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_DNA_TIGLYA_V_KNP_DO_PNUR:
				START PROCESS PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_DNA_TIGLYA_V_KNP_DO_PNUR;
			ELSE
				LP_Flag := VYKL;
				SET STATE NekorrektnoeSobytie;
		END_CASE
		IF (LP_Flag = VKL) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaSistemnojKomandy_ot_PIV
	VAR
		LP_Flag : INT;
		LP_FlagMonitoringa : INT;
	END_VAR
	
	STATE Analiz 
		LP_Flag := VKL;
		LP_FlagMonitoringa := VYKL;
		CASE (KodSobytiya_ot_PIV) OF
			ZAPROS_INITSIALIZATSII_PIV:
				IF (FlagPovtornojZagruzki = VKL) THEN
					FlagPovtornojZagruzki := VYKL;
				ELSE 
					START PROCESS ZapuskProtsessovKontrolyaStykovok;
					START PROCESS KontrolqObnovleniyaSostoyaniyaIspolnitelqnyhUstrojstv;
					START PROCESS ZapuskProtsessovKontrolyaIzmeneniyaZadanij;
					START PROCESS ZapuskProtsessovKontrolyaIzmeneniyaFaktParametrov;
					START PROCESS KontrolqSostoyaniyaRegulyatorov;
					START PROCESS MonitoringStatusaKanalov;
					START PROCESS VosstanovlenieSvyaziS_PIV;
					IF (PROCESS RezhimRR IN STATE INACTIVE) THEN
						START PROCESS Perehod_vRR;
					END_IF
				END_IF
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_VPO:
				START PROCESS VosstanovlenieSvyaziS_VPO;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_DTR:
				START PROCESS VosstanovlenieSvyaziS_DTR;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_DTN:
				START PROCESS VosstanovlenieSvyaziS_DTN;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_DU:
				START PROCESS VosstanovlenieSvyaziS_DU;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_TDD:
				START PROCESS VosstanovlenieSvyaziS_TDD;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_IP2K_K1:
				START PROCESS VosstanovlenieSvyaziS_IP2K_K1;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_ZU:
				START PROCESS VosstanovlenieSvyaziS_ZU;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_ZR:
				START PROCESS VosstanovlenieSvyaziS_ZR;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_TU:
				START PROCESS VosstanovlenieSvyaziS_TU;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_TR:
				START PROCESS VosstanovlenieSvyaziS_TR;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_ZV:
				START PROCESS VosstanovlenieSvyaziS_ZV;
				_VOID_ := _FUNCTION_;
			INITSIALIZATSIYA_SVYAZI_S_TV:
				START PROCESS VosstanovlenieSvyaziS_TV;
				_VOID_ := _FUNCTION_;
			RESTART_PK:
				_BREAK_ := _BREAK_;
			RESTART_VPO:
				_VOID_ := _FUNCTION_ + PK_VPO_INITSIALIZATSIYA;
			RESTART_DTR:
				_VOID_ := _FUNCTION_ + PK_DTR_INITSIALIZATSIYA;
			RESTART_DTN:
				_VOID_ := _FUNCTION_ + PK_DTN_INITSIALIZATSIYA;
			RESTART_DU:
				_VOID_ := _FUNCTION_ + PK_DU_INITSIALIZATSIYA;
			RESTART_TDD:
				_VOID_ := _FUNCTION_ + PK_TDD_INITSIALIZATSIYA;
			RESTART_IP2K_K1:
				_VOID_ := _FUNCTION_ + PK_IP2K_K1_INITSIALIZATSIYA;
			RESTART_ZU:
				_VOID_ := _FUNCTION_ + PK_ZU_INITSIALIZATSIYA;
			RESTART_ZR:
				_VOID_ := _FUNCTION_ + PK_ZR_INITSIALIZATSIYA;
			RESTART_TU:
				_VOID_ := _FUNCTION_ + PK_TU_INITSIALIZATSIYA;
			RESTART_TR:
				_VOID_ := _FUNCTION_ + PK_TR_INITSIALIZATSIYA;
			RESTART_ZV:
				_VOID_ := _FUNCTION_ + PK_ZV_INITSIALIZATSIYA;
			RESTART_TV:
				_VOID_ := _FUNCTION_ + PK_TV_INITSIALIZATSIYA;
			TESTOVAYA_KOMANDA1:
				START PROCESS TEST1;
			TESTOVAYA_KOMANDA2:
				START PROCESS TEST2;
			OTKLYUCHENIE_SVYAZI_S_VPO:
				STOP PROCESS VosstanovlenieSvyaziS_VPO;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_DTR:
				STOP PROCESS VosstanovlenieSvyaziS_DTR;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_DTN:
				STOP PROCESS VosstanovlenieSvyaziS_DTN;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_DU:
				STOP PROCESS VosstanovlenieSvyaziS_DU;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_TDD:
				STOP PROCESS VosstanovlenieSvyaziS_TDD;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_IP2K_K1:
				STOP PROCESS VosstanovlenieSvyaziS_IP2K_K1;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_ZU:
				STOP PROCESS VosstanovlenieSvyaziS_ZU;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_ZR:
				STOP PROCESS VosstanovlenieSvyaziS_ZR;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_TU:
				STOP PROCESS VosstanovlenieSvyaziS_TU;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_TR:
				STOP PROCESS VosstanovlenieSvyaziS_TR;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_ZV:
				STOP PROCESS VosstanovlenieSvyaziS_ZV;
				_VOID_ := _FUNCTION_;
			OTKLYUCHENIE_SVYAZI_S_TV:
				STOP PROCESS VosstanovlenieSvyaziS_TV;
				_VOID_ := _FUNCTION_;
			VKLYUCHENIE_MONITORINGA_S_PIV:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaPIV;
			VKLYUCHENIE_MONITORINGA_S_VPO:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaVPO;
			VKLYUCHENIE_MONITORINGA_S_DTR:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaDTR;
			VKLYUCHENIE_MONITORINGA_S_DTN:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaDTN;
			VKLYUCHENIE_MONITORINGA_S_DU:
				START PROCESS MonitoringKanalaDU;
				LP_FlagMonitoringa := VKL;
			VKLYUCHENIE_MONITORINGA_S_TDD:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaTDD;
			VKLYUCHENIE_MONITORINGA_S_IP2K_K1:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaIP2K_K1;
			VKLYUCHENIE_MONITORINGA_S_ZU:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaZU;
			VKLYUCHENIE_MONITORINGA_S_ZR:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaZR;
			VKLYUCHENIE_MONITORINGA_S_TU:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaTU;
			VKLYUCHENIE_MONITORINGA_S_TR:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaTR;
			VKLYUCHENIE_MONITORINGA_S_ZV:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaZV;
			VKLYUCHENIE_MONITORINGA_S_TV:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringKanalaTV;
			VYKLYUCHENIE_MONITORINGA_S_PIV:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaPIV;
			VYKLYUCHENIE_MONITORINGA_S_VPO:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaVPO;
			VYKLYUCHENIE_MONITORINGA_S_DTR:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaDTR;
			VYKLYUCHENIE_MONITORINGA_S_DTN:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaDTN;
			VYKLYUCHENIE_MONITORINGA_S_DU:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaDU;
			VYKLYUCHENIE_MONITORINGA_S_TDD:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaTDD;
			VYKLYUCHENIE_MONITORINGA_S_IP2K_K1:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaIP2K_K1;
			VYKLYUCHENIE_MONITORINGA_S_ZU:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaZU;
			VYKLYUCHENIE_MONITORINGA_S_ZR:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaZR;
			VYKLYUCHENIE_MONITORINGA_S_TU:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaTU;
			VYKLYUCHENIE_MONITORINGA_S_TR:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaTR;
			VYKLYUCHENIE_MONITORINGA_S_ZV:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaZV;
			VYKLYUCHENIE_MONITORINGA_S_TV:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringKanalaTV;
			VKLYUCHENIE_MONITORINGA_SISTEMNYH_OSHIBOK:
				LP_FlagMonitoringa := VKL;
				START PROCESS MonitoringSistemnyhOshibok;
			VYKLYUCHENIE_MONITORINGA_SISTEMNYH_OSHIBOK:
				LP_FlagMonitoringa := VKL;
				STOP PROCESS MonitoringSistemnyhOshibok;
			SBROS_SISTEMNOJ_OSHIBKI:
				_VOID_ := _FUNCTION_;
			ELSE
				LP_Flag := VYKL;
				SET STATE NekorrektnoeSobytie;
		END_CASE
		IF (LP_FlagMonitoringa = VKL) THEN
			SET STATE PodtverzhdenieMonitoringa;
		ELSE 
			IF (LP_Flag = VKL) THEN
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE PodtverzhdenieMonitoringa 
		IF (_FUNCTION_ + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ObrabotkaKomandDlyaDatchikov_ot_PIV
	VAR
		LP_NomerTochki : REAL;
	END_VAR
	
	STATE Analiz 
		CASE (KodSobytiya_ot_PIV) OF
			PK_PIV_DU_SNYATQ_KOEFFITSIENTY:
				START PROCESS SnyatieKoeffitsientovKalibrovkiIzDU;
			PK_PIV_DU_SNYATQ_VREMYA_EKSPOZITSII_LAZERA_0:
				START PROCESS SnyatieVremeniEkspozitsiiLazera0;
			PK_PIV_DU_SNYATQ_VREMYA_EKSPOZITSII_LAZERA_1:
				START PROCESS SnyatieVremeniEkspozitsiiLazera1;
			PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_0:
				START PROCESS NachaloAdaptatsiiLazera_0_DU;
			PK_PIV_DU_NACHALO_ADAPTATSII_LAZERA_1:
				START PROCESS NachaloAdaptatsiiLazera_1_DU;
			PK_PIV_DU_PRERVATQ_ADARPTATSIYU:
				START PROCESS PrervatqAdaptatsiyu_DU;
			PK_PIV_DU_VKL_VYCHISLENIE_TEMNOVOGO_SIGNALA:
				START PROCESS VklVychislenieTemnovogoSignala_DU;
			PK_PIV_DU_VYK_VYCHISLENIE_TEMNOVOGO_SIGNALA:
				START PROCESS VykVychislenieTemnovogoSignala_DU;
			PK_PIV_DU_NACHALO_KALIBROVKI:
				START PROCESS NachaloKalibrovki_DU;
			PK_PIV_DU_PRERVATQ_KALIBROVKU:
				START PROCESS PrervatqKalibrovku_DU;
			PK_PIV_DU_KALIBROVKA_PO_TOCHKE:
				FP_TochkiDlya_DU := _FUNCTION_;
				START PROCESS KalibrovkaPoTochkeSNomeromDlya_DU;
			PK_PIV_DU_NACHALO_REZHIMA_OTLADKI:
				START PROCESS NachaloRezhimaOtladkiDU;
			PK_PIV_DU_KONETS_REZHIMA_OTLADKI:
				START PROCESS KonetsRezhimaOtladkiDU;
			PK_PIV_DU_VKLYUCHITQ_LAZER_0:
				START PROCESS VklyuchitqLazer0_DU;
			PK_PIV_DU_VKLYUCHITQ_LAZER_1:
				START PROCESS VklyuchitqLazer1_DU;
			PK_PIV_DU_VYKLYUCHITQ_LAZER_0:
				START PROCESS VyklyuchitqLazer0_DU;
			PK_PIV_DU_VYKLYUCHITQ_LAZER_1:
				START PROCESS VyklyuchitqLazer1_DU;
			PK_PIV_DU_ZAPUSK_TESTA:
				START PROCESS ZapuskTestaDU;
			PK_PIV_DU_KONETS_RABOTY:
				START PROCESS KonetsRabotyDU;
			PK_PIV_TDD_SNYATQ_KOEFFITSIENTY:
				START PROCESS SnyatieKoeffitsientovKalibrovkiIzTDD;
			PK_PIV_TDD_TEST_OZU:
				START PROCESS ZapuskTestaOZU_TDD;
			PK_PIV_TDD_REZHIM_IZMERENIYA_MP:
				START PROCESS REZHIM_IZMERENIYA_TDD_MP;
			PK_PIV_TDD_REZHIM_IZMERENIYA_BP:
				START PROCESS REZHIM_IZMERENIYA_TDD_BP;
			PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_BP:
				START PROCESS PereklyuchitqVideovyhodNaKameruBolqshogoPolya;
			PK_PIV_TDD_REZHIM_ATTESTATSII_BP:
				START PROCESS REZHIM_ATTESTATSII_BP_TDD;
			PK_PIV_TDD_TEST_BP:
				START PROCESS ZapuskTesta_BP_TDD;
			PK_PIV_TDD_NACHALO_KALIBROVKI_BP:
				START PROCESS NachatqKalibrovkuBolqshogoPolya;
			PK_PIV_TDD_NACHALO_KALIBROVKI_BP_PLYUS:
				START PROCESS NachatqKalibrovkuBolqshogoPolya_PLYUS;
			PK_PIV_TDD_VIDEOVYHOD_NA_KAMERU_MP:
				START PROCESS PereklyuchitqVideovyhodNaKameruMalogoPolya;
			PK_PIV_TDD_REZHIM_ATTESTATSII_MP:
				START PROCESS REZHIM_ATTESTATSII_MP_TDD;
			PK_PIV_TDD_TEST_MP:
				START PROCESS ZapuskTesta_MP_TDD;
			PK_PIV_TDD_NACHALO_KALIBROVKI_MP:
				START PROCESS NachatqKalibrovkuMalogoPolya;
			PK_PIV_TDD_NACHALO_KALIBROVKI_MP_PLYUS:
				START PROCESS NachatqKalibrovkuMalogoPolya_PLYUS;
			PK_PIV_TDD_KONETS_RABOTY:
				START PROCESS KonetsRabotyTDD;
			PK_PIV_DTN_ZAPUSK_TESTA:
				START PROCESS ZapuskTestaDTN;
			PK_PIV_DTR_ZAPUSK_TESTA:
				START PROCESS ZapuskTestaDTR;
			PK_PIV_VKL_LAZER_DP:
				START PROCESS VKL_LAZER_DP;
			ELSE
				SET STATE NekorrektnoeSobytie;
		END_CASE
		STOP;
	END_STATE
	
	STATE NekorrektnoeSobytie 
		IF (_FUNCTION_ + PK_PIV_OSHIBKA_KODA_KOMANDY_OT_PIV + KodSobytiya_ot_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_LAZER_DP
	STATE Nachalo 
		U_LAZERA_DP := VKL;
		SET NEXT;
	END_STATE
	
	STATE Tajmaut 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE Konets;
		END_TIMEOUT
	END_STATE
	
	STATE Konets 
		U_LAZERA_DP := VYKL;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusaKanalov
	STATE Nachalo 
		START PROCESS MonitoringStatusa_VPO;
		START PROCESS MonitoringStatusa_DTN;
		START PROCESS MonitoringStatusa_DTR;
		START PROCESS MonitoringStatusa_DU;
		START PROCESS MonitoringStatusa_TDD;
		START PROCESS MonitoringStatusa_IP2K_K1;
		START PROCESS MonitoringStatusa_ZU;
		START PROCESS MonitoringStatusa_ZR;
		START PROCESS MonitoringStatusa_TU;
		START PROCESS MonitoringStatusa_TR;
		START PROCESS MonitoringStatusa_ZV;
		START PROCESS MonitoringStatusa_TV;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_VPO
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_VPO) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_VPO) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_DTN
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_DTN) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagDTN := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_DTN) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_DTR
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_DTR) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagDTR := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_DTR) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_DU
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_DU) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagHur_DU := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_DU) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_TDD
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_TDD) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagDkr_TDD := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_TDD) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_IP2K_K1
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_IP2K_K1) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		Flag_IP2K_K1 := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_IP2K_K1) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_ZU
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_ZU) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagRegulyatora_V_ZU := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_ZU) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_ZR
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_ZR) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagRegulyatora_V_ZR := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_ZR) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_TU
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_TU) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagRegulyatora_V_TU := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_TU) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_TR
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_TR) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagRegulyatora_V_TR := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_TR) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_ZV
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_ZV) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagRegulyatora_V_ZV := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_ZV) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringStatusa_TV
	VAR
		LP_Status : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Status := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE Analiz 
		IF (LP_Status <> _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			IF (LP_Status) THEN
				SET NEXT;
			ELSE 
				SET STATE PeredachaVyklyucheniya;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (NOT _FUNCTION_) THEN
			LP_Status := _FUNCTION_;
			SET STATE Analiz;
		END_IF
		TIMEOUT PYATQ_SEKUND THEN
			SET STATE PeredachaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVklyucheniya 
		IF (_FUNCTION_ + NALICHIE_SVYAZI_S_TV) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaVyklyucheniya 
		FlagRegulyatora_V_TV := VYKL;
		IF (_FUNCTION_ + RAZRYV_SVYAZI_S_TV) THEN
			SET STATE Analiz;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaPIV
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_PIV_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_PIV_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_PIV + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_PIV + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringSistemnyhOshibok
	VAR
		LP_KodOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KodOshibki := NOT _FUNCTION_;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_KodOshibki <> _FUNCTION_) THEN
			LP_KodOshibki := _FUNCTION_;
			IF (LP_KodOshibki) THEN
				SET STATE SoobshObIzmeneniiOshibok;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObOtsutstviiSistemnyhOshibok 
		IF (_FUNCTION_ + SISTEMNAYA_OSHIBKA_OTSUTSTVUET) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmeneniiOshibok 
		IF (_FUNCTION_ + KOD_SISTEMNOJ_OSHIBKI + LP_KodOshibki) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		_VOID_ := _FUNCTION_;
		TIMEOUT DESYATQ_SEKUND THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaVPO
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_VPO_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_VPO_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_VPO + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_VPO + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaDTR
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_DTR_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_DTR_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_DTR + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_DTR + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaDTN
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_DTN_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_DTN_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_DTN + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_DTN + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaDU
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_DU_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_DU_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_DU + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_DU + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaTDD
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TDD_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TDD_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_TDD + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_TDD + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaIP2K_K1
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_IP2K_K1_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_IP2K_K1_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_IP2K_K1 + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_IP2K_K1 + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaZU
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_ZU_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_ZU_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_ZU + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_ZU + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaZR
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_ZR_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_ZR_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_ZR + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_ZR + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaTU
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TU_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TU_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_TU + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_TU + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaTR
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TR_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TR_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_TR + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_TR + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaZV
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_ZV_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_ZV_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_ZV + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_ZV + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS MonitoringKanalaTV
	VAR
		LP_KolvoOshibokKS : INT;
		LP_KolvoOshibokTA : INT;
		LP_KolvoVhodnyhSoobshenij : INT;
		LP_KolvoVyhodnyhSoobshenij : INT;
	END_VAR
	
	STATE Nachalo 
		LP_KolvoOshibokKS := NOT _FUNCTION_;
		LP_KolvoOshibokTA := NOT _FUNCTION_;
		LP_KolvoVhodnyhSoobshenij := NOT _FUNCTION_;
		LP_KolvoVyhodnyhSoobshenij := NOT _FUNCTION_;
		SET STATE AnalizOshibokKS;
	END_STATE
	
	STATE AnalizOshibokKS 
		IF (LP_KolvoOshibokKS <> _FUNCTION_) THEN
			LP_KolvoOshibokKS := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokKS;
		ELSE 
			SET STATE AnalizOshibokTA;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokKS 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TV_PO_KS + LP_KolvoOshibokKS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaKS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokTA;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizOshibokTA 
		IF (LP_KolvoOshibokTA <> _FUNCTION_) THEN
			LP_KolvoOshibokTA := _FUNCTION_;
			SET STATE SoobshObIzmeneniiOshibokTA;
		ELSE 
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiOshibokTA 
		IF (_FUNCTION_ + KOLICHESTVO_SBOEV_TV_PO_TA + LP_KolvoOshibokTA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaTA 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizKolvaVhodnyhSoobshenij;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVhodnyhSoobshenij 
		IF (LP_KolvoVhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizKolvaVyhodnyhSoobshenij;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_VO_VHODNOM_BUFERE_TV + LP_KolvoVhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		SET STATE AnalizKolvaVyhodnyhSoobshenij;
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKolvaVyhodnyhSoobshenij 
		IF (LP_KolvoVyhodnyhSoobshenij <> _FUNCTION_) THEN
			LP_KolvoVyhodnyhSoobshenij := _FUNCTION_;
			SET STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij;
		ELSE 
			SET STATE AnalizOshibokKS;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiKolvaVyhodnyhSoobshenij 
		IF (_FUNCTION_ + N_SOOB_V_VYHODNOM_BUFERE_TV + LP_KolvoVyhodnyhSoobshenij) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauzaVyhS 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE AnalizOshibokKS;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS ZapuskProtsessovVosstanovleniyaSvyazi
	STATE Nachalo 
		START PROCESS VosstanovlenieSvyaziS_PIV;
		START PROCESS VosstanovlenieSvyaziS_VPO;
		START PROCESS VosstanovlenieSvyaziS_TDD;
		START PROCESS VosstanovlenieSvyaziS_DU;
		START PROCESS VosstanovlenieSvyaziS_DTN;
		START PROCESS VosstanovlenieSvyaziS_DTR;
		START PROCESS VosstanovlenieSvyaziS_IP2K_K1;
		START PROCESS VosstanovlenieSvyaziS_ZR;
		START PROCESS VosstanovlenieSvyaziS_ZU;
		START PROCESS VosstanovlenieSvyaziS_ZV;
		START PROCESS VosstanovlenieSvyaziS_TR;
		START PROCESS VosstanovlenieSvyaziS_TU;
		START PROCESS VosstanovlenieSvyaziS_TV;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_PIV
	VAR
		LP_VremyaOtsutstviyaSvyazi : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_VremyaOtsutstviyaSvyazi := 0;
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Vosstanovlenie 
		LP_VremyaOtsutstviyaSvyazi := LP_VremyaOtsutstviyaSvyazi + 1;
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + VOSSTANOVLENIE_SVYAZI_S_PIV;
		IF (LP_VremyaOtsutstviyaSvyazi >= DVE_MINUTY) THEN
			SET STATE ZapuskOtmeny;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqVosstanovleniya 
		LP_VremyaOtsutstviyaSvyazi := LP_VremyaOtsutstviyaSvyazi + 1;
		IF (_FUNCTION_ = VYKL) THEN
			SET STATE Vosstanovlenie;
		END_IF
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskOtmeny 
		IF (NOT (PROCESS RezhimOTMENA IN STATE ACTIVE)) THEN
			START PROCESS RezhimOTMENA;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE BeskonechnyePopytkiVosstanovleniya 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + VOSSTANOVLENIE_SVYAZI_S_PIV;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVosstanovleniyaPosleOtmeny 
		IF (_FUNCTION_ = VYKL) THEN
			SET STATE BeskonechnyePopytkiVosstanovleniya;
		END_IF
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_VPO
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_VPO THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_VPO_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_TDD
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_TDD THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_TDD_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_DU
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_DU THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_DU_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_DTN
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_DTN THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_DTN_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_DTR
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_DTR THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_DTR_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_IP THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_IP2K_K1_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_ZR
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_ZR_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_ZU
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_ZU_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_ZV
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_ZV_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_TR
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_TR_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_TU
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_TU_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VosstanovlenieSvyaziS_TV
	STATE Nachalo 
		IF (_FUNCTION_ = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TajmAutVosstanovleniya 
		TIMEOUT TAJMAUT_NA_VOSSTANOVLENIE_SVYAZI_S_PRIVODOM THEN
			SET STATE Vosstanovlenie;
		END_TIMEOUT
	END_STATE
	
	STATE Vosstanovlenie 
		_VOID_ := _FUNCTION_;
		_VOID_ := _FUNCTION_ + PK_TV_INITSIALIZATSIYA;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VYK_VPO
	STATE Nachalo 
		FlagVPO := VYKL;
		IF (_FUNCTION_ + VYK_VPO) THEN
			SET STATE PeredachaKomandyV_VPO;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKomandyV_VPO 
		IF (_FUNCTION_ + PK_VPO_VYK_VPO) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VKL_VPO
	STATE Nachalo 
		FlagVPO := VKL;
		IF (_FUNCTION_ + VKL_VPO) THEN
			SET STATE PeredachaKomandyV_VPO;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKomandyV_VPO 
		IF (_FUNCTION_ + PK_VPO_VKL_VPO) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS REG_RG
	STATE Nachalo 
		START PROCESS KONTROLQ_REG_RG;
		SET STATE FormirovanieZadaniya;
	END_STATE
	
	STATE FormirovanieZadaniya 
		SET STATE FormirovanieZadaniya;
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_RG
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Qgaza_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Qgaza_T1 := ZD_Qgaza;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF (LP_ZD_Qgaza_T1 <> ZD_Qgaza) THEN
			LP_SchetchikVremeni := 0;
		END_IF
		LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
		IF (LP_SchetchikVremeni > NP_VremyaPerehodnogoProtsessaQgaza) THEN
			LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
			IF (ZD_Qgaza < 1.0) THEN
				SET STATE PeredachaSoobsheniya;
			ELSE 
				IF ((_FUNCTION_ + FP_Qgaza - ZD_Qgaza / ZD_Qgaza) > NP_PogreshnostqQgaza) THEN
					SET STATE PeredachaSoobsheniya;
				END_IF
			END_IF
		END_IF
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_RG_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VYK_REG_RG
	STATE Nachalo 
		STOP PROCESS REG_RG;
		START PROCESS ZAKR_NADDUV_VK_VE9;
		START PROCESS ZAKR_NADDUV_NK_VE12;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS REG_D
	VAR
		LP_VremyaPerehoda : LINT;
		LP_VremyaProtivod : LINT;
		LP_FlagPerehoda : BOOL;
	END_VAR
	
	STATE Nachalo 
		START PROCESS KONTROLQ_REG_D;
		SET NEXT;
	END_STATE
	
	STATE AnalizRassoglasovaniya 
		LP_VremyaPerehoda := 0;
		IF ((FP_Pnk - ZD_Pnk) > OP_PogreshnostqPnk) THEN
			START PROCESS OTKR_VM14;
			LP_FlagPerehoda := OTKR;
			SET NEXT;
		ELSE 
			IF ((FP_Pnk - ZD_Pnk) <= -OP_PogreshnostqPnk) THEN
				START PROCESS ZAKR_VM14;
				LP_FlagPerehoda := ZAKR;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE OgranichenieMinimalqnogoVremeniRaboty 
		TIMEOUT 2 THEN
			IF (LP_FlagPerehoda = OTKR) THEN
				SET STATE VysokoeDavlenie;
			ELSE 
				SET STATE NizkoeDavlenie;
			END_IF
		END_TIMEOUT
	END_STATE
	
	STATE VysokoeDavlenie 
		IF ((FP_Pnk - ZD_Pnk) <= OP_PogreshnostqPnk) THEN
			START PROCESS VYK_VM14;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqPorogovogoDavleniya_1 
		LP_VremyaPerehoda := LP_VremyaPerehoda + 1;
		IF ((FP_Pnk - ZD_Pnk) <= NP_Ppor) THEN
			LP_VremyaProtivod := NP_KOEF_NA_OTKR / LP_VremyaPerehoda;
			IF (LP_VremyaProtivod > T2 / 2) THEN
				LP_VremyaProtivod := T2 / 2;
			END_IF
			IF (LP_VremyaProtivod = 0) THEN
				SET STATE AnalizRassoglasovaniya;
			ELSE 
				START PROCESS ZAKR_VM14;
				SET STATE Pauza;
			END_IF
		END_IF
		IF (_FUNCTION_ + FP_Pnk - ZD_Pnk > OP_PogreshnostqPnk) THEN
			SET STATE AnalizRassoglasovaniya;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE AnalizRassoglasovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		IF (_FUNCTION_ + FP_Pnk - ZD_Pnk > OP_PogreshnostqPnk) THEN
			SET STATE AnalizRassoglasovaniya;
		END_IF
		TIMEOUT LP_VremyaProtivod THEN
			SET STATE VyklyuchitqVM14;
		END_TIMEOUT
	END_STATE
	
	STATE VyklyuchitqVM14 
		START PROCESS VYK_VM14;
		SET STATE AnalizRassoglasovaniya;
	END_STATE
	
	STATE NizkoeDavlenie 
		IF ((FP_Pnk - ZD_Pnk) >= -OP_PogreshnostqPnk) THEN
			START PROCESS VYK_VM14;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqPorogovogoDavleniya_2 
		LP_VremyaPerehoda := LP_VremyaPerehoda + 1;
		IF ((FP_Pnk - ZD_Pnk) >= -NP_Ppor) THEN
			LP_VremyaProtivod := NP_KOEF_NA_ZAKR / LP_VremyaPerehoda;
			IF (LP_VremyaProtivod > T2 / 2) THEN
				LP_VremyaProtivod := T2 / 2;
			END_IF
			IF (LP_VremyaProtivod = 0) THEN
				SET STATE AnalizRassoglasovaniya;
			ELSE 
				START PROCESS OTKR_VM14;
				SET STATE Pauza;
			END_IF
		END_IF
		IF (_FUNCTION_ + FP_Pnk - ZD_Pnk > OP_PogreshnostqPnk) THEN
			SET STATE AnalizRassoglasovaniya;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE AnalizRassoglasovaniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_D
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Pnk_T1 : REAL;
		LP_ZD_Qgaza_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Pnk_T1 := ZD_Pnk;
		LP_ZD_Qgaza_T1 := ZD_Qgaza;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF ((LP_ZD_Qgaza_T1 <> ZD_Qgaza) OR (LP_ZD_Pnk_T1 <> ZD_Pnk)) THEN
			LP_SchetchikVremeni := 0;
			LP_ZD_Pnk_T1 := ZD_Pnk;
			LP_ZD_Qgaza_T1 := ZD_Qgaza;
		END_IF
		LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
		IF (LP_SchetchikVremeni >= NP_VremyaPerehodnogoProtsessaPnk) THEN
			LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
			IF (ZD_Pnk < MINIMALQNOE_ZADANIE_REG_D) THEN
				IF (NOT (PROCESS REG_D IN STATE ACTIVE)) THEN
					STOP;
				ELSE 
					SET STATE PeredachaSoobsheniya;
				END_IF
			ELSE 
				IF ((_FUNCTION_ + FP_Pnk - ZD_Pnk / ZD_Pnk) > OP_PogreshnostqPnk) THEN
					IF (NOT (PROCESS REG_D IN STATE ACTIVE)) THEN
						STOP;
					ELSE 
						SET STATE PeredachaSoobsheniya;
					END_IF
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_D_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VYK_REG_D
	STATE Nachalo 
		START PROCESS VYK_VM14;
		STOP PROCESS REG_D;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_W_IPN_K1
	STATE Nachalo 
		STOP PROCESS VYK_IPN;
		STOP PROCESS VYK_IPN_K1;
		STOP PROCESS VYK_PTD;
		STOP PROCESS VYK_IP2K_K1;
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			STOP;
		ELSE 
			IF (NOT K_MNmin) THEN
				SET NEXT;
			ELSE 
				SET STATE VklyuchenieIstochnika;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshenieNetVody 
		IF (_FUNCTION_ + PK_PIV_PODATQ_VODU_V_SISTEMU_OHLAZHDENIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PauzaMinuta 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieIstochnika 
		CASE (NP_TipIPN) OF
			IPN_PTD:
				START PROCESS VKL_PTD;
				SET NEXT;
			IPN_IP2K:
				START PROCESS VKL_IP2K_K1;
				SET STATE KontrolqVklyucheniyaIP2K;
			ELSE
				SET STATE OshibkaInitsializatsiiIPN;
		END_CASE
	END_STATE
	
	STATE KontrolqVklyucheniyaPTD 
		IF (NOT (PROCESS VKL_PTD IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_PTD IN STATE STOP) THEN
				START PROCESS REG_W_IPN_K1;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniyaIP2K 
		IF (NOT (PROCESS VKL_IP2K_K1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_IP2K_K1 IN STATE STOP) THEN
				START PROCESS REG_W_IPN_K1;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE OshibkaInitsializatsiiIPN 
		IF (_FUNCTION_ + TIP_IPN_NE_PROINITSIALIZIROVAN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_W_IPN_K1_TESTOVOE
	STATE VklyuchenieIstochnika 
		CASE (NP_TipIPN) OF
			IPN_PTD:
				START PROCESS VKL_PTD;
				SET NEXT;
			IPN_IP2K:
				START PROCESS VKL_IP2K_K1;
				SET STATE KontrolqVklyucheniyaIP2K;
			ELSE
				SET STATE OshibkaInitsializatsiiIPN;
		END_CASE
	END_STATE
	
	STATE KontrolqVklyucheniyaPTD 
		IF (NOT (PROCESS VKL_PTD IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_PTD IN STATE STOP) THEN
				START PROCESS REG_W_IPN_K1_TESTOVOE;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniyaIP2K 
		IF (NOT (PROCESS VKL_IP2K_K1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_IP2K_K1 IN STATE STOP) THEN
				START PROCESS REG_W_IPN_K1_TESTOVOE;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE OshibkaInitsializatsiiIPN 
		IF (_FUNCTION_ + TIP_IPN_NE_PROINITSIALIZIROVAN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_W_IPN_K2
	STATE Nachalo 
		STOP PROCESS VYK_IPN;
		STOP PROCESS VYK_IPN_K2;
		STOP PROCESS VYK_IP2K_K2;
		IF (PROCESS REG_W_IPN_K2 IN STATE ACTIVE) THEN
			STOP;
		ELSE 
			IF (NOT K_MNmin) THEN
				SET NEXT;
			ELSE 
				SET STATE VklyuchenieIstochnika;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshenieNetVody 
		IF (_FUNCTION_ + PK_PIV_PODATQ_VODU_V_SISTEMU_OHLAZHDENIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PauzaMinuta 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieIstochnika 
		START PROCESS VKL_IP2K_K2;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaIP2K 
		IF (NOT (PROCESS VKL_IP2K_K2 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_IP2K_K2 IN STATE STOP) THEN
				START PROCESS REG_W_IPN_K2;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VKL_PTD
	STATE Nachalo 
		STOP PROCESS VYK_PTD;
		U_VKL_RV_PTD := VKL;
		U_VKL_PTD := VKL;
		U_VYK_PTD := VYKL;
		SET NEXT;
	END_STATE
	
	STATE Pauza1sek 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE ProverkaVklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaVklyucheniya 
		U_VKL_PTD := VYKL;
		IF (K_VKL_PTD) THEN
			SET NEXT;
		ELSE 
			SET STATE OshibkaPTD;
		END_IF
	END_STATE
	
	STATE Soobshenie 
		IF (_FUNCTION_ + PTD_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaPTD 
		U_VYK_PTD := VKL;
		SET NEXT;
	END_STATE
	
	STATE Pauza1sek_2 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE SoobshenieObOshibkaPTD;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieObOshibkaPTD 
		U_VYK_PTD := VYKL;
		U_VKL_RV_PTD := VYKL;
		IF (_FUNCTION_ + OTKAZ_PTD) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_PTD
	STATE Nachalo 
		STOP PROCESS VKL_PTD;
		U_VKL_PTD := VYKL;
		U_VYK_PTD := VKL;
		SET STATE Pauza1sek;
	END_STATE
	
	STATE Pauza1sek 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE ProverkaVyklyucheniya;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		U_VYK_PTD := VYKL;
		U_VKL_RV_PTD := VYKL;
		IF (NOT K_VKL_PTD) THEN
			SET STATE Soobshenie;
		ELSE 
			SET STATE OshibkaPTD;
		END_IF
	END_STATE
	
	STATE Soobshenie 
		IF (_FUNCTION_ + PTD_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OshibkaPTD 
		IF (_FUNCTION_ + OTKAZ_PTD) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS TEST_TU
	STATE Nachalo 
		CASE (NP_TipIPN) OF
			IPN_PTD:
				START PROCESS TEST_TU_PTD;
				SET NEXT;
			IPN_IP2K:
				START PROCESS TEST_TU_IP2K;
				SET STATE KontrolqKontsaTestaIP2K;
			ELSE
				SET STATE OshibkaInitsializatsiiIPN;
		END_CASE
	END_STATE
	
	STATE KontrolqKontsaTestaPTD 
		IF (PROCESS TEST_TU_PTD IN STATE STOP) THEN
			STOP;
		ELSE 
			IF (PROCESS TEST_TU_PTD IN STATE ERROR) THEN
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqKontsaTestaIP2K 
		IF (PROCESS TEST_TU_IP2K IN STATE STOP) THEN
			STOP;
		ELSE 
			IF (PROCESS TEST_TU_IP2K IN STATE ERROR) THEN
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE OshibkaInitsializatsiiIPN 
		IF (_FUNCTION_ + TIP_IPN_NE_PROINITSIALIZIROVAN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS TEST_TU_PTD
	VAR
		LP_FlagOshibki : BOOL;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		U_VKL_ASS := VKL;
		TIMEOUT DVE_SEKUNDY THEN
			SET STATE VklyuchenieIPN_i_VrasheniyaTiglya;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieIPN_i_VrasheniyaTiglya 
		U_VKL_ASS := VYKL;
		ZD_Wt := -2.0;
		START PROCESS TIG_VR;
		ZD_Wipn_K1 := 0.0;
		START PROCESS VKL_REG_W_IPN_K1_TESTOVOE;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniyaIPN 
		IF (NOT (PROCESS VKL_REG_W_IPN_K1_TESTOVOE IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_W_IPN_K1_TESTOVOE IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				START PROCESS VYK_TIG_VR;
				START PROCESS VYK_IPN_K1;
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaRiz 
		IF (K_IZOL_PTD) THEN
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE ProverkaZashity;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieObOshibkeSoprotivleniya 
		LP_FlagOshibki := VKL;
		IF (_FUNCTION_ + SOPROTIVLENIE_IZOLYATSII_PTD_NIZHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaZashity 
		START PROCESS VYK_TIG_VR;
		START PROCESS VYK_IPN_K1;
		IF (K_ZASHITA_PTD) THEN
			SET NEXT;
		ELSE 
			SET STATE KontrolqRezulqtataTestirovaniya;
		END_IF
	END_STATE
	
	STATE SoobshenieObOshibkeZashity 
		LP_FlagOshibki := VKL;
		IF (_FUNCTION_ + SRABOTALA_ZASHITA_PTD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqRezulqtataTestirovaniya 
		IF (LP_FlagOshibki) THEN
			IF (_FUNCTION_ + OSHIBKA_TU) THEN
				ERROR;
			END_IF
		ELSE 
			IF (_FUNCTION_ + TU_V_NORME) THEN
				STOP;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS TEST_TU_IP2K
	VAR
		LP_FlagOshibki : BOOL;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		ZD_Wt := -2.0;
		START PROCESS TIG_VR;
		ZD_Wipn_K1 := 0.0;
		START PROCESS VKL_REG_W_IPN_K1_TESTOVOE;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVklyucheniyaIPN 
		IF (NOT (PROCESS VKL_REG_W_IPN_K1_TESTOVOE IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_W_IPN_K1_TESTOVOE IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				START PROCESS VYK_TIG_VR;
				START PROCESS VYK_IPN_K1;
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaRabotyVtechenieMinuty 
		IF (NOT Flag_IP2K_K1) THEN
			LP_FlagOshibki := VKL;
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE VyklyuchenieRegulyatorov;
		END_TIMEOUT
	END_STATE
	
	STATE VyklyuchenieRegulyatorov 
		START PROCESS VYK_TIG_VR;
		START PROCESS VYK_IPN_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqRezulqtataTestirovaniya 
		IF (LP_FlagOshibki) THEN
			IF (_FUNCTION_ + OSHIBKA_TU) THEN
				ERROR;
			END_IF
		ELSE 
			IF (_FUNCTION_ + TU_V_NORME) THEN
				STOP;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VYK_IPN
	STATE Nachalo 
		START PROCESS VYK_IPN_K1;
		START PROCESS VYK_IPN_K2;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOkonchaniya 
		IF (NOT (PROCESS VYK_IPN_K1 IN STATE ACTIVE) AND NOT (PROCESS VYK_IPN_K2 IN STATE ACTIVE)) THEN
			IF ((PROCESS VYK_IPN_K1 IN STATE STOP) AND (PROCESS VYK_IPN_K2 IN STATE STOP)) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VYK_IPN_K1
	STATE Nachalo 
		STOP PROCESS REG_ROSTA;
		STOP PROCESS REG_TR;
		STOP PROCESS REG_TN;
		ERROR PROCESS VKL_REG_W_IPN_K1;
		ERROR PROCESS VKL_REG_W_IPN_K1_TESTOVOE;
		STOP PROCESS REG_W_IPN_K1;
		STOP PROCESS REG_W_IPN_K1_TESTOVOE;
		CASE (NP_TipIPN) OF
			IPN_PTD:
				START PROCESS VYK_PTD;
				SET NEXT;
			IPN_IP2K:
				START PROCESS VYK_IP2K_K1;
				SET STATE KontrolqVyklyucheniyaIP2K;
			ELSE
				SET STATE OshibkaInitsializatsiiIPN;
		END_CASE
	END_STATE
	
	STATE KontrolqVyklyucheniyaPTD 
		IF (NOT (PROCESS VYK_PTD IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_PTD IN STATE STOP) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVyklyucheniyaIP2K 
		IF (NOT (PROCESS VYK_IP2K_K1 IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_IP2K_K1 IN STATE STOP) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE OshibkaInitsializatsiiIPN 
		IF (_FUNCTION_ + TIP_IPN_NE_PROINITSIALIZIROVAN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VYK_IPN_K2
	STATE Nachalo 
		STOP PROCESS REG_W_IPN_K2;
		IF (NP_TipIPN = IPN_PTD) THEN
			STOP;
		ELSE 
			START PROCESS VYK_IP2K_K2;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqVyklyucheniyaIP2K 
		IF (NOT (PROCESS VYK_IP2K_K2 IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_IP2K_K2 IN STATE STOP) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VKL_IP2K_K1
	STATE Nachalo 
		IF (FP_PotokOhlazhdVody_IP2K_K1 < NP_UstavkaPotokaOhlZHidkosti_IP2K_K1) THEN
			SET NEXT;
		ELSE 
			SET STATE VklyuchenieIstochnika;
		END_IF
	END_STATE
	
	STATE SoobshenieNetVody 
		IF (_FUNCTION_ + PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_NIZHE_NORMY_PODATQ_VODU) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PauzaMinuta 
		IF (FP_PotokOhlazhdVody_IP2K_K1 >= NP_UstavkaPotokaOhlZHidkosti_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieIstochnika 
		IF (_FUNCTION_ + PK_IP2K_K1_VKLYUCHITQ + ZD_Wipn_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (Flag_IP2K_K1 = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_IP THEN
			SET STATE NarushenieRaboty;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRaboty 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_VYKLYUCHITQ) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniya 
		IF (Flag_IP2K_K1 = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_IP THEN
			SET STATE NarushenieRaboty;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRaboty 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_IP2K_K2
	STATE Nachalo 
		IF (_FUNCTION_ + IP2K_OTSUTSTVUET) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_IP2K_K2
	STATE Nachalo 
		STOP;
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS REG_W_IPN_K1
	STATE Nachalo 
		START PROCESS KONTROLQ_REG_W_IPN_K1;
		IF (NP_TipIPN = IPN_PTD) THEN
			SET NEXT;
		ELSE 
			SET STATE RegulirovaniePriIP2K;
		END_IF
	END_STATE
	
	STATE RegulirovaniePriPTD 
		ZD_Iptd := ZD_Iptd + NP_Kp_Wptd * (FP_Wipn_K1 - ZD_Wipn_K1);
		ZD_Iptd := _FUNCTION_ + ZD_Iptd + 0.0 + NP_Iptd_MAH;
		SET NEXT;
	END_STATE
	
	STATE PAUZA_Wptd 
		TIMEOUT NP_Pauza_Wptd THEN
			SET STATE RegulirovaniePriPTD;
		END_TIMEOUT
	END_STATE
	
	STATE RegulirovaniePriIP2K 
		IF (Flag_IP2K_K1 <> VKL) THEN
			SET NEXT;
		END_IF
		SET STATE RegulirovaniePriIP2K;
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_IP2K_K1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS REG_W_IPN_K1_TESTOVOE
	STATE Nachalo 
		IF (NP_TipIPN = IPN_PTD) THEN
			SET NEXT;
		ELSE 
			SET STATE RegulirovaniePriIP2K;
		END_IF
	END_STATE
	
	STATE RegulirovaniePriPTD 
		ZD_Iptd := 0.0;
		SET STATE RegulirovaniePriPTD;
	END_STATE
	
	STATE RegulirovaniePriIP2K 
		IF (Flag_IP2K_K1 <> VKL) THEN
			SET NEXT;
		END_IF
		SET STATE RegulirovaniePriIP2K;
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_IP2K_K1) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_W_IPN_K1
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Wipn_K1_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Wipn_K1_T1 := ZD_Wipn_K1;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF (LP_ZD_Wipn_K1_T1 <> ZD_Wipn_K1) THEN
			LP_SchetchikVremeni := 0;
			LP_ZD_Wipn_K1_T1 := ZD_Wipn_K1;
		END_IF
		LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
		IF (LP_SchetchikVremeni >= NP_VremyaPerehodnogoProtsessaWptd) THEN
			LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
			IF (ZD_Wipn_K1 > (MINIMALQNOE_ZADANIE_REG_W_IPN_K1 + 500.0)) THEN
				IF ((_FUNCTION_ + FP_Wipn_K1 - ZD_Wipn_K1 / ZD_Wipn_K1) > NP_PogreshnostqWipn_K1) THEN
					SET STATE PeredachaSoobsheniya;
				END_IF
			END_IF
		END_IF
		IF (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_W_IPN_K1_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS REG_W_IPN_K2
	STATE Nachalo 
		IF (_FUNCTION_ + IP2K_OTSUTSTVUET) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_TN
	STATE Nachalo 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			IF (NOT (PROCESS REG_TN IN STATE ACTIVE)) THEN
				START PROCESS REG_TN;
			END_IF
			STOP;
		ELSE 
			START PROCESS VKL_REG_W_IPN_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqZapuskaRegulyatora 
		IF (NOT (PROCESS VKL_REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_W_IPN_K1 IN STATE STOP) THEN
				START PROCESS REG_TN;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS REG_TN
	VAR
		LP_FP_Oshibka_0_Tn : REAL;
		LP_FP_Oshibka_1_Tn : REAL;
		LP_FP_Oshibka_2_Tn : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_Oshibka_0_Tn := 0.0;
		LP_FP_Oshibka_1_Tn := 0.0;
		LP_FP_Oshibka_2_Tn := 0.0;
		START PROCESS KONTROLQ_REG_TN;
		SET NEXT;
	END_STATE
	
	STATE RazogrevNagrevatelya 
		IF (FP_Tn < MAK_DOP_TEMP_NAGREVATELYA) THEN
			ZD_Wipn_K1 := ZD_Wipn_K1 + NP_DeltaW_Razogreva;
			ZD_Wipn_K1 := _FUNCTION_ + ZD_Wipn_K1 + 0.0 + NP_Wipn_K1_MAH;
			SET STATE PauzaRazogreva;
		ELSE 
			SET STATE RegulirovanieZadaniya;
		END_IF
	END_STATE
	
	STATE PauzaRazogreva 
		TIMEOUT NP_DeltaVremeniRazogreva THEN
			SET STATE RazogrevNagrevatelya;
		END_TIMEOUT
	END_STATE
	
	STATE RegulirovanieZadaniya 
		IF (FlagDTN) THEN
			LP_FP_Oshibka_2_Tn := LP_FP_Oshibka_1_Tn;
			LP_FP_Oshibka_1_Tn := LP_FP_Oshibka_0_Tn;
			LP_FP_Oshibka_0_Tn := FP_Tn - ZD_Tn;
			ZD_Wipn_K1 := ZD_Wipn_K1 + LP_FP_Oshibka_0_Tn * (NP_Kp_Tn + NP_Ki_Tn + NP_Kd_Tn) - LP_FP_Oshibka_1_Tn * (NP_Kp_Tn + 2.0 * NP_Kd_Tn) + LP_FP_Oshibka_2_Tn * NP_Kd_Tn;
			ZD_Wipn_K1 := _FUNCTION_ + ZD_Wipn_K1 + 0.0 + NP_Wipn_K1_MAH;
			SET NEXT;
		ELSE 
			SET STATE SoobshenieDostovernostq;
		END_IF
	END_STATE
	
	STATE PauzaTempNagrevatelya 
		TIMEOUT NP_Pauza_Tn THEN
			SET STATE RegulirovanieZadaniya;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGotovnosti 
		IF (FlagDTN) THEN
			SET STATE RegulirovanieZadaniya;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE SoobshenieDostovernostq;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieDostovernostq 
		IF (_FUNCTION_ + NET_DOSTOVERNOSTI_T_NAGREVATELYA__RABOTA_REG_TN_PRIOSTANOVLENA) THEN
			SET STATE OzhidanieGotovnosti;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE OzhidanieGotovnosti;
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_TN
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Tn_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Tn_T1 := ZD_Tn;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF (LP_ZD_Tn_T1 <> ZD_Tn) THEN
			LP_SchetchikVremeni := 0;
			LP_ZD_Tn_T1 := ZD_Tn;
		END_IF
		LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
		IF (LP_SchetchikVremeni >= NP_VremyaPerehodnogoProtsessaTn) THEN
			LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
			IF (ZD_Tn < MINIMALQNOE_ZADANIE_REG_TN) THEN
				IF (NOT (PROCESS REG_TN IN STATE ACTIVE)) THEN
					STOP;
				ELSE 
					SET STATE PeredachaSoobsheniya;
				END_IF
			ELSE 
				IF ((_FUNCTION_ + FP_Tn - ZD_Tn / ZD_Tn) > NP_PogreshnostqTn) THEN
					IF (NOT (PROCESS REG_TN IN STATE ACTIVE)) THEN
						STOP;
					ELSE 
						SET STATE PeredachaSoobsheniya;
					END_IF
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_TN_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_TR
	STATE Nachalo 
		IF (PROCESS REG_ROSTA IN STATE ACTIVE) THEN
			ERROR PROCESS REG_ROSTA;
		END_IF
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			IF (NOT (PROCESS REG_TR IN STATE ACTIVE)) THEN
				START PROCESS REG_TR;
			END_IF
			STOP;
		ELSE 
			START PROCESS VKL_REG_TN;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqZapuskaRegulyatora 
		IF (NOT (PROCESS VKL_REG_TN IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_TN IN STATE STOP) THEN
				START PROCESS REG_TR;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS REG_TR
	VAR
		LP_FP_Oshibka_0_Tr : REAL;
		LP_FP_Oshibka_1_Tr : REAL;
		LP_FP_Oshibka_2_Tr : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_Oshibka_0_Tr := 0.0;
		LP_FP_Oshibka_1_Tr := 0.0;
		LP_FP_Oshibka_2_Tr := 0.0;
		START PROCESS KONTROLQ_REG_TR;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		IF (FlagDTR) THEN
			LP_FP_Oshibka_2_Tr := LP_FP_Oshibka_1_Tr;
			LP_FP_Oshibka_1_Tr := LP_FP_Oshibka_0_Tr;
			LP_FP_Oshibka_0_Tr := FP_Tr - ZD_Tr;
			ZD_Tn := ZD_Tn + LP_FP_Oshibka_0_Tr * (NP_Kp_Tr + NP_Ki_Tr + NP_Kd_Tr) - LP_FP_Oshibka_1_Tr * (NP_Kp_Tr + 2.0 * NP_Kd_Tr) + LP_FP_Oshibka_2_Tr * NP_Kd_Tr;
			ZD_Tn := _FUNCTION_ + ZD_Tn + 900.0 + NP_Tn_MAX;
			SET NEXT;
		ELSE 
			SET STATE SoobshenieDostovernostq;
		END_IF
	END_STATE
	
	STATE PauzaTempRasplava 
		IF (PROCESS REG_TN IN STATE INACTIVE) THEN
			SET STATE SoobshenieREG_TNNeaktivnoe;
		END_IF
		TIMEOUT NP_Pauza_Tr THEN
			SET STATE TSiklRegulirovaniya;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGotovnosti 
		IF (FlagDTR) THEN
			SET STATE TSiklRegulirovaniya;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE SoobshenieDostovernostq;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieDostovernostq 
		IF (_FUNCTION_ + NET_DOSTOVERNOSTI_T_RASPLAVA__RABOTA_REG_TR_PRIOSTANOVLENA) THEN
			SET STATE OzhidanieGotovnosti;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieREG_TNNeaktivnoe 
		IF (_FUNCTION_ + REG_TN_VYKLYUCHEN__RABOTA_REG_TR_NEVOZMOZHNA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE OzhidanieGotovnosti;
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_TR
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Tr_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Tr_T1 := ZD_Tr;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF (LP_ZD_Tr_T1 <> ZD_Tr) THEN
			LP_SchetchikVremeni := 0;
			LP_ZD_Tr_T1 := ZD_Tr;
		END_IF
		LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
		IF (LP_SchetchikVremeni >= NP_VremyaPerehodnogoProtsessaTr) THEN
			LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
			IF ((_FUNCTION_ + FP_Tr - ZD_Tr / ZD_Tr) > NP_PogreshnostqTr) THEN
				SET STATE PeredachaSoobsheniya;
			END_IF
		END_IF
		IF (PROCESS REG_TR IN STATE INACTIVE) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_TR_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS REG_UR
	VAR
		LP_OshibkaHur : REAL;
		LP_NormalizovannayaOshibka : REAL;
		LP_SostavlyayushayaHur : REAL;
		LP_SostavlyayushayaDkr : REAL;
	END_VAR
	
	STATE ProverkaAktivnostiVtR 
		IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
			ZD_VtR := 0.0;
			START PROCESS TIG_RS;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ProverkaUslovijZapuska 
		LP_OshibkaHur := FP_Hur - ZD_Hur;
		IF ((_FUNCTION_ + LP_OshibkaHur > MAKSIMALQNOE_RASSOGLASOVANIE_UROVNYA) AND (FlagHur = VKL)) THEN
			SET STATE SoobsheniyaPIVoRassoglasovanii;
		ELSE 
			START PROCESS KONTROLQ_REG_UR;
			SET STATE TSiklRegulirovaniyaUrovnya;
		END_IF
	END_STATE
	
	STATE TSiklRegulirovaniyaUrovnya 
		IF (FlagDkr = VKL) THEN
			LP_SostavlyayushayaDkr := KOEF_PLOTNOSTI_TV_ZHD_SI * FP_VzR * (FP_Dkr / OP_Dzerkala_rasplava) * (FP_Dkr / OP_Dzerkala_rasplava);
			IF (_FUNCTION_ + LP_SostavlyayushayaDkr > 0.7) THEN
				LP_SostavlyayushayaDkr := 0.0;
			END_IF
			IF (FlagHur = VKL) THEN
				LP_OshibkaHur := FP_Hur - ZD_Hur;
				LP_SostavlyayushayaHur := NP_Kp_DUDD_Hur * _FUNCTION_ + LP_OshibkaHur + NP_MIN_DUDD_Hur + NP_MAX_DUDD_Hur;
			ELSE 
				LP_SostavlyayushayaHur := 0.0;
			END_IF
		ELSE 
			LP_SostavlyayushayaDkr := 0.0;
			IF (FlagHur = VKL) THEN
				LP_OshibkaHur := FP_Hur - ZD_Hur;
				LP_SostavlyayushayaHur := NP_Kp_DU_Hur * _FUNCTION_ + LP_OshibkaHur + NP_MIN_DU_Hur + NP_MAX_DU_Hur;
			ELSE 
				LP_SostavlyayushayaHur := 0.0;
			END_IF
		END_IF
		ZD_VtR := _FUNCTION_ + NP_PopravkaVtR_Nur + LP_SostavlyayushayaHur + LP_SostavlyayushayaDkr + MINIMALQNOE_ZADANIE_REG_VtR + MAKSIMALQNOE_ZADANIE_REG_VtR;
		SET STATE TSiklRegulirovaniyaUrovnya;
	END_STATE
	
	STATE SoobsheniyaPIVoRassoglasovanii 
		IF (_FUNCTION_ + PREVYSH_DOPUST_RASSOGLASOVANIYA__REGUL_NEVOZMOZHNO) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_UR
	VAR
		LP_OshibkaHur : REAL;
		LP_TajmAut : LINT;
	END_VAR
	
	STATE Nachalo 
		IF (NOT (PROCESS REG_UR IN STATE ACTIVE)) THEN
			STOP;
		ELSE 
			IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
				SET STATE PeredachaSoobsheniyaRegVtOtklyuchen;
			ELSE 
				IF (FlagHur = VKL) THEN
					LP_OshibkaHur := FP_Hur - ZD_Hur;
					IF (_FUNCTION_ + LP_OshibkaHur > NP_PredupreditelqnyjHur) THEN
						SET NEXT;
					END_IF
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE PredupreditelqnoeSoobshenieOPrevysheniiPoroga 
		IF (_FUNCTION_ + PREVYSHEN_DIAPAZON_Hur) THEN
			LP_TajmAut := DESYATQ_MINUT;
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqAvarii 
		IF (NOT (PROCESS REG_UR IN STATE ACTIVE)) THEN
			STOP;
		ELSE 
			IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
				SET STATE PeredachaSoobsheniyaRegVtOtklyuchen;
			ELSE 
				IF (FlagHur = VKL) THEN
					LP_OshibkaHur := FP_Hur - ZD_Hur;
					IF (LP_OshibkaHur < -NP_AvarijnayaOshibkaHur) THEN
						SET STATE AvarijnoeSoobshenieOProlive;
					END_IF
					IF (LP_OshibkaHur > NP_AvarijnayaOshibkaHur) THEN
						SET STATE AvarijnoeSoobshenieOPrevysheniiPoroga;
					END_IF
				END_IF
			END_IF
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE AvarijnoeSoobshenieOProlive 
		IF (_FUNCTION_ + PROLIV_RASPLAVA) THEN
			ERROR PROCESS REG_UR;
			IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
				START PROCESS DoOtmeny2min;
			END_IF
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AvarijnoeSoobshenieOPrevysheniiPoroga 
		IF (_FUNCTION_ + SKACHOK_UROVNYA_RASPLAVA) THEN
			ERROR PROCESS REG_UR;
			IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
				START PROCESS DoOtmeny2min;
			END_IF
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaRegVtOtklyuchen 
		IF (_FUNCTION_ + REG_VtR_VYKLYUCHEN__REGUL_UROVNYA_NEVOZMOZHNO) THEN
			ERROR PROCESS REG_UR;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS VYK_REG_UR
	STATE Nachalo 
		STOP PROCESS REG_UR;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS REG_DK
	VAR
		LP_FP_Oshibka_0_Dkr : REAL;
		LP_FP_Oshibka_1_Dkr : REAL;
		LP_FP_Oshibka_2_Dkr : REAL;
		LP_OtkorrektirovannoeZD_VzR : REAL;
		LP_Ostatok_Obrezok : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (FlagRegulyatora_V_ZR = VYKL) THEN
			SET STATE SoobshenieVyklVzR;
		ELSE 
			LP_FP_Oshibka_0_Dkr := 0.0;
			LP_FP_Oshibka_1_Dkr := 0.0;
			LP_FP_Oshibka_2_Dkr := 0.0;
			LP_Ostatok_Obrezok := 0.0;
			START PROCESS KONTROLQ_REG_DK;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TSiklRegulirovaniyaDkr 
		IF (FlagDkr) THEN
			LP_FP_Oshibka_2_Dkr := LP_FP_Oshibka_1_Dkr;
			LP_FP_Oshibka_1_Dkr := LP_FP_Oshibka_0_Dkr;
			LP_FP_Oshibka_0_Dkr := FP_Dkr - ZD_Dkr;
			ZD_VzR := ZD_VzR + LP_FP_Oshibka_0_Dkr * (NP_Kp_Dkr + NP_Ki_Dkr + NP_Kd_Dkr) - LP_FP_Oshibka_1_Dkr * (NP_Kp_Dkr + 2.0 * NP_Kd_Dkr) + LP_FP_Oshibka_2_Dkr * NP_Kd_Dkr + LP_Ostatok_Obrezok;
			LP_OtkorrektirovannoeZD_VzR := _FUNCTION_ + ZD_VzR + 0.2 + ZD_Vrosta * NP_DeltaVzRS_MAH;
			LP_Ostatok_Obrezok := ZD_VzR - LP_OtkorrektirovannoeZD_VzR;
			ZD_VzR := LP_OtkorrektirovannoeZD_VzR;
			SET NEXT;
		ELSE 
			SET STATE SoobshenieDostovernostqDkr;
		END_IF
	END_STATE
	
	STATE Pauza_Dkr 
		TIMEOUT NP_Pauza_Dkr THEN
			SET STATE TSiklRegulirovaniyaDkr;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGotovnosti 
		IF (FlagDkr) THEN
			SET STATE TSiklRegulirovaniyaDkr;
		END_IF
		TIMEOUT DESYATQ_MINUT THEN
			SET STATE SoobshenieDostovernostqDkr;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieDostovernostqDkr 
		IF (_FUNCTION_ + NET_DOSTOVERNOSTI_DIAMETRA__RABOTA_REG_DK_PRIOSTANOVLENA) THEN
			SET STATE OzhidanieGotovnosti;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyaziNefatalqnoe;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziNefatalqnoe 
		SET STATE OzhidanieGotovnosti;
	END_STATE
	
	STATE SoobshenieVyklVzR 
		IF (_FUNCTION_ + REG_VzR_VYKLYUCHEN__RABOTA_REG_DK_NEVOZMOZHNA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_DK
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Dkr_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Dkr_T1 := ZD_Dkr;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF (LP_ZD_Dkr_T1 <> ZD_Dkr) THEN
			LP_SchetchikVremeni := 0;
			LP_ZD_Dkr_T1 := ZD_Dkr;
		END_IF
		IF (FlagRegulyatora_V_ZR = VYKL) THEN
			SET STATE SoobshenieVzRNeaktivnoe;
		ELSE 
			LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
			IF (LP_SchetchikVremeni >= NP_VremyaPerehodnogoProtsessaDkr) THEN
				LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
				IF ((_FUNCTION_ + FP_Dkr - ZD_Dkr / ZD_Dkr) > NP_PogreshnostqDkr) THEN
					SET STATE PeredachaSoobsheniya;
				END_IF
			END_IF
		END_IF
		IF (PROCESS REG_DK IN STATE INACTIVE) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_DK_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieVzRNeaktivnoe 
		IF (_FUNCTION_ + REG_VzR_VYKLYUCHEN__RABOTA_REG_DK_NEVOZMOZHNA) THEN
			ERROR PROCESS REG_DK;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VYK_REG_DK
	STATE Nachalo 
		STOP PROCESS REG_DK;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_ROSTA
	STATE Nachalo 
		IF (PROCESS REG_TR IN STATE ACTIVE) THEN
			ERROR PROCESS REG_TR;
		END_IF
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			IF (NOT (PROCESS REG_ROSTA IN STATE ACTIVE)) THEN
				START PROCESS REG_ROSTA;
			END_IF
			STOP;
		ELSE 
			START PROCESS VKL_REG_TN;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqZapuskaRegulyatora 
		IF (NOT (PROCESS VKL_REG_TN IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_TN IN STATE STOP) THEN
				START PROCESS REG_ROSTA;
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS REG_ROSTA
	VAR
		LP_FP_Oshibka_0_Vrosta : REAL;
		LP_FP_Oshibka_1_Vrosta : REAL;
		LP_FP_Oshibka_2_Vrosta : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (FlagGotovnostiVrosta = VKL) THEN
			LP_FP_Oshibka_0_Vrosta := 0.0;
			LP_FP_Oshibka_1_Vrosta := 0.0;
			LP_FP_Oshibka_2_Vrosta := 0.0;
			START PROCESS KONTROLQ_REG_ROSTA;
			SET STATE TSiklRegulirovaniya;
		END_IF
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_FP_Oshibka_2_Vrosta := LP_FP_Oshibka_1_Vrosta;
		LP_FP_Oshibka_1_Vrosta := LP_FP_Oshibka_0_Vrosta;
		LP_FP_Oshibka_0_Vrosta := FP_Vrosta - ZD_Vrosta;
		IF (_FUNCTION_ + LP_FP_Oshibka_0_Vrosta <= NP_Kz_Vrosta) THEN
			LP_FP_Oshibka_0_Vrosta := 0.0;
		END_IF
		ZD_Tn := ZD_Tn + LP_FP_Oshibka_0_Vrosta * (NP_Kp_Vrosta + NP_Ki_Vrosta + NP_Kd_Vrosta) - LP_FP_Oshibka_1_Vrosta * (NP_Kp_Vrosta + 2.0 * NP_Kd_Vrosta) + LP_FP_Oshibka_2_Vrosta * NP_Kd_Vrosta;
		ZD_Tn := _FUNCTION_ + ZD_Tn + 900.0 + NP_Tn_MAX;
		SET STATE PauzaRegRosta;
	END_STATE
	
	STATE PauzaRegRosta 
		TIMEOUT NP_Pauza_REG_ROSTA THEN
			SET STATE TSiklRegulirovaniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KONTROLQ_REG_ROSTA
	VAR
		LP_SchetchikVremeni : LINT;
		LP_ZD_Vrosta_T1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_SchetchikVremeni := 0;
		LP_ZD_Vrosta_T1 := ZD_Vrosta;
		SET STATE TSiklKontrolya;
	END_STATE
	
	STATE TSiklKontrolya 
		IF (NOT (PROCESS REG_TN IN STATE ACTIVE)) THEN
			SET STATE PeredachaSoobsheniyaREG_TN;
		END_IF
		IF (NOT (PROCESS REG_ROSTA IN STATE ACTIVE)) THEN
			STOP;
		END_IF
		IF (LP_ZD_Vrosta_T1 <> ZD_Vrosta) THEN
			LP_SchetchikVremeni := 0;
			LP_ZD_Vrosta_T1 := ZD_Vrosta;
		END_IF
		LP_SchetchikVremeni := LP_SchetchikVremeni + 1;
		IF (LP_SchetchikVremeni >= NP_VremyaPerehodnogoProtsessaVrosta) THEN
			LP_SchetchikVremeni := LP_SchetchikVremeni - 1;
			IF ((_FUNCTION_ + FP_Vrosta - ZD_Vrosta / ZD_Vrosta) > NP_PogreshnostqVrosta) THEN
				SET STATE PeredachaSoobsheniyaPogreshnostq;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaPogreshnostq 
		IF (_FUNCTION_ + POGRESHNOSTQ_REG_ROSTA_VYSHE_NORMY) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyaziNefatalqnoe;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziNefatalqnoe 
		SET STATE Nachalo;
	END_STATE
	
	STATE PeredachaSoobsheniyaREG_TN 
		IF (_FUNCTION_ + REG_TN_VYKLYUCHEN__RABOTA_REG_ROSTA_NEVOZMOZHNA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE VyklyuchenieRegulyatora 
		STOP PROCESS REG_ROSTA;
		STOP;
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS OpredelenieKoordinatyZatravki
	VAR
		LP_L_OT_KVP_DO_PProgreva : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (K_KVP_Z = VKL) THEN
			KOORD_ZAT := ZAT_V_KVP;
		ELSE 
			IF (K_KNP_Z = VKL) THEN
				KOORD_ZAT := ZAT_V_KNP;
			ELSE 
				IF (FP_Xz > GRUBAYA_OKRESTNOSTQ_KONTSEVIKA) THEN
					KOORD_ZAT := KOORD_ZAT_NEOPREDELENA;
				ELSE 
					IF (FP_Xz > -OBLASTQ_ZAPRETA_VRASHENIYA_ZATRAVKI) THEN
						KOORD_ZAT := ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA;
					ELSE 
						IF (FP_Xz > (-NP_Lz_OT_KVP_DO_DP_Lppz + GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) THEN
							KOORD_ZAT := ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP;
						ELSE 
							IF (FP_Xz > (-NP_Lz_OT_KVP_DO_DP_Lppz - GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) THEN
								KOORD_ZAT := ZAT_V_POLOZHENII_PRIVYAZKI;
							ELSE 
								LP_L_OT_KVP_DO_PProgreva := NP_Lz_OT_KVP_DO_STYKA_NK + NP_L_OT_STYKA_NK_DO_PNUR_L1 - (TK_RasstoyanieDoRasplava_Lpp + FP_Lmonokristalla);
								IF (FP_Xz > (-LP_L_OT_KVP_DO_PProgreva + GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) THEN
									KOORD_ZAT := ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI;
								ELSE 
									IF (FP_Xz > (-LP_L_OT_KVP_DO_PProgreva - GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) THEN
										KOORD_ZAT := ZAT_V_POLOZHENII_PROGREVA;
									ELSE 
										IF (FP_Xz > (-NP_Lz_OT_KVP_DO_KNP - GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) THEN
											KOORD_ZAT := ZAT_NIZHE_POLOZHENIYA_PROGREVA;
										ELSE 
											KOORD_ZAT := KOORD_ZAT_NEOPREDELENA;
										END_IF
									END_IF
								END_IF
							END_IF
						END_IF
					END_IF
				END_IF
			END_IF
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqKoordinatyZatravki
	VAR
		LP_Predydushee : INT;
		LP_Soobshenie : INT;
		LP_Hz : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT KOORD_ZAT);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> KOORD_ZAT) THEN
			LP_Predydushee := KOORD_ZAT;
			LP_Hz := FP_Xz;
			CASE (LP_Predydushee) OF
				ZAT_V_KVP:
					LP_Soobshenie := PK_PIV_ZAT_V_KVP;
				ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA:
					LP_Soobshenie := PK_PIV_ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA;
				ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP:
					LP_Soobshenie := PK_PIV_ZAT_V_OBLASTI_RAZRESHENIYA_VRASHENIYA_DO_DP;
				ZAT_V_POLOZHENII_PRIVYAZKI:
					LP_Soobshenie := PK_PIV_ZAT_V_POLOZHENII_PRIVYAZKI;
				ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI:
					LP_Soobshenie := PK_PIV_ZAT_NIZHE_POLOZHENIYA_PRIVYAZKI;
				ZAT_V_POLOZHENII_PROGREVA:
					LP_Soobshenie := PK_PIV_ZAT_V_POLOZHENII_PROGREVA;
				ZAT_NIZHE_POLOZHENIYA_PROGREVA:
					LP_Soobshenie := PK_PIV_ZAT_NIZHE_POLOZHENIYA_PROGREVA;
				ZAT_V_KNP:
					LP_Soobshenie := PK_PIV_ZAT_V_KNP;
				ELSE
					LP_Soobshenie := PK_PIV_KOORD_ZAT_NEOPREDELENA;
			END_CASE
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + LP_Soobshenie + LP_Hz) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS OpredelenieKoordinatyTiglya
	STATE Nachalo 
		IF (K_KVP_T = VKL) THEN
			KOORD_TIG := TIG_V_KVP;
		ELSE 
			IF (K_KNP_T = VKL) THEN
				KOORD_TIG := TIG_V_KNP;
			ELSE 
				IF ((FP_Xt > (NP_Lt_OT_KNP_DO_KVP + GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) OR (FP_Xt < -GRUBAYA_OKRESTNOSTQ_KONTSEVIKA)) THEN
					KOORD_TIG := KOORD_TIG_NEOPREDELENA;
				ELSE 
					IF (FlagHur) THEN
						IF ((FP_Hur - ZD_Hur) < -MAKSIMALQNOE_RASSOGLASOVANIE_UROVNYA) THEN
							KOORD_TIG := TIG_NIZHE_POLOZHENIYA_PZUR;
						ELSE 
							IF ((FP_Hur - ZD_Hur) > MAKSIMALQNOE_RASSOGLASOVANIE_UROVNYA) THEN
								KOORD_TIG := TIG_VYSHE_POLOZHENIYA_PZUR;
							ELSE 
								KOORD_TIG := TIG_V_POLOZHENII_PZUR;
							END_IF
						END_IF
					ELSE 
						IF ((FP_Xt + FP_GlubinaRasplava) > (NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR + ZD_Hur)) THEN
							KOORD_TIG := TIG_VYSHE_POLOZHENIYA_PZUR;
						ELSE 
							KOORD_TIG := TIG_NIZHE_POLOZHENIYA_PZUR;
						END_IF
					END_IF
				END_IF
			END_IF
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqKoordinatyTiglya
	VAR
		LP_Predydushee : INT;
		LP_Soobshenie : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT KOORD_TIG);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> KOORD_TIG) THEN
			LP_Predydushee := KOORD_TIG;
			CASE (LP_Predydushee) OF
				TIG_V_KVP:
					LP_Soobshenie := PK_PIV_TIG_V_KVP;
				TIG_VYSHE_POLOZHENIYA_PZUR:
					LP_Soobshenie := PK_PIV_TIG_VYSHE_POLOZHENIYA_PZUR;
				TIG_V_POLOZHENII_PZUR:
					LP_Soobshenie := PK_PIV_TIG_V_POLOZHENII_PZUR;
				TIG_NIZHE_POLOZHENIYA_PZUR:
					LP_Soobshenie := PK_PIV_TIG_NIZHE_POLOZHENIYA_PZUR;
				TIG_V_KNP:
					LP_Soobshenie := PK_PIV_TIG_V_KNP;
				ELSE
					LP_Soobshenie := PK_PIV_KOORD_TIG_NEOPREDELENA;
			END_CASE
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + LP_Soobshenie) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS ZAT_RK
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		ERROR PROCESS ZAT_RS_OTRYV_KRISTALLA;
		ERROR PROCESS REG_KZ_UR;
		IF (NOT (PROCESS ZAT_RS IN STATE ACTIVE)) THEN
			START PROCESS ZAT_RS;
		END_IF
		ZD_VzR := ZD_VzR_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Xz - FP_Xz;
		ZD_VzR := _FUNCTION_ + LP_Rassoglasovanie + FP_VzR + ZD_VzR + MAKSIMALQNOE_ZADANIE_REG_VzR + MAKSIMALQNAYA_POPRAVKA_Vz * 2.0 + NP_RAB_USK_ZR + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS ZAT_RS IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_VzR < KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZR) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_ZR)) THEN
			START PROCESS VYK_ZATRAVKU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OzhidanieOstanova 
		IF (PROCESS VYK_ZATRAVKU IN STATE ERROR) THEN
			ERROR;
		END_IF
		IF (PROCESS VYK_ZATRAVKU IN STATE STOP) THEN
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS REG_KZ_UR
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		ERROR PROCESS ZAT_RK;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ZAT_RS
	STATE Nachalo 
		START PROCESS VYK_ZU;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		IF (NOT (PROCESS VYK_ZU IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_ZU IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyucheniePrivoda 
		START PROCESS VKL_REG_VzR;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (NOT (PROCESS VKL_REG_VzR IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_VzR IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDvizheniya 
		IF ((ZD_VzR - ZD_VzR_PRIVOD) < -MAKSIMALQNAYA_POPRAVKA_Vz) THEN
			ZD_VzR_PRIVOD := ZD_VzR_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vz;
		ELSE 
			IF ((ZD_VzR - ZD_VzR_PRIVOD) > MAKSIMALQNAYA_POPRAVKA_Vz) THEN
				ZD_VzR_PRIVOD := ZD_VzR_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vz;
			ELSE 
				ZD_VzR_PRIVOD := ZD_VzR;
			END_IF
		END_IF
		IF (FlagRegulyatora_V_ZR <> VKL) THEN
			IF (KOORD_ZAT = ZAT_V_KVP) THEN
				STOP;
			ELSE 
				IF (KOORD_ZAT = ZAT_V_KNP) THEN
					STOP;
				ELSE 
					ZD_VzR_PRIVOD := ZD_VzR;
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_PRIVODA_ZR) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqPeremesheniyaZatravkiVnizPriZakrytomZV
	STATE Nachalo 
		IF (((PROCESS ZAT_RS IN STATE ACTIVE) AND (ZD_VzR < 0.0) AND (NOT K_OTKR_ZATVOR_V)) OR ((PROCESS ZAT_US IN STATE ACTIVE) AND (ZD_VzU < 0.0) AND (NOT K_OTKR_ZATVOR_V))) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoZV 
		IF (_FUNCTION_ + PK_PIV_DVIZHENIE_ZATRAVKI_K_ZV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT DVADTSATQ_SEKUND THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS ZAT_UK
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		STOP PROCESS ZAT_UK_US;
		STOP PROCESS VKL_REG_ZAT_UK;
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			START PROCESS ZAT_US;
		END_IF
		ZD_VzU := ZD_VzU_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Xz - FP_Xz;
		ZD_VzU := _FUNCTION_ + LP_Rassoglasovanie + FP_VzU + ZD_VzU + MAKSIMALQNOE_ZADANIE_REG_VzU + MAKSIMALQNAYA_POPRAVKA_Vz * 2.0 + NP_RAB_USK_ZU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_VzU < KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZU) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_ZU)) THEN
			START PROCESS VYK_ZATRAVKU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OzhidanieOstanova 
		IF (PROCESS VYK_ZATRAVKU IN STATE ERROR) THEN
			ERROR;
		END_IF
		IF (PROCESS VYK_ZATRAVKU IN STATE STOP) THEN
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_ZAT_UK
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		STOP PROCESS ZAT_UK;
		STOP PROCESS ZAT_UK_US;
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			START PROCESS ZAT_US;
		END_IF
		ZD_VzU := ZD_VzU_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Xz - FP_Xz;
		ZD_VzU := _FUNCTION_ + LP_Rassoglasovanie + FP_VzU + ZD_VzU + MAKSIMALQNOE_ZADANIE_REG_VzU + MAKSIMALQNAYA_POPRAVKA_Vz * 2.0 + NP_RAB_USK_ZU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			IF (PROCESS ZAT_US IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PopytkaZapuskaPriSqezdeS_Kontsevika 
		LP_Rassoglasovanie := ZD_Xz - FP_Xz;
		ZD_VzU := _FUNCTION_ + LP_Rassoglasovanie + FP_VzU + ZD_VzU + MAKSIMALQNOE_ZADANIE_REG_VzU + MAKSIMALQNAYA_POPRAVKA_Vz * 2.0 + NP_RAB_USK_ZU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		START PROCESS ZAT_US;
		SET STATE TSiklRegulirovaniya;
	END_STATE
	
END_PROCESS

PROCESS ZAT_UK_US
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		STOP PROCESS VKL_REG_ZAT_UK;
		STOP PROCESS ZAT_UK;
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			START PROCESS ZAT_US;
		END_IF
		ZD_VzU := ZD_VzU_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		LP_Rassoglasovanie := ZD_Xz - FP_Xz;
		ZD_VzU := _FUNCTION_ + LP_Rassoglasovanie + FP_VzU + ZD_VzU + TK_VzDvizheniya_kRasplavu_Vpp + MAKSIMALQNAYA_POPRAVKA_Vz * 2.0 + NP_RAB_USK_ZU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_VzU < KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZU) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_ZU)) THEN
			START PROCESS VYK_ZATRAVKU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OzhidanieOstanova 
		IF (PROCESS VYK_ZATRAVKU IN STATE ERROR) THEN
			ERROR;
		END_IF
		IF (PROCESS VYK_ZATRAVKU IN STATE STOP) THEN
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS ZAT_US
	STATE Nachalo 
		START PROCESS VYK_ZR;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		IF (NOT (PROCESS VYK_ZR IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_ZR IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyucheniePrivoda 
		START PROCESS VKL_REG_VzU;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (NOT (PROCESS VKL_REG_VzU IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_VzU IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDvizheniya 
		IF ((ZD_VzU - ZD_VzU_PRIVOD) < -MAKSIMALQNAYA_POPRAVKA_Vz) THEN
			ZD_VzU_PRIVOD := ZD_VzU_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vz;
		ELSE 
			IF ((ZD_VzU - ZD_VzU_PRIVOD) > MAKSIMALQNAYA_POPRAVKA_Vz) THEN
				ZD_VzU_PRIVOD := ZD_VzU_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vz;
			ELSE 
				ZD_VzU_PRIVOD := ZD_VzU;
			END_IF
		END_IF
		IF ((KOORD_ZAT <= ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA) AND (FlagRegulyatora_V_ZV) AND (ZD_VzU_PRIVOD > 0.0)) THEN
			ZD_VzU_PRIVOD := 0.0;
		END_IF
		IF (FlagRegulyatora_V_ZU <> VKL) THEN
			IF (KOORD_ZAT = ZAT_V_KVP) THEN
				STOP;
			ELSE 
				IF (KOORD_ZAT = ZAT_V_KNP) THEN
					STOP;
				ELSE 
					ZD_VzU_PRIVOD := ZD_VzU;
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_PRIVODA_ZU) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAT_UGOL
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (KOORD_ZAT <= ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA) THEN
			SET STATE ZapretVrasheniya;
		ELSE 
			IF (NOT (PROCESS ZAT_VR IN STATE ACTIVE)) THEN
				START PROCESS ZAT_VR;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Wz_UGOL - FP_Wz_UGOL;
		ZD_Wz := _FUNCTION_ + LP_Rassoglasovanie + FP_Wz + ZD_Wz + MAKSIMALQNOE_ZADANIE_REG_Wz + MAKSIMALQNAYA_POPRAVKA_Wz * 2.0 + NP_RAB_USK_ZV + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS ZAT_VR IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_Wz < KONTROLQNAYA_SKOROSTQ_OSTANOVA_ZV) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_ZV)) THEN
			START PROCESS VYK_ZAT_VR;
			STOP;
		END_IF
	END_STATE
	
	STATE ZapretVrasheniya 
		START PROCESS VYK_ZAT_VR;
		SET NEXT;
	END_STATE
	
	STATE SoobsheniePIVoZV 
		IF (_FUNCTION_ + PK_PIV_OSTANOV_VRASHENIYA_ZATRAVKI_ZAPRET_VRASHENIYA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAT_VR
	STATE VklyucheniePrivoda 
		IF (KOORD_ZAT <= ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA) THEN
			SET STATE ZapretVrasheniya;
		ELSE 
			ERROR PROCESS VYK_ZAT_VR;
			START PROCESS VKL_REG_Wz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (NOT (PROCESS VKL_REG_Wz IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_Wz IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDvizheniya 
		IF ((ZD_Wz - ZD_Wz_PRIVOD) < -MAKSIMALQNAYA_POPRAVKA_Wz) THEN
			ZD_Wz_PRIVOD := ZD_Wz_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Wz;
		ELSE 
			IF ((ZD_Wz - ZD_Wz_PRIVOD) > MAKSIMALQNAYA_POPRAVKA_Wz) THEN
				ZD_Wz_PRIVOD := ZD_Wz_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Wz;
			ELSE 
				ZD_Wz_PRIVOD := ZD_Wz;
			END_IF
		END_IF
		IF (KOORD_ZAT <= ZAT_V_OBLASTI_ZAPRETA_VRASHENIYA) THEN
			SET STATE ZapretVrasheniya;
		END_IF
		IF (FlagRegulyatora_V_ZV <> VKL) THEN
			ZD_Wz_PRIVOD := ZD_Wz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_PRIVODA_ZV) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapretVrasheniya 
		START PROCESS VYK_ZAT_VR;
		SET NEXT;
	END_STATE
	
	STATE SoobsheniePIVoZV 
		IF (_FUNCTION_ + PK_PIV_OSTANOV_VRASHENIYA_ZATRAVKI_ZAPRET_VRASHENIYA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_ZR
	STATE Nachalo 
		ERROR PROCESS ZAT_RS_OTRYV_KRISTALLA;
		ERROR PROCESS REG_KZ_UR;
		ERROR PROCESS ZAT_RS;
		ERROR PROCESS VKL_REG_VzR;
		SET NEXT;
	END_STATE
	
	STATE OtrabotkaOstanova 
		IF (ZD_VzR_PRIVOD < -MAKSIMALQNAYA_POPRAVKA_Vz) THEN
			ZD_VzR_PRIVOD := ZD_VzR_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vz;
		ELSE 
			IF (ZD_VzR_PRIVOD > MAKSIMALQNAYA_POPRAVKA_Vz) THEN
				ZD_VzR_PRIVOD := ZD_VzR_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vz;
			ELSE 
				ZD_VzR_PRIVOD := 0.0;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKomandyNaOstanov 
		IF (_FUNCTION_ + PK_ZR_OSTANOV_DVIZHENIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanova 
		IF (FlagRegulyatora_V_ZR = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_ZU
	STATE Nachalo 
		ERROR PROCESS ZAT_US;
		ERROR PROCESS VKL_REG_ZAT_UK;
		ERROR PROCESS VKL_REG_VzU;
		SET NEXT;
	END_STATE
	
	STATE OtrabotkaOstanova 
		IF (ZD_VzU_PRIVOD < -MAKSIMALQNAYA_POPRAVKA_Vz) THEN
			ZD_VzU_PRIVOD := ZD_VzU_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vz;
		ELSE 
			IF (ZD_VzU_PRIVOD > MAKSIMALQNAYA_POPRAVKA_Vz) THEN
				ZD_VzU_PRIVOD := ZD_VzU_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vz;
			ELSE 
				ZD_VzU_PRIVOD := 0.0;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKomandyNaOstanov 
		IF (_FUNCTION_ + PK_ZU_OSTANOV_DVIZHENIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanova 
		IF (FlagRegulyatora_V_ZU = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_ZATRAVKU
	STATE Nachalo 
		START PROCESS VYK_ZR;
		START PROCESS VYK_ZU;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		IF ((NOT (PROCESS VYK_ZR IN STATE ACTIVE)) AND (NOT (PROCESS VYK_ZU IN STATE ACTIVE))) THEN
			IF ((PROCESS VYK_ZR IN STATE STOP) AND (PROCESS VYK_ZU IN STATE STOP)) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VYK_ZAT_VR
	STATE Nachalo 
		ERROR PROCESS ZAT_VR;
		ERROR PROCESS ZAT_UGOL;
		ERROR PROCESS VKL_REG_Wz;
		SET NEXT;
	END_STATE
	
	STATE OtrabotkaOstanova 
		IF (ZD_Wz_PRIVOD < -MAKSIMALQNAYA_POPRAVKA_Wz) THEN
			ZD_Wz_PRIVOD := ZD_Wz_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Wz;
		ELSE 
			IF (ZD_Wz_PRIVOD > MAKSIMALQNAYA_POPRAVKA_Wz) THEN
				ZD_Wz_PRIVOD := ZD_Wz_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Wz;
			ELSE 
				ZD_Wz_PRIVOD := 0.0;
				SET STATE PeredachaKomandyNaOstanov;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKomandyNaOstanov 
		IF (_FUNCTION_ + PK_ZV_OSTANOV_DVIZHENIYA) THEN
			SET STATE KontrolqOstanova;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanova 
		IF (FlagRegulyatora_V_ZV = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS TIG_RK
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
			START PROCESS TIG_RS;
		END_IF
		ZD_VtR := ZD_VtR_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Xt - FP_Xt;
		ZD_VtR := _FUNCTION_ + LP_Rassoglasovanie + FP_VtR + ZD_VtR + MAKSIMALQNOE_ZADANIE_REG_VtR + MAKSIMALQNAYA_POPRAVKA_Vt * 2.0 + NP_RAB_USK_TR + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS TIG_RS IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_VtR < KONTROLQNAYA_SKOROSTQ_OSTANOVA_TR) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_TR)) THEN
			START PROCESS VYK_TIGELQ;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OzhidanieOstanova 
		IF (PROCESS VYK_TIGELQ IN STATE ERROR) THEN
			ERROR;
		END_IF
		IF (PROCESS VYK_TIGELQ IN STATE STOP) THEN
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS TIG_RS
	STATE Nachalo 
		START PROCESS VYK_TU;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		IF (NOT (PROCESS VYK_TU IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_TU IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyucheniePrivoda 
		START PROCESS VKL_REG_VtR;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (NOT (PROCESS VKL_REG_VtR IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_VtR IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDvizheniya 
		IF ((ZD_VtR - ZD_VtR_PRIVOD) < -MAKSIMALQNAYA_POPRAVKA_Vt) THEN
			ZD_VtR_PRIVOD := ZD_VtR_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vt;
		ELSE 
			IF ((ZD_VtR - ZD_VtR_PRIVOD) > MAKSIMALQNAYA_POPRAVKA_Vt) THEN
				ZD_VtR_PRIVOD := ZD_VtR_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vt;
			ELSE 
				ZD_VtR_PRIVOD := ZD_VtR;
			END_IF
		END_IF
		IF (FlagRegulyatora_V_TR <> VKL) THEN
			IF (KOORD_TIG = TIG_V_KVP) THEN
				STOP;
			ELSE 
				IF (KOORD_TIG = TIG_V_KNP) THEN
					STOP;
				ELSE 
					ZD_VtR_PRIVOD := ZD_VtR;
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_PRIVODA_TR) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS TIG_UK
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		STOP PROCESS VKL_REG_TIG_UK;
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			START PROCESS TIG_US;
		END_IF
		ZD_VtU := ZD_VtU_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Xt - FP_Xt;
		ZD_VtU := _FUNCTION_ + LP_Rassoglasovanie + FP_VtU + ZD_VtU + MAKSIMALQNOE_ZADANIE_REG_VtU + MAKSIMALQNAYA_POPRAVKA_Vt * 2.0 + NP_RAB_USK_TU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_VtU < KONTROLQNAYA_SKOROSTQ_OSTANOVA_TU) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_TU)) THEN
			START PROCESS VYK_TIGELQ;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OzhidanieOstanova 
		IF (PROCESS VYK_TIGELQ IN STATE ERROR) THEN
			ERROR;
		END_IF
		IF (PROCESS VYK_TIGELQ IN STATE STOP) THEN
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_TIG_UK
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		STOP PROCESS TIG_UK;
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			START PROCESS TIG_US;
		END_IF
		ZD_VtU := ZD_VtU_PRIVOD;
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Xt - FP_Xt;
		ZD_VtU := _FUNCTION_ + LP_Rassoglasovanie + FP_VtU + ZD_VtU + MAKSIMALQNOE_ZADANIE_REG_VtU + MAKSIMALQNAYA_POPRAVKA_Vt * 2.0 + NP_RAB_USK_TU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			IF ((PROCESS TIG_US IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PopytkaZapuskaPriSqezdeS_Kontsevika 
		LP_Rassoglasovanie := ZD_Xt - FP_Xt;
		ZD_VtU := _FUNCTION_ + LP_Rassoglasovanie + FP_VtU + ZD_VtU + MAKSIMALQNOE_ZADANIE_REG_VtU + MAKSIMALQNAYA_POPRAVKA_Vt * 2.0 + NP_RAB_USK_TU + VREMYA_ZADERZHKI_NA_SVYAZQ;
		START PROCESS TIG_US;
		SET STATE TSiklRegulirovaniya;
	END_STATE
	
END_PROCESS

PROCESS TIG_US
	STATE Nachalo 
		START PROCESS VYK_TR;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		IF (NOT (PROCESS VYK_TR IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_TR IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyucheniePrivoda 
		START PROCESS VKL_REG_VtU;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (NOT (PROCESS VKL_REG_VtU IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_VtU IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDvizheniya 
		IF ((ZD_VtU - ZD_VtU_PRIVOD) < -MAKSIMALQNAYA_POPRAVKA_Vt) THEN
			ZD_VtU_PRIVOD := ZD_VtU_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vt;
		ELSE 
			IF ((ZD_VtU - ZD_VtU_PRIVOD) > MAKSIMALQNAYA_POPRAVKA_Vt) THEN
				ZD_VtU_PRIVOD := ZD_VtU_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vt;
			ELSE 
				ZD_VtU_PRIVOD := ZD_VtU;
			END_IF
		END_IF
		IF (FlagRegulyatora_V_TU <> VKL) THEN
			IF (KOORD_TIG = TIG_V_KVP) THEN
				STOP;
			ELSE 
				IF (KOORD_TIG = TIG_V_KNP) THEN
					STOP;
				ELSE 
					ZD_VtU_PRIVOD := ZD_VtU;
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_PRIVODA_TU) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS TIG_UGOL
	VAR
		LP_Rassoglasovanie : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (NOT (PROCESS TIG_VR IN STATE ACTIVE)) THEN
			START PROCESS TIG_VR;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE TSiklRegulirovaniya 
		LP_Rassoglasovanie := ZD_Wt_UGOL - FP_Wt_UGOL;
		ZD_Wt := _FUNCTION_ + LP_Rassoglasovanie + FP_Wt + ZD_Wt + MAKSIMALQNOE_ZADANIE_REG_Wt + MAKSIMALQNAYA_POPRAVKA_Wt * 2.0 + NP_RAB_USK_TV + VREMYA_ZADERZHKI_NA_SVYAZQ;
		IF (NOT (PROCESS TIG_VR IN STATE ACTIVE)) THEN
			ERROR;
		END_IF
		IF ((_FUNCTION_ + FP_Wt < KONTROLQNAYA_SKOROSTQ_OSTANOVA_TV) AND (_FUNCTION_ + LP_Rassoglasovanie < POGRESHNOSTQ_POZITSIONIROVANIYA_TV)) THEN
			START PROCESS VYK_TIG_VR;
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS TIG_VR
	STATE VklyucheniePrivoda 
		ERROR PROCESS VYK_TIG_VR;
		START PROCESS VKL_REG_Wt;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (NOT (PROCESS VKL_REG_Wt IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_Wt IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqDvizheniya 
		IF ((ZD_Wt - ZD_Wt_PRIVOD) < -MAKSIMALQNAYA_POPRAVKA_Wt) THEN
			ZD_Wt_PRIVOD := ZD_Wt_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Wt;
		ELSE 
			IF ((ZD_Wt - ZD_Wt_PRIVOD) > MAKSIMALQNAYA_POPRAVKA_Wt) THEN
				ZD_Wt_PRIVOD := ZD_Wt_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Wt;
			ELSE 
				ZD_Wt_PRIVOD := ZD_Wt;
			END_IF
		END_IF
		IF (FlagRegulyatora_V_TV <> VKL) THEN
			ZD_Wt_PRIVOD := ZD_Wt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobsheniePIVoNeozhidannomOstanove 
		IF (_FUNCTION_ + PK_PIV_OTKAZ_PRIVODA_TV) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_TR
	STATE Nachalo 
		ERROR PROCESS TIG_RS;
		ERROR PROCESS VKL_REG_VtR;
		SET NEXT;
	END_STATE
	
	STATE OtrabotkaOstanova 
		IF (ZD_VtR_PRIVOD < -MAKSIMALQNAYA_POPRAVKA_Vt) THEN
			ZD_VtR_PRIVOD := ZD_VtR_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vt;
		ELSE 
			IF (ZD_VtR_PRIVOD > MAKSIMALQNAYA_POPRAVKA_Vt) THEN
				ZD_VtR_PRIVOD := ZD_VtR_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vt;
			ELSE 
				ZD_VtR_PRIVOD := 0.0;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKomandyNaOstanov 
		IF (_FUNCTION_ + PK_TR_OSTANOV_DVIZHENIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanova 
		IF (FlagRegulyatora_V_TR = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_TU
	STATE Nachalo 
		ERROR PROCESS TIG_US;
		ERROR PROCESS VKL_REG_VtU;
		SET NEXT;
	END_STATE
	
	STATE OtrabotkaOstanova 
		IF (ZD_VtU_PRIVOD < -MAKSIMALQNAYA_POPRAVKA_Vt) THEN
			ZD_VtU_PRIVOD := ZD_VtU_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Vt;
		ELSE 
			IF (ZD_VtU_PRIVOD > MAKSIMALQNAYA_POPRAVKA_Vt) THEN
				ZD_VtU_PRIVOD := ZD_VtU_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Vt;
			ELSE 
				ZD_VtU_PRIVOD := 0.0;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKomandyNaOstanov 
		IF (_FUNCTION_ + PK_TU_OSTANOV_DVIZHENIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanova 
		IF (FlagRegulyatora_V_TU = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VYK_TIGELQ
	STATE Nachalo 
		START PROCESS VYK_TR;
		START PROCESS VYK_TU;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniya 
		IF ((NOT (PROCESS VYK_TR IN STATE ACTIVE)) AND (NOT (PROCESS VYK_TU IN STATE ACTIVE))) THEN
			IF ((PROCESS VYK_TR IN STATE STOP) AND (PROCESS VYK_TU IN STATE STOP)) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VYK_TIG_VR
	STATE Nachalo 
		ERROR PROCESS TIG_VR;
		ERROR PROCESS TIG_UGOL;
		ERROR PROCESS VKL_REG_Wt;
		SET NEXT;
	END_STATE
	
	STATE OtrabotkaOstanova 
		IF (ZD_Wt_PRIVOD < -MAKSIMALQNAYA_POPRAVKA_Wt) THEN
			ZD_Wt_PRIVOD := ZD_Wt_PRIVOD + MAKSIMALQNAYA_POPRAVKA_Wt;
		ELSE 
			IF (ZD_Wt_PRIVOD > MAKSIMALQNAYA_POPRAVKA_Wt) THEN
				ZD_Wt_PRIVOD := ZD_Wt_PRIVOD - MAKSIMALQNAYA_POPRAVKA_Wt;
			ELSE 
				ZD_Wt_PRIVOD := 0.0;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKomandyNaOstanov 
		IF (_FUNCTION_ + PK_TV_OSTANOV_DVIZHENIYA) THEN
			SET STATE KontrolqOstanova;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanova 
		IF (FlagRegulyatora_V_TV = VYKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_VzR
	STATE Nachalo 
		IF (_FUNCTION_ + ZD_VzR_PRIVOD < 0.0001) THEN
			IF (ZD_VzR >= 0.0) THEN
				ZD_VzR_PRIVOD := 0.00001;
			ELSE 
				ZD_VzR_PRIVOD := -0.00001;
			END_IF
		END_IF
		IF (_FUNCTION_ + PK_ZR_NACHALO_DVIZHENIYA_V + ZD_VzR_PRIVOD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_V_ZR = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_VzU
	STATE Nachalo 
		IF (_FUNCTION_ + ZD_VzU_PRIVOD < 0.0001) THEN
			IF (ZD_VzU >= 0.0) THEN
				ZD_VzU_PRIVOD := 0.00001;
			ELSE 
				ZD_VzU_PRIVOD := -0.00001;
			END_IF
		END_IF
		IF (_FUNCTION_ + PK_ZU_NACHALO_DVIZHENIYA_V + ZD_VzU_PRIVOD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_V_ZU = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_Wz
	STATE Nachalo 
		IF (_FUNCTION_ + PK_ZV_NACHALO_DVIZHENIYA_V + ZD_Wz_PRIVOD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_V_ZV = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_VtR
	STATE Nachalo 
		IF (_FUNCTION_ + ZD_VtR_PRIVOD < 0.0001) THEN
			IF (ZD_VtR >= 0.0) THEN
				ZD_VtR_PRIVOD := 0.00001;
			ELSE 
				ZD_VtR_PRIVOD := -0.00001;
			END_IF
		END_IF
		IF (_FUNCTION_ + PK_TR_NACHALO_DVIZHENIYA_V + ZD_VtR_PRIVOD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_V_TR = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_XtR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TR_NACHALO_DVIZHENIYA_X + ZD_Xt) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_X_TR = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_VtU
	STATE Nachalo 
		IF (_FUNCTION_ + ZD_VtU_PRIVOD < 0.0001) THEN
			IF (ZD_VtU >= 0.0) THEN
				ZD_VtU_PRIVOD := 0.00001;
			ELSE 
				ZD_VtU_PRIVOD := -0.00001;
			END_IF
		END_IF
		IF (_FUNCTION_ + PK_TU_NACHALO_DVIZHENIYA_V + ZD_VtU_PRIVOD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_V_TU = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_XtU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TU_NACHALO_DVIZHENIYA_X + ZD_Xt) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_X_TU = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VKL_REG_Wt
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TV_NACHALO_DVIZHENIYA_V + ZD_Wt_PRIVOD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVklyucheniyaPrivoda 
		IF (FlagRegulyatora_V_TV = VKL) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV THEN
			SET STATE NarushenieRabotySPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieRabotySPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_OTRABOTKU_KOMANDY_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAT_DP
	VAR
		LP_TajmAut : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (PROCESS ZAT_KVP IN STATE ACTIVE) THEN
			ERROR PROCESS ZAT_KVP;
		END_IF
		IF (PROCESS ZAT_KNP IN STATE ACTIVE) THEN
			ERROR PROCESS ZAT_KNP;
		END_IF
		SET STATE AnalizPolozheniyaZatravki;
	END_STATE
	
	STATE AnalizPolozheniyaZatravki 
		IF (KOORD_ZAT <> KOORD_ZAT_NEOPREDELENA) THEN
			IF (FP_Mmonokristalla > MAKSIMALQNAYA_MASSA_ZATRAVKI_DP) THEN
				IF (_FUNCTION_ + PK_PIV_BOLQSHAYA_MASSA_ZATR_TARIROVKA_PO_DP_NEDOPUSTIMA) THEN
					ERROR;
				END_IF
			ELSE 
				ZD_Xz := -NP_Lz_OT_KVP_DO_DP_Lppz - 5.0;
				START PROCESS ZAT_UK;
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_PEREMESHENIE_ZATR_NEVOZMOZHNO_NET_KOORDINATY) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGrubogoPrihoda 
		IF (NOT (PROCESS ZAT_UK IN STATE ACTIVE)) THEN
			IF (PROCESS ZAT_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieLazeraDatchikaPrivyazki 
		U_LAZERA_DP := VKL;
		SET NEXT;
	END_STATE
	
	STATE KontrolqPerekrytiyaLuchaDP 
		IF (K_DP <> VKL) THEN
			SET NEXT;
		ELSE 
			SET STATE Soobshenie_DP_NeSrabotalPriPerekrytiiZatravkoderzhatelem;
		END_IF
	END_STATE
	
	STATE VychislenieZadaniyaVz 
		ZD_VzU := GRUBAYA_SKOROSTQ_ZATRAVKI;
		LP_TajmAut := (2.0 * ODNA_MINUTA * MAKSIMALQNYJ_VYLET_ZATRAVKI) / GRUBAYA_SKOROSTQ_ZATRAVKI;
		START PROCESS ZAT_US;
		SET NEXT;
	END_STATE
	
	STATE OzhidanieSrabatyvaniyaDP_NaPoyavlenieLucha 
		IF (K_DP = VKL) THEN
			ZD_VzR := -TOCHNAYA_SKOROSTQ_ZATRAVKI;
			LP_TajmAut := (2.0 * ODNA_SEKUNDA * GRUBAYA_SKOROSTQ_ZATRAVKI) / TOCHNAYA_SKOROSTQ_ZATRAVKI;
			START PROCESS ZAT_RS;
			SET NEXT;
		END_IF
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			SET STATE SoobshenieONeozhidannomOstanoveZatravki;
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE OtkazDP_PriPodqemeZatravki;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieSrabatyvaniyaDP_PoRabochejSkorosti 
		IF (K_DP <> VKL) THEN
			U_LAZERA_DP := VYKL;
			START PROCESS VYK_ZATRAVKU;
			SET NEXT;
		END_IF
		IF (NOT (PROCESS ZAT_RS IN STATE ACTIVE)) THEN
			SET STATE SoobshenieONeozhidannomOstanoveZatravki;
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE OtkazDP_PriOpuskaniiZatravki;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOstanovaZatravki 
		IF (NOT (PROCESS VYK_ZATRAVKU IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_ZATRAVKU IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VychislenieOpredelyaemyhParametrov 
		FlagLmonokristalla := VKL;
		FP_Lmonokristalla := NP_Lz_OT_KVP_DO_DP_Lppz + FP_Xz;
		SET STATE PeredachaSoobKoordZatrOttarirovana;
	END_STATE
	
	STATE PeredachaSoobKoordZatrOttarirovana 
		IF (_FUNCTION_ + PK_PIV_KOORDINATA_ZATRAVKI_PO_DP_OTTARIROVANA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaKoordinatyDP 
		IF (_FUNCTION_ + PK_PIV_DLINA_ZATRAVOCHNOGO_MONOKRISTALLA + FP_Lmonokristalla) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Soobshenie_DP_NeSrabotalPriPerekrytiiZatravkoderzhatelem 
		IF (_FUNCTION_ + PK_PIV_DP_NE_SRABOTAL_PRI_PEREKRYTII_ZATRAVKODERZHATELEM) THEN
			SET STATE AvarijnoeVyklyuchenieDP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OtkazDP_PriPodqemeZatravki 
		START PROCESS VYK_ZATRAVKU;
		SET NEXT;
	END_STATE
	
	STATE Soobshenie_DP_NeSrabotalPriPodqemeZatravki 
		IF (_FUNCTION_ + PK_PIV_DP_NE_SRABOTAL_PRI_PODQEME_ZATRAVKI) THEN
			SET STATE AvarijnoeVyklyuchenieDP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieONeozhidannomOstanoveZatravki 
		IF (_FUNCTION_ + PK_PIV_NEOZHIDANNYJ_OSTANOV_ZATRAVKI_V_REZHIME_PRIVYAZKI) THEN
			SET STATE AvarijnoeVyklyuchenieDP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OtkazDP_PriOpuskaniiZatravki 
		START PROCESS VYK_ZATRAVKU;
		SET NEXT;
	END_STATE
	
	STATE Soobshenie_DP_NeSrabotalPriOpuskaniiZatravki 
		IF (_FUNCTION_ + PK_PIV_DP_NE_SRABOTAL_PRI_OPUSKANII_ZATRAVKI) THEN
			SET STATE AvarijnoeVyklyuchenieDP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AvarijnoeVyklyuchenieDP 
		U_LAZERA_DP := VYKL;
		ERROR;
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RaschetRasstoyaniyaZatravka_Rasplav
	STATE Nachalo 
		IF ((KOORD_ZAT = KOORD_ZAT_NEOPREDELENA) OR (KOORD_TIG = KOORD_TIG_NEOPREDELENA)) THEN
			FlagLmonokristalla := VYKL;
			FlagL_KZ_UR := VYKL;
		ELSE 
			IF ((K_DATCHIKA_KASANIYA = VKL) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
				FlagL_KZ_UR := VKL;
				FP_L_KZ_UR := 0.0;
				IF (FlagHur_DU = VKL) THEN
					FlagLmonokristalla := VKL;
					FP_Lmonokristalla := NP_Lz_OT_KVP_DO_STYKA_NK + NP_L_OT_STYKA_NK_DO_PNUR_L1 + FP_Xz - ZD_Hur;
				ELSE 
					FlagLmonokristalla := VKL;
					FP_Lmonokristalla := NP_Lz_OT_KVP_DO_STYKA_NK + NP_L_OT_STYKA_NK_DO_PNUR_L1 + FP_Xz - ZD_Hur;
				END_IF
			ELSE 
				IF (FlagHur_DU) THEN
					FlagL_KZ_UR := VKL;
					FP_L_KZ_UR := NP_Lz_OT_KVP_DO_STYKA_NK + NP_L_OT_STYKA_NK_DO_PNUR_L1 + FP_Xz - FP_Lmonokristalla - ZD_Hur;
				ELSE 
					FlagL_KZ_UR := VYKL;
					FP_L_KZ_UR := NP_Lz_OT_KVP_DO_STYKA_NK + NP_L_OT_STYKA_NK_DO_PNUR_L1 + FP_Xz - FP_Lmonokristalla - ZD_Hur;
				END_IF
			END_IF
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ZAT_KVP
	VAR
		LP_TajmAut : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (PROCESS ZAT_KNP IN STATE ACTIVE) THEN
			ERROR PROCESS ZAT_KNP;
		END_IF
		IF (PROCESS ZAT_DP IN STATE ACTIVE) THEN
			ERROR PROCESS ZAT_DP;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE NeV_KVP_liZatravka 
		IF (KOORD_ZAT = ZAT_V_KVP) THEN
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE AnalizPolozheniyaZatravki 
		IF (KOORD_ZAT <> KOORD_ZAT_NEOPREDELENA) THEN
			ZD_Xz := -GRUBAYA_OKRESTNOSTQ_KONTSEVIKA;
			START PROCESS ZAT_UK;
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_POTERYA_KOORD_ZATR_PRI_DVIZHENII_K_KVP) THEN
				LP_TajmAut := 27 * ODNA_MINUTA;
				SET STATE NaezdNaKVP_poGrubomuZadaniyuVz;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGrubogoPrihoda 
		IF (NOT (PROCESS ZAT_UK IN STATE ACTIVE)) THEN
			IF (PROCESS ZAT_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				LP_TajmAut := 15 * ODNA_SEKUNDA;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NaezdNaKVP_poGrubomuZadaniyuVz 
		ZD_VzU := GRUBAYA_SKOROSTQ_ZATRAVKI;
		START PROCESS ZAT_US;
		SET NEXT;
	END_STATE
	
	STATE KontrolqPrihodaZatravkiV_KVP 
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE SoobshenieKontsevikaNet;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKoordinaty 
		IF (KOORD_ZAT = ZAT_V_KVP) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE SoobshenieKontsevikaNet 
		IF (_FUNCTION_ + PK_PIV_KONTSEVIK_ZAT_KVP_NE_OBNARUZHEN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAT_KNP
	VAR
		LP_TajmAut : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (PROCESS ZAT_KVP IN STATE ACTIVE) THEN
			ERROR PROCESS ZAT_KVP;
		END_IF
		IF (PROCESS ZAT_DP IN STATE ACTIVE) THEN
			ERROR PROCESS ZAT_DP;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE NeV_KNP_liZatravka 
		IF (KOORD_ZAT = ZAT_V_KNP) THEN
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE AnalizPolozheniyaZatravki 
		IF (KOORD_ZAT <> KOORD_ZAT_NEOPREDELENA) THEN
			ZD_Xz := -NP_Lz_OT_KVP_DO_KNP + GRUBAYA_OKRESTNOSTQ_KONTSEVIKA;
			START PROCESS ZAT_UK;
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_POTERYA_KOORD_ZATR_PRI_DVIZHENII_K_KNP) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGrubogoPrihoda 
		IF (NOT (PROCESS ZAT_UK IN STATE ACTIVE)) THEN
			IF (PROCESS ZAT_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				LP_TajmAut := 15 * ODNA_SEKUNDA;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NaezdNaKVP_poGrubomuZadaniyuVz 
		ZD_VzU := -GRUBAYA_SKOROSTQ_ZATRAVKI;
		START PROCESS ZAT_US;
		SET NEXT;
	END_STATE
	
	STATE KontrolqPrihodaZatravkiV_KNP 
		IF (NOT (PROCESS ZAT_US IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE SoobshenieKontsevikaNet;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKoordinaty 
		IF (KOORD_ZAT = ZAT_V_KNP) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE SoobshenieKontsevikaNet 
		IF (_FUNCTION_ + PK_PIV_KONTSEVIK_ZAT_KNP_NE_OBNARUZHEN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS USTANOVITQ_KOORDINATU_ZATRAVKI
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ + PK_ZU_INITSIALIZIROVATQ_KOORDINATU + UstanovochnayaKoordinataZatravki) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS DVIZHENIE_ZATRAVKI_PO_NOMINALQNYM_KOEFFITSIENTAM
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ + PK_ZU_DVIZHENIE_PO_NOMINALQNYM_KOEFFITSIENTAM) THEN
			NP_Koef_V_ZR := NP_Nominalqnyj_Koef_V_ZR;
			NP_Koef_X_ZR := NP_Nominalqnyj_Koef_X_ZR;
			NP_Koef_V_ZU := NP_Nominalqnyj_Koef_V_ZU;
			NP_Koef_X_ZU := NP_Nominalqnyj_Koef_X_ZU;
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshPIV_1 
		IF (_FUNCTION_ + IZMN_NP_KOEF_V_ZR + NP_Koef_V_ZR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshPIV_2 
		IF (_FUNCTION_ + IZMN_NP_KOEF_X_ZR + NP_Koef_X_ZR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshPIV_3 
		IF (_FUNCTION_ + IZMN_NP_KOEF_V_ZU + NP_Koef_V_ZU) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshPIV_4 
		IF (_FUNCTION_ + IZMN_NP_KOEF_X_ZU + NP_Koef_X_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RASSCHITATQ_REALQNYE_KOEFFITSIENTY_ZATRAVKI
	VAR
		LP_Koeffitsient : REAL;
	END_VAR
	
	STATE RaschetZnachenij 
		LP_Koeffitsient := -Realqnaya_Xz_Izmerennaya_Operatorom / FP_Xz;
		NP_Koef_V_ZR := LP_Koeffitsient * NP_Nominalqnyj_Koef_V_ZR;
		NP_Koef_X_ZR := LP_Koeffitsient * NP_Nominalqnyj_Koef_X_ZR;
		NP_Koef_V_ZU := LP_Koeffitsient * NP_Nominalqnyj_Koef_V_ZU;
		NP_Koef_X_ZU := LP_Koeffitsient * NP_Nominalqnyj_Koef_X_ZU;
		START PROCESS PeredachaNP_Koef_V_ZR;
		START PROCESS PeredachaNP_Koef_X_ZR;
		START PROCESS PeredachaNP_Koef_V_ZU;
		START PROCESS PeredachaNP_Koef_X_ZU;
		START PROCESS PeredachaPIV_Koef_VX_ZR_U;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaPIV_Koef_VX_ZR_U
	STATE Nachalo 
		IF (_FUNCTION_ + IZMN_NP_KOEF_V_ZR + NP_Koef_V_ZR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaNP_Koef_X_ZR 
		IF (_FUNCTION_ + IZMN_NP_KOEF_X_ZR + NP_Koef_X_ZR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaNP_Koef_V_ZU 
		IF (_FUNCTION_ + IZMN_NP_KOEF_V_ZU + NP_Koef_V_ZU) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaNP_Koef_X_ZU 
		IF (_FUNCTION_ + IZMN_NP_KOEF_X_ZU + NP_Koef_X_ZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_DP
	STATE Nachalo 
		NP_Lz_OT_KVP_DO_DP_Lppz := _FUNCTION_ + FP_Xz;
		SET NEXT;
	END_STATE
	
	STATE PeredachaV_PIV 
		IF (_FUNCTION_ + IZMN_NP_Lz_OT_KVP_DO_DP_Lppz + NP_Lz_OT_KVP_DO_DP_Lppz) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PRINYATQ_FP_Xz_ZA_RASSTOYANIE_OT_KVP_ZATRAVKI_DO_STYKA_NK
	STATE Nachalo 
		NP_Lz_OT_KVP_DO_STYKA_NK := _FUNCTION_ + FP_Xz;
		SET NEXT;
	END_STATE
	
	STATE PeredachaV_PIV 
		IF (_FUNCTION_ + IZMN_NP_Lz_OT_KVP_DO_STYKA_NK + NP_Lz_OT_KVP_DO_STYKA_NK) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS TIG_PVK
	STATE Nachalo 
		IF (PROCESS TIG_KNP IN STATE ACTIVE) THEN
			ERROR PROCESS TIG_KNP;
		END_IF
		IF (PROCESS TIG_KVP IN STATE ACTIVE) THEN
			ERROR PROCESS TIG_KVP;
		END_IF
		SET STATE AnalizPolozheniyaTiglya;
	END_STATE
	
	STATE AnalizPolozheniyaTiglya 
		IF (KOORD_TIG = TIG_V_POLOZHENII_PZUR) THEN
			STOP;
		ELSE 
			IF (KOORD_TIG = KOORD_TIG_NEOPREDELENA) THEN
				SET STATE PeredachaSoobsheniyaNetKoordTig;
			ELSE 
				IF (FlagHur = VYKL) THEN
					SET STATE PeredachaSoobsheniyaNetUrovnyaRasplava;
				ELSE 
					ZD_Xt := NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR - FP_GlubinaRasplava + ZD_Hur;
					START PROCESS TIG_UK;
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE AnalizVypolneniyaPeremesheniyaTig 
		IF (NOT (PROCESS TIG_UK IN STATE ACTIVE)) THEN
			IF (PROCESS TIG_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaNetKoordTig 
		IF (_FUNCTION_ + PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_KOORDINATY) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaNetUrovnyaRasplava 
		IF (_FUNCTION_ + PK_PIV_PEREMESHENIE_TIG_NEVOZMOZHNO_NET_UROVNYA_RASPLAVA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS TIG_KNP
	VAR
		LP_TajmAut : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (PROCESS TIG_KVP IN STATE ACTIVE) THEN
			ERROR PROCESS TIG_KVP;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE NeV_KNP_liTigelq 
		IF (KOORD_TIG = TIG_V_KNP) THEN
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE AnalizPolozheniyaTiglya 
		IF (KOORD_TIG <> KOORD_TIG_NEOPREDELENA) THEN
			ZD_Xt := GRUBAYA_OKRESTNOSTQ_KONTSEVIKA;
			START PROCESS TIG_UK;
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_POTERYA_KOORD_TIG_PRI_DVIZHENII_K_KNP) THEN
				LP_TajmAut := 8 * ODNA_MINUTA;
				SET STATE NaezdNaKNP_poGrubomuZadaniyuVt;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGrubogoPrihoda 
		IF (NOT (PROCESS TIG_UK IN STATE ACTIVE)) THEN
			IF (PROCESS TIG_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				LP_TajmAut := 15 * ODNA_SEKUNDA;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NaezdNaKNP_poGrubomuZadaniyuVt 
		ZD_VtU := -GRUBAYA_SKOROSTQ_TIGLYA;
		START PROCESS TIG_US;
		SET NEXT;
	END_STATE
	
	STATE KontrolqPrihodaTiglyaV_KNP 
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			SET NEXT;
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE SoobshenieKontsevikaNet;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKoordinaty 
		IF (KOORD_TIG = TIG_V_KNP) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE SoobshenieKontsevikaNet 
		IF (_FUNCTION_ + PK_PIV_KONTSEVIK_TIG_KNP_NE_OBNARUZHEN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS TIG_KVP
	VAR
		LP_TajmAut : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (PROCESS TIG_KNP IN STATE ACTIVE) THEN
			ERROR PROCESS TIG_KNP;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE NeV_KVP_liTigelq 
		IF (KOORD_TIG = TIG_V_KVP) THEN
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE AnalizPolozheniyaTiglya 
		IF (KOORD_TIG <> KOORD_TIG_NEOPREDELENA) THEN
			ZD_Xt := NP_Lt_OT_KNP_DO_KVP - GRUBAYA_OKRESTNOSTQ_KONTSEVIKA;
			START PROCESS TIG_UK;
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_POTERYA_KOORD_TIG_PRI_DVIZHENII_K_KVP) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieGrubogoPrihoda 
		IF (NOT (PROCESS TIG_UK IN STATE ACTIVE)) THEN
			IF (PROCESS TIG_UK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				LP_TajmAut := 15 * ODNA_SEKUNDA;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NaezdNaKVP_poGrubomuZadaniyuVt 
		ZD_VtU := GRUBAYA_SKOROSTQ_TIGLYA;
		START PROCESS TIG_US;
		SET NEXT;
	END_STATE
	
	STATE KontrolqPrihodaTiglyaV_KVP 
		IF (NOT (PROCESS TIG_US IN STATE ACTIVE)) THEN
			IF (KOORD_TIG = TIG_V_KVP) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
		TIMEOUT LP_TajmAut THEN
			SET STATE SoobshenieKontsevikaNet;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieKontsevikaNet 
		IF (_FUNCTION_ + PK_PIV_KONTSEVIK_TIG_KVP_NE_OBNARUZHEN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS USTANOVITQ_KOORDINATU_TIGLYA
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ + PK_TU_INITSIALIZIROVATQ_KOORDINATU + UstanovochnayaKoordinataTiglya) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_KNP_TIGLYA_DO_KVP
	STATE Nachalo 
		NP_Lt_OT_KNP_DO_KVP := _FUNCTION_ + FP_Xt;
		SET NEXT;
	END_STATE
	
	STATE PeredachaV_PIV 
		IF (_FUNCTION_ + IZMN_NP_Lt_OT_KNP_DO_KVP + NP_Lt_OT_KNP_DO_KVP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PRINYATQ_FP_Xt_ZA_RASSTOYANIE_OT_DNA_TIGLYA_V_KNP_DO_PNUR
	STATE Nachalo 
		NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR := _FUNCTION_ + FP_Xt;
		SET NEXT;
	END_STATE
	
	STATE PeredachaV_PIV 
		IF (_FUNCTION_ + IZMN_NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR + NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZapuskTestaOZU_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_TEST_OZU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS REZHIM_IZMERENIYA_TDD_MP
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_REZHIM_IZMERENIYA_MP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS REZHIM_IZMERENIYA_TDD_BP
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_REZHIM_IZMERENIYA_BP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PereklyuchitqVideovyhodNaKameruBolqshogoPolya
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_VIDEOVYHOD_NA_KAMERU_BP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS REZHIM_ATTESTATSII_BP_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_REZHIM_ATTESTATSII_BP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZapuskTesta_BP_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_TEST_BP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachatqKalibrovkuBolqshogoPolya
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_NACHALO_KALIBROVKI_BP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachatqKalibrovkuBolqshogoPolya_PLYUS
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_NACHALO_KALIBROVKI_BP_PLYUS) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PereklyuchitqVideovyhodNaKameruMalogoPolya
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_VIDEOVYHOD_NA_KAMERU_MP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS REZHIM_ATTESTATSII_MP_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_REZHIM_ATTESTATSII_MP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZapuskTesta_MP_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_TEST_MP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachatqKalibrovkuMalogoPolya
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_NACHALO_KALIBROVKI_MP) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachatqKalibrovkuMalogoPolya_PLYUS
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_NACHALO_KALIBROVKI_MP_PLYUS) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KonetsRabotyTDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_KONETS_RABOTY) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS SnyatieKoeffitsientovKalibrovkiIzTDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_TDD_NACHALO_SNYATIYA_KOEFFITSIENTOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo1 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_CTG_NACHALO_PEREDACHI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo2 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_KY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo3 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_X) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo4 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGZERO_TG) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo5 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_CTG) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo6 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_KY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo7 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_X) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo8 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_BIGPLUS_TG) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo9 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_CTG) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo10 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_KY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo11 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_X) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo12 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLZERO_TG) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo13 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_CTG) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo14 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_KY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo15 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_X) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo16 
		IF (_FUNCTION_ + PK_TDD_IZMN_NP_SMALLPLUS_TG_POSLEDNIJ_PARAMETR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza_1min 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE KoeffitsientovTarirovkiTDDNet;
		END_TIMEOUT
	END_STATE
	
	STATE KoeffitsientovTarirovkiTDDNet 
		IF (_FUNCTION_ + PK_PIV_TDD_TAJMAUT_SNYATIYA_KOEFFITSIENTOV_ISTEK) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_GOTOV_K_RABOTE) THEN
			START PROCESS KontrolqIzmeneniyaFP_Wz_dlyaTDD;
			START PROCESS KontrolqIzmeneniyaFP_Wt_dlyaTDD;
			START PROCESS KontrolqIzmeneniyaFP_Hur_dlyaTDD;
			START PROCESS KontrolqIzmeneniyaZD_Hur_dlyaTDD;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosOshibkiV_TDD
	STATE Nachalo 
		IF (_FUNCTION_ + PK_TDD_SBROS_OSHIBKI_VNUTRENNEJ) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaFP_Wz_dlyaTDD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Wz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Wz) THEN
			LP_Predydushee := FP_Wz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiDlyaTDD 
		IF (_FUNCTION_ + PK_TDD_FP_Wz + FP_Wz) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT TAJMAUT_NA_PEREDACHU_DANNYH_V_TDD THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaFP_Wt_dlyaTDD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Wt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Wt) THEN
			LP_Predydushee := FP_Wt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiDlyaTDD 
		IF (_FUNCTION_ + PK_TDD_FP_Wt + FP_Wt) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT TAJMAUT_NA_PEREDACHU_DANNYH_V_TDD THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaFP_Hur_dlyaTDD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Hur);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Hur) THEN
			LP_Predydushee := FP_Hur;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiDlyaTDD 
		IF (_FUNCTION_ + PK_TDD_FP_Hur + FP_Hur) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT TAJMAUT_NA_PEREDACHU_DANNYH_V_TDD THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZD_Hur_dlyaTDD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Hur);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Hur) THEN
			LP_Predydushee := ZD_Hur;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiDlyaTDD 
		IF (_FUNCTION_ + PK_TDD_ZD_Hur + ZD_Hur) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_TDD THEN
			SET STATE NarushenieSvyaziS_TDD;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT TAJMAUT_NA_PEREDACHU_DANNYH_V_TDD THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_TDD 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_TDD) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS NachaloAdaptatsiiLazera_0_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_NACHALO_ADAPTATSII_LAZERA_0) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachaloAdaptatsiiLazera_1_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_NACHALO_ADAPTATSII_LAZERA_1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PrervatqAdaptatsiyu_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_PRERVATQ_ADARPTATSIYU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VklVychislenieTemnovogoSignala_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_VKL_VYCHISLENIE_TEMNOVOGO_SIGNALA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VykVychislenieTemnovogoSignala_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_VYK_VYCHISLENIE_TEMNOVOGO_SIGNALA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachaloKalibrovki_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_NACHALO_KALIBROVKI) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PrervatqKalibrovku_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_PRERVATQ_KALIBROVKU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KalibrovkaPoTochkeSNomeromDlya_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_KALIBROVKA_PO_TOCHKE + FP_TochkiDlya_DU) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS NachaloRezhimaOtladkiDU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_NACHALO_REZHIMA_OTLADKI) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KonetsRezhimaOtladkiDU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_KONETS_REZHIMA_OTLADKI) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VklyuchitqLazer0_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_VKLYUCHITQ_LAZER_0) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VklyuchitqLazer1_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_VKLYUCHITQ_LAZER_1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VyklyuchitqLazer0_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_VYKLYUCHITQ_LAZER_0) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS VyklyuchitqLazer1_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_VYKLYUCHITQ_LAZER_1) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZapuskTestaDU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_ZAPUSK_TESTA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KonetsRabotyDU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_KONETS_RABOTY) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS SnyatieKoeffitsientovKalibrovkiIzDU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_DU_NACHALO_SNYATIYA_KOEFFITSIENTOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo1 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_AH_NACHALO_PEREDACHI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo2 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_BH) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo3 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_CH_POSLEDNIJ_PARAMETR) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza_1min 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE KoeffitsientovTarirovkiDUNet;
		END_TIMEOUT
	END_STATE
	
	STATE KoeffitsientovTarirovkiDUNet 
		IF (_FUNCTION_ + PK_PIV_DU_TAJMAUT_SNYATIYA_KOEFFITSIENTOV_ISTEK) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SnyatieVremeniEkspozitsiiLazera0
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_DU_NACHALO_SNYATIYA_EKSPOZITSII_LAZERA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo1 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_EXPOSURE_TIME0) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU1;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza_1min 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE VremeniEkspozitsiiLazDUNet;
		END_TIMEOUT
	END_STATE
	
	STATE VremeniEkspozitsiiLazDUNet 
		IF (_FUNCTION_ + PK_PIV_DU_TAJMAUT_SNYATIYA_VREMENI_EKSPOZ_LAZ_ISTEK) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU1 
		IF (_FUNCTION_ + PK_PIV_DU_TAJMAUT_SNYATIYA_VREMENI_EKSPOZ_LAZ_ISTEK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SnyatieVremeniEkspozitsiiLazera1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_DU_NACHALO_SNYATIYA_EKSPOZITSII_LAZERA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Nachalo1 
		IF (_FUNCTION_ + PK_DU_IZMN_NP_EXPOSURE_TIME1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU1;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza_1min 
		TIMEOUT ODNA_MINUTA THEN
			SET STATE VremeniEkspozitsiiLazDUNet;
		END_TIMEOUT
	END_STATE
	
	STATE VremeniEkspozitsiiLazDUNet 
		IF (_FUNCTION_ + PK_PIV_DU_TAJMAUT_SNYATIYA_VREMENI_EKSPOZ_LAZ_ISTEK) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU1 
		IF (_FUNCTION_ + PK_PIV_DU_TAJMAUT_SNYATIYA_VREMENI_EKSPOZ_LAZ_ISTEK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_DU
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DU_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DU THEN
			SET STATE NarushenieSvyaziS_DU;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_DU 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DU) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_DTN
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DTN_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTN) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ZapuskTestaDTN
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DTN_ZAPUSK_TESTA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTN THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTN) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RasschitatqTsm_DTN
	STATE Nachalo 
		IF (FlagDTN) THEN
			NP_Tsm_DTN := T_BAZOVOE_DTN - FP_Tdtn;
			SET NEXT;
		ELSE 
			SET STATE NetIshodnogo;
		END_IF
	END_STATE
	
	STATE PodtverzhdenieRasschetaNP 
		IF (_FUNCTION_ + IZMN_NP_Tsm_DTN + NP_Tsm_DTN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetIshodnogo 
		IF (_FUNCTION_ + PK_PIV_T_SMESHENIYA_NE_RASSCHITANA_NET_ISHODNOGO_DTN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_DTR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DTR_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTR THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ZapuskTestaDTR
	STATE Nachalo 
		IF (_FUNCTION_ + PK_DTR_ZAPUSK_TESTA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_DTR THEN
			SET STATE NarushenieSvyaziS_Datchikom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_Datchikom 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_DTR) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RasschitatqTsm_DTR
	STATE Nachalo 
		IF (FlagDTR) THEN
			NP_Tsm_DTR := T_BAZOVOE_DTR - FP_Tdtr;
			SET NEXT;
		ELSE 
			SET STATE NetIshodnogo;
		END_IF
	END_STATE
	
	STATE PodtverzhdenieRasschetaNP 
		IF (_FUNCTION_ + IZMN_NP_Tsm_DTR + NP_Tsm_DTR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetIshodnogo 
		IF (_FUNCTION_ + PK_PIV_T_SMESHENIYA_NE_RASSCHITANA_NET_ISHODNOGO_DTR) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS SbrosBitaInitsializatsiiV_IP2K_K1
	STATE Nachalo 
		IF (_FUNCTION_ + PK_IP2K_K1_GOTOV_K_RABOTE) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			_VOID_ := _FUNCTION_;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaVK
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk1 > TEMPERATURA_VK_50) AND (FP_Tvk1 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk1 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk1 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk1 <= TEMPERATURA_VK_50) OR (FP_Tvk1 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk1 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaKryshkiNK
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk2 > TEMPERATURA_VK_50) AND (FP_Tvk2 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk2 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk2 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk2 <= TEMPERATURA_VK_50) OR (FP_Tvk2 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk2 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaNK
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk3 > TEMPERATURA_VK_50) AND (FP_Tvk3 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk3 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk3 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk3 <= TEMPERATURA_VK_50) OR (FP_Tvk3 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk3 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaBazovojPlity
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk4 > TEMPERATURA_VK_50) AND (FP_Tvk4 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk4 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk4 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk4 <= TEMPERATURA_VK_50) OR (FP_Tvk4 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk4 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaKollektoraVakuumnogo
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk5 > TEMPERATURA_VK_50) AND (FP_Tvk5 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk5 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk5 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk5 <= TEMPERATURA_VK_50) OR (FP_Tvk5 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk5 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaSHtokaTiglya
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk6 > TEMPERATURA_VK_50) AND (FP_Tvk6 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk6 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_SHTOKA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk6 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_SHTOKA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk6 <= TEMPERATURA_VK_50) OR (FP_Tvk6 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_SHTOKA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk6 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyOhlazhdeniyaTokovvodov
	STATE Nachalo 
		SET NEXT;
		IF ((FP_Tvk7 > TEMPERATURA_VK_50) AND (FP_Tvk7 <= TEMPERATURA_VK_70)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_Tvk7 > TEMPERATURA_VK_70) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_V_MAGISTRALI_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk7 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_V_MAGISTRALI_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_Tvk7 <= TEMPERATURA_VK_50) OR (FP_Tvk7 > TEMPERATURA_VK_70)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__PEREGREV_VODY_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_Tvk7 <= TEMPERATURA_VK_70) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyVodyNaVhode
	STATE Nachalo 
		SET NEXT;
		IF (FP_Tvk8 > TEMPERATURA_VK_30) THEN
			SET STATE Peregrev;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_TEMPERATURY_VODY_NA_VHODE) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_Tvk8 > TEMPERATURA_VK_30) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_PEREGREV_VODY_NA_VHODE) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF (FP_Tvk8 <= (TEMPERATURA_VK_30 - 1.0)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniyaMN
	STATE Nachalo 
		IF ((NOT K_MNmah) AND (K_MNmin)) THEN
			IF (_FUNCTION_ + PK_PIV_DAVLENIE_VODY_V_NORME) THEN
				SET STATE SmenaSobytiyaSred;
			END_IF
		ELSE 
			IF ((NOT K_MNmah) AND (NOT K_MNmin)) THEN
				IF (_FUNCTION_ + PK_PIV_DAVLENIE_VODY_NIZHE_NORMY) THEN
					SET STATE SmenaSobytiyaNizheNormy;
				END_IF
			ELSE 
				IF ((K_MNmah) AND (K_MNmin)) THEN
					IF (_FUNCTION_ + PK_PIV_DAVLENIE_VODY_VYSHE_NORMY) THEN
						SET STATE SmenaSobytiyaVysheNormy;
					END_IF
				ELSE 
					IF (_FUNCTION_ + PK_PIV_OTKAZ_MN) THEN
						SET STATE SmenaSobytiyaOshibka;
					END_IF
				END_IF
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSobytiyaSred 
		IF (K_MNmah OR (NOT K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaNizheNormy 
		IF (K_MNmah OR (K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaVysheNormy 
		IF ((NOT K_MNmah) OR (NOT K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaOshibka 
		IF ((NOT K_MNmah) OR (K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiMN
	STATE Nachalo 
		IF ((NOT K_MNmah) AND (K_MNmin)) THEN
			IF (_FUNCTION_ + PK_PIV_SNYATQ_OSHIBKU__MN_V_NORME) THEN
				SET STATE SmenaSobytiyaSred;
			END_IF
		ELSE 
			IF ((NOT K_MNmah) AND (NOT K_MNmin)) THEN
				IF (_FUNCTION_ + PK_PIV_AVARIYA__DAVLENIE_VODY_NIZHE_NORMY) THEN
					IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
						START PROCESS DoOtmeny2min;
					END_IF
					SET STATE SmenaSobytiyaNizheNormy;
				END_IF
			ELSE 
				IF ((K_MNmah) AND (K_MNmin)) THEN
					IF (_FUNCTION_ + PK_PIV_AVARIYA__DAVLENIE_VODY_VYSHE_NORMY) THEN
						IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
							START PROCESS DoOtmeny2min;
						END_IF
						SET STATE SmenaSobytiyaVysheNormy;
					END_IF
				ELSE 
					IF (_FUNCTION_ + PK_PIV_AVARIYA__OTKAZ_MN) THEN
						IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
							START PROCESS DoOtmeny2min;
						END_IF
						SET STATE SmenaSobytiyaOshibka;
					END_IF
				END_IF
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSobytiyaSred 
		IF (K_MNmah OR (NOT K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaNizheNormy 
		IF (K_MNmah OR (K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaVysheNormy 
		IF ((NOT K_MNmah) OR (NOT K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE SmenaSobytiyaOshibka 
		IF ((NOT K_MNmah) OR (K_MNmin)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaVK_RP1
	STATE Nachalo 
		IF (K_RP1 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP1 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP1 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaKryshkiVK_RP2
	STATE Nachalo 
		IF (K_RP2 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP2 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP2 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaNK_RP3
	STATE Nachalo 
		IF (K_RP3 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP3 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP3 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaBazovojPlity_RP4
	STATE Nachalo 
		IF (K_RP4 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP4 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP4 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaKollektoraVakuumnogo_RP5
	STATE Nachalo 
		IF (K_RP5 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP5 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP5 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaSHtokaPrivodaTiglya_RP6
	STATE Nachalo 
		IF (K_RP6 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_SHTOKA_PRIVODA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP6 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_SHTOKA_PRIVODA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP6 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvariiOhlazhdeniyaTokovvodov_RP7
	STATE Nachalo 
		IF (K_RP7 = NET_VODY) THEN
			SET NEXT;
		ELSE 
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__NET_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidanieIscheznoveniyaAvarii 
		IF (K_RP7 = ESTQ_VODA) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_NORMA_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieAvarii 
		IF (K_RP7 = NET_VODY) THEN
			SET STATE Avariya;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS Kontrolq_K_RP8_PriVklyucheniiAVD
	STATE Nachalo 
		IF (K_RP8 = NET_VODY) THEN
			IF (_FUNCTION_ + PK_PIV_PREDUPREZHDENIE__NET_OHL_AVD) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_NORMA_OHL_AVD) THEN
				STOP;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaVK_RP1
	STATE Nachalo 
		IF (K_RP1 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP1 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_VK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP1 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaKryshkiNK_RP2
	STATE Nachalo 
		IF (K_RP2 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP2 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_KRYSHKI_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP2 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaNK_RP3
	STATE Nachalo 
		IF (K_RP3 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP3 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_NK) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP3 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaBazovojPlity_RP4
	STATE Nachalo 
		IF (K_RP4 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP4 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_BAZOVOJ_PLITY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP4 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaKollektoraVakuumnogo_RP5
	STATE Nachalo 
		IF (K_RP5 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP5 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_KOLLEKTORA_VAKUUMNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP5 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaSHtokaPrivodaTiglya_RP6
	STATE Nachalo 
		IF (K_RP6 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_SHTOKA_PRIVODA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP6 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_SHTOKA_PRIVODA_TIGLYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP6 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaTokovvodov_RP7
	STATE Nachalo 
		IF (K_RP7 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP7 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_TOKOVVODOV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP7 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqReleProtokaOhlazhdeniyaAVD_RP8
	STATE Nachalo 
		IF (K_RP8 = ESTQ_VODA) THEN
			SET NEXT;
		ELSE 
			SET STATE NetOhlazhdeniya;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_ESTQ_OHL_AVD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaVody 
		IF (K_RP8 = NET_VODY) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NetOhlazhdeniya 
		IF (_FUNCTION_ + PK_PIV_NET_OHL_AVD) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaVody 
		IF (K_RP8 = ESTQ_VODA) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSostoyaniya_K_V1
	STATE Nachalo 
		IF (K_V1 = VKL) THEN
			SET STATE Norma;
		ELSE 
			SET STATE KlapanSrabotal;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_PREDOHRANITELQNYJ_KLAPAN_V_NORME) THEN
			SET STATE Pereklyuchenie1_0;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KlapanSrabotal 
		IF (_FUNCTION_ + PK_PIV_SRABOTAL_PREDOHRANITELQNYJ_KLAPAN) THEN
			SET STATE Pereklyuchenie0_1;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Pereklyuchenie0_1 
		IF (K_V1) THEN
			SET STATE Norma;
		END_IF
	END_STATE
	
	STATE Pereklyuchenie1_0 
		IF (NOT K_V1) THEN
			SET STATE KlapanSrabotal;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqAvarii_K_V1
	STATE Nachalo 
		IF (NOT K_V1) THEN
			SET STATE PeredachaSoobsheniya;
		ELSE 
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_AVARIYA__SRABOTAL_PREDOHRANITELQNYJ_KLAPAN) THEN
			SET STATE ProverkaAktivnostiDoOtmeny2min;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaAktivnostiDoOtmeny2min 
		IF (PROCESS DoOtmeny2min IN STATE ACTIVE) THEN
			SET STATE Tajmaut2min;
		ELSE 
			START PROCESS DoOtmeny2min;
			SET STATE Tajmaut2min;
		END_IF
	END_STATE
	
	STATE Tajmaut2min 
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Tajmaut2min;
	END_STATE
	
END_PROCESS

PROCESS KontrolqPotokaOhlazhdZHidkosti_IP2K_K1
	STATE Nachalo 
		SET STATE Norma;
		IF (FP_PotokOhlazhdVody_IP2K_K1 < NP_UstavkaPotokaOhlZHidkosti_IP2K_K1) THEN
			SET STATE NizheNormy;
		END_IF
		IF (FP_PotokOhlazhdVody_IP2K_K1 > VRH_GRAN_POTOKA_OHL_ZHIDK_IP) THEN
			SET STATE VysheNormy;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaDiapazona 
		IF ((FP_PotokOhlazhdVody_IP2K_K1 < NP_UstavkaPotokaOhlZHidkosti_IP2K_K1) OR (FP_PotokOhlazhdVody_IP2K_K1 > VRH_GRAN_POTOKA_OHL_ZHIDK_IP)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NizheNormy 
		IF (_FUNCTION_ + PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_NIZHE_NORMY_AVARIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (PROCESS DoOtmeny2min IN STATE INACTIVE) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidaniePovysheniyaPotoka 
		IF (FP_PotokOhlazhdVody_IP2K_K1 >= NP_UstavkaPotokaOhlZHidkosti_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE VysheNormy 
		IF (_FUNCTION_ + PK_PIV_POTOK_OHLAZHDENIYA_VODY_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePonizheniyaPotoka 
		IF (FP_PotokOhlazhdVody_IP2K_K1 <= VRH_GRAN_POTOKA_OHL_ZHIDK_IP) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqOhlazhdZHidkostiNaVhode_IP2K_K1
	STATE Nachalo 
		SET STATE Norma;
		IF (FP_TemperaturaOhlNaVhode_IP2K_K1 >= NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1) THEN
			SET STATE AvariyaVysheNormy;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_NA_VHODE_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Ozhidanie1 
		IF (FP_TemperaturaOhlNaVhode_IP2K_K1 > NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE AvariyaVysheNormy 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_NA_VHODE_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Ozhidanie4 
		IF (FP_TemperaturaOhlNaVhode_IP2K_K1 < (NP_UstavkaTempOhlZHidkostiNaVhode_IP2K_K1 - 1.0)) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOhlazhdZHidkostiNaVyhode_IP2K_K1
	STATE Nachalo 
		SET NEXT;
		IF ((FP_TemperaturaOhlNaVyhode_IP2K_K1 > TEMPERATURA_VK_50) AND (FP_TemperaturaOhlNaVyhode_IP2K_K1 <= NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1)) THEN
			SET STATE Peregrev;
		ELSE 
			IF (FP_TemperaturaOhlNaVyhode_IP2K_K1 > NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1) THEN
				SET STATE Avariya;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TemperaturaOhlNaVyhode_IP2K_K1 >= TEMPERATURA_VK_50) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TemperaturaOhlNaVyhode_IP2K_K1 <= TEMPERATURA_VK_50) OR (FP_TemperaturaOhlNaVyhode_IP2K_K1 > NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_NA_VYHODE_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TemperaturaOhlNaVyhode_IP2K_K1 <= NP_UstavkaTempOhlZHidkostiNaVyhode_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSoprotivleniyaNagrevatelya_IP2K_K1
	STATE Nachalo 
		IF (FP_Iipn_K1 > 50.0) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqUslovij 
		IF (FP_Iipn_K1 < 50.0) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_SEKUNDY THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE Proverka 
		IF ((FP_Ripn_K1 >= NP_NizhnyayaGranitsaRn_IP2K_K1) AND (FP_Ripn_K1 <= NP_VerhnyayaGranitsaRn_IP2K_K1)) THEN
			SET NEXT;
		ELSE 
			SET STATE NetDiapazona;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_SOPROTIVLENIE_NAGR_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaDiapazona 
		IF ((FP_Ripn_K1 < NP_NizhnyayaGranitsaRn_IP2K_K1) OR (FP_Ripn_K1 > NP_VerhnyayaGranitsaRn_IP2K_K1)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NetDiapazona 
		IF (_FUNCTION_ + PK_PIV_SOPROTIVLENIE_NAGR_IP2K_K1_VNE_DIAPAZONA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaDiapazona 
		IF ((FP_Ripn_K1 >= NP_NizhnyayaGranitsaRn_IP2K_K1) AND (FP_Ripn_K1 <= NP_VerhnyayaGranitsaRn_IP2K_K1)) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqSoprotivleniyaIzolyatsii_IP2K_K1
	STATE Nachalo 
		SET STATE Norma;
		IF (FP_Riz_IP2K_K1 < NP_NizhnyayaGranitsaRiz_IP2K_K1) THEN
			SET STATE NizheNormy;
		END_IF
		IF (FP_Riz_IP2K_K1 > VRH_GRAN_R_IZOLYATSII) THEN
			SET STATE VysheNormy;
		END_IF
		IF (FP_Iipn_K1 < 10.0) THEN
			SET STATE OzhidanieZadaniyaToka;
		END_IF
	END_STATE
	
	STATE OzhidanieZadaniyaToka 
		IF (FP_Iipn_K1 >= 10.0) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaDiapazona 
		IF ((FP_Riz_IP2K_K1 < NP_NizhnyayaGranitsaRiz_IP2K_K1) AND (FP_Riz_IP2K_K1 > VRH_GRAN_R_IZOLYATSII)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE NizheNormy 
		IF (_FUNCTION_ + PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_NIZHE_NORMY_AVARIYA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE OzhidaniePovysheniyaSoprotivleniya 
		IF (FP_Riz_IP2K_K1 >= NP_NizhnyayaGranitsaRiz_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE VysheNormy 
		IF (_FUNCTION_ + PK_PIV_SOPROTIVLENIE_IZOL_IP2K_K1_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePonizheniyaSoprotivleniya 
		IF (FP_Riz_IP2K_K1 <= VRH_GRAN_R_IZOLYATSII) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqKolichestvaModulej_IP2K_K1
	STATE Nachalo 
		IF (NP_MinimalqnoeKolichestvoModulej_IP2K_K1 >= (Flag_NalichiyaModulya0_IP2K_K1 + Flag_NalichiyaModulya1_IP2K_K1 + Flag_NalichiyaModulya2_IP2K_K1 + Flag_NalichiyaModulya3_IP2K_K1 + Flag_NalichiyaModulya4_IP2K_K1 + Flag_NalichiyaModulya5_IP2K_K1)) THEN
			SET NEXT;
		ELSE 
			SET STATE NedostatochnoModulej;
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_V_IP2K_MODULEJ_DOSTATOCHNO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieIscheznoveniyaModulej 
		IF (NP_MinimalqnoeKolichestvoModulej_IP2K_K1 < (Flag_NalichiyaModulya0_IP2K_K1 + Flag_NalichiyaModulya1_IP2K_K1 + Flag_NalichiyaModulya2_IP2K_K1 + Flag_NalichiyaModulya3_IP2K_K1 + Flag_NalichiyaModulya4_IP2K_K1 + Flag_NalichiyaModulya5_IP2K_K1)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NedostatochnoModulej 
		IF (_FUNCTION_ + PK_PIV_V_IP2K_NE_HVATAET_MODULEJ) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaModulej 
		IF (NP_MinimalqnoeKolichestvoModulej_IP2K_K1 >= (Flag_NalichiyaModulya0_IP2K_K1 + Flag_NalichiyaModulya1_IP2K_K1 + Flag_NalichiyaModulya2_IP2K_K1 + Flag_NalichiyaModulya3_IP2K_K1 + Flag_NalichiyaModulya4_IP2K_K1 + Flag_NalichiyaModulya5_IP2K_K1)) THEN
			SET STATE Norma;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTokaModulya0_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya0_IP2K_K1) THEN
			IF (FP_TokModulya0_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
				SET STATE Avariya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_0_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TokModulya0_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_0_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TokModulya0_IP2K_K1 <= NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTokaModulya1_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya1_IP2K_K1) THEN
			IF (FP_TokModulya1_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
				SET STATE Avariya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_1_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TokModulya1_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_1_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TokModulya1_IP2K_K1 <= NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTokaModulya2_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya2_IP2K_K1) THEN
			IF (FP_TokModulya2_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
				SET STATE Avariya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_2_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TokModulya2_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_2_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TokModulya2_IP2K_K1 <= NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTokaModulya3_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya3_IP2K_K1) THEN
			IF (FP_TokModulya3_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
				SET STATE Avariya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_3_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TokModulya3_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_3_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TokModulya3_IP2K_K1 <= NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTokaModulya4_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya4_IP2K_K1) THEN
			IF (FP_TokModulya4_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
				SET STATE Avariya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_4_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TokModulya4_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_4_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TokModulya4_IP2K_K1 <= NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTokaModulya5_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya5_IP2K_K1) THEN
			IF (FP_TokModulya5_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
				SET STATE Avariya;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_5_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TokModulya5_IP2K_K1 > NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TOK_MODULYA_5_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TokModulya5_IP2K_K1 <= NP_TokZashityModulya_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyModulya0_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya0_IP2K_K1) THEN
			IF (FP_TempModulya0_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
				SET STATE Avariya;
			ELSE 
				IF (FP_TempModulya0_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
					SET STATE Peregrev;
				ELSE 
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TempModulya0_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TempModulya0_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) OR (FP_TempModulya0_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_0_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TempModulya0_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyModulya1_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya1_IP2K_K1) THEN
			IF (FP_TempModulya1_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
				SET STATE Avariya;
			ELSE 
				IF (FP_TempModulya1_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
					SET STATE Peregrev;
				ELSE 
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TempModulya1_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TempModulya1_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) OR (FP_TempModulya1_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_1_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TempModulya1_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyModulya2_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya2_IP2K_K1) THEN
			IF (FP_TempModulya2_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
				SET STATE Avariya;
			ELSE 
				IF (FP_TempModulya2_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
					SET STATE Peregrev;
				ELSE 
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TempModulya2_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TempModulya2_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) OR (FP_TempModulya2_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_2_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TempModulya2_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyModulya3_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya3_IP2K_K1) THEN
			IF (FP_TempModulya3_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
				SET STATE Avariya;
			ELSE 
				IF (FP_TempModulya3_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
					SET STATE Peregrev;
				ELSE 
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TempModulya3_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TempModulya3_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) OR (FP_TempModulya3_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_3_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TempModulya3_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyModulya4_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya4_IP2K_K1) THEN
			IF (FP_TempModulya4_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
				SET STATE Avariya;
			ELSE 
				IF (FP_TempModulya4_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
					SET STATE Peregrev;
				ELSE 
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TempModulya4_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TempModulya4_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) OR (FP_TempModulya4_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_4_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TempModulya4_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqTemperaturyModulya5_IP2K_K1
	STATE Nachalo 
		IF (Flag_NalichiyaModulya5_IP2K_K1) THEN
			IF (FP_TempModulya5_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
				SET STATE Avariya;
			ELSE 
				IF (FP_TempModulya5_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
					SET STATE Peregrev;
				ELSE 
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE Norma 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaZaNormu 
		IF (FP_TempModulya5_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Peregrev 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_PREDUPR_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVyhodaIzPeregreva 
		IF ((FP_TempModulya5_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_PREDUPREZHDENIE) OR (FP_TempModulya5_IP2K_K1 > NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA)) THEN
			SET STATE Nachalo;
		END_IF
	END_STATE
	
	STATE Avariya 
		IF (_FUNCTION_ + PK_PIV_TEMPERATURA_MODULYA_5_IP2K_K1_AVARIYA_VYSHE_NORMY) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE ZapuskDoOtmeny2min 
		IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
			START PROCESS DoOtmeny2min;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyhodaIzAvarii 
		IF (FP_TempModulya5_IP2K_K1 <= NP_GranichnayaTempVnutri_IP2K_K1_AVARIYA) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqPitaniyaSistemyIBP
	STATE Nachalo 
		IF ((K_220_NA_VHODE_IBP = VYKL) AND (K_IBP_RAZRYAZHEN = VKL)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZapuskProtsessovOtklyucheniya 
		START PROCESS KonetsRaboty;
		SET NEXT;
	END_STATE
	
	STATE SoobK_PIV_OVyklyuchenii 
		IF (_FUNCTION_ + OTKLYUCHENIE_SISTEMY_PO_PITANIYU) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS Kontrolq220naVhodeIBP
	STATE Nachalo 
		IF (K_220_NA_VHODE_IBP = VKL) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_IBP_NET_220;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_IBP_ESTQ_220 
		IF (_FUNCTION_ + ESTQ_220V_NA_VHODE_IBP) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (K_220_NA_VHODE_IBP = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_IBP_NET_220 
		IF (_FUNCTION_ + NET_220V_NA_VHODE_IBP) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (K_220_NA_VHODE_IBP = VKL) THEN
			SET STATE SoobK_PIV_IBP_ESTQ_220;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqResursovIBP
	STATE Nachalo 
		IF (K_IBP_RAZRYAZHEN = VKL) THEN
			SET NEXT;
		ELSE 
			SET STATE SoobK_PIV_IBP_V_NORME;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_IBP_RAZRYAZHEN 
		IF (_FUNCTION_ + IBP_RAZRYAZHEN) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVyklyucheniya 
		IF (K_IBP_RAZRYAZHEN = VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobK_PIV_IBP_V_NORME 
		IF (_FUNCTION_ + IBP_V_NORME) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieVklyucheniya 
		IF (K_IBP_RAZRYAZHEN = VKL) THEN
			SET STATE SoobK_PIV_IBP_RAZRYAZHEN;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS Blokirovka_VK_NK
	STATE Nachalo 
		IF ((K_ZAKR_ZATVOR_V = VKL) OR (TekushijRezhim <> REZHIM_RR) OR (FP_Pvk < ATMOSFERA)) THEN
			U_RAZBLOKIROVKA_VK_NK := VYKL;
		ELSE 
			U_RAZBLOKIROVKA_VK_NK := VKL;
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqUslovijRabotyIPN
	STATE KontrolqVklyucheniyaRegulyatorovIPN 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE OR PROCESS REG_W_IPN_K2 IN STATE ACTIVE) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE StartProtsessovKontrolya 
		START PROCESS KontrolqAvariiMN;
		START PROCESS KontrolqAvariiOhlazhdeniyaVK_RP1;
		START PROCESS KontrolqAvariiOhlazhdeniyaKryshkiVK_RP2;
		START PROCESS KontrolqAvariiOhlazhdeniyaNK_RP3;
		START PROCESS KontrolqAvariiOhlazhdeniyaBazovojPlity_RP4;
		START PROCESS KontrolqAvariiOhlazhdeniyaKollektoraVakuumnogo_RP5;
		START PROCESS KontrolqAvariiOhlazhdeniyaSHtokaPrivodaTiglya_RP6;
		START PROCESS KontrolqAvariiOhlazhdeniyaTokovvodov_RP7;
		START PROCESS KontrolqAvarii_K_V1;
		START PROCESS KON_DAVLENIYA_NK;
		START PROCESS KON_NARUSHENIYA_GERMETICHNOSTI_NK;
		IF (NP_TipIPN = IPN_PTD) THEN
			START PROCESS KON_ZSI;
			STOP PROCESS KontrolqPotokaOhlazhdZHidkosti_IP2K_K1;
			STOP PROCESS KontrolqOhlazhdZHidkostiNaVhode_IP2K_K1;
			STOP PROCESS KontrolqOhlazhdZHidkostiNaVyhode_IP2K_K1;
			STOP PROCESS KontrolqSoprotivleniyaNagrevatelya_IP2K_K1;
			STOP PROCESS KontrolqSoprotivleniyaIzolyatsii_IP2K_K1;
			STOP PROCESS KontrolqTokaModulya0_IP2K_K1;
			STOP PROCESS KontrolqTokaModulya1_IP2K_K1;
			STOP PROCESS KontrolqTokaModulya2_IP2K_K1;
			STOP PROCESS KontrolqTokaModulya3_IP2K_K1;
			STOP PROCESS KontrolqTokaModulya4_IP2K_K1;
			STOP PROCESS KontrolqTokaModulya5_IP2K_K1;
			STOP PROCESS KontrolqTemperaturyModulya0_IP2K_K1;
			STOP PROCESS KontrolqTemperaturyModulya1_IP2K_K1;
			STOP PROCESS KontrolqTemperaturyModulya2_IP2K_K1;
			STOP PROCESS KontrolqTemperaturyModulya3_IP2K_K1;
			STOP PROCESS KontrolqTemperaturyModulya4_IP2K_K1;
			STOP PROCESS KontrolqTemperaturyModulya5_IP2K_K1;
		ELSE 
			STOP PROCESS KON_ZSI;
			START PROCESS KontrolqPotokaOhlazhdZHidkosti_IP2K_K1;
			START PROCESS KontrolqOhlazhdZHidkostiNaVhode_IP2K_K1;
			START PROCESS KontrolqOhlazhdZHidkostiNaVyhode_IP2K_K1;
			START PROCESS KontrolqSoprotivleniyaNagrevatelya_IP2K_K1;
			START PROCESS KontrolqSoprotivleniyaIzolyatsii_IP2K_K1;
			START PROCESS KontrolqTokaModulya0_IP2K_K1;
			START PROCESS KontrolqTokaModulya1_IP2K_K1;
			START PROCESS KontrolqTokaModulya2_IP2K_K1;
			START PROCESS KontrolqTokaModulya3_IP2K_K1;
			START PROCESS KontrolqTokaModulya4_IP2K_K1;
			START PROCESS KontrolqTokaModulya5_IP2K_K1;
			START PROCESS KontrolqTemperaturyModulya0_IP2K_K1;
			START PROCESS KontrolqTemperaturyModulya1_IP2K_K1;
			START PROCESS KontrolqTemperaturyModulya2_IP2K_K1;
			START PROCESS KontrolqTemperaturyModulya3_IP2K_K1;
			START PROCESS KontrolqTemperaturyModulya4_IP2K_K1;
			START PROCESS KontrolqTemperaturyModulya5_IP2K_K1;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyklyucheniyaRegulyatorovIPN 
		IF ((NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) AND (NOT (PROCESS REG_W_IPN_K2 IN STATE ACTIVE))) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE StopProtsessovKontrolya 
		STOP PROCESS KontrolqAvariiMN;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaVK_RP1;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaKryshkiVK_RP2;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaNK_RP3;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaBazovojPlity_RP4;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaKollektoraVakuumnogo_RP5;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaSHtokaPrivodaTiglya_RP6;
		STOP PROCESS KontrolqAvariiOhlazhdeniyaTokovvodov_RP7;
		STOP PROCESS KontrolqAvarii_K_V1;
		STOP PROCESS KON_DAVLENIYA_NK;
		STOP PROCESS KON_NARUSHENIYA_GERMETICHNOSTI_NK;
		STOP PROCESS KON_ZSI;
		STOP PROCESS KontrolqPotokaOhlazhdZHidkosti_IP2K_K1;
		STOP PROCESS KontrolqOhlazhdZHidkostiNaVhode_IP2K_K1;
		STOP PROCESS KontrolqOhlazhdZHidkostiNaVyhode_IP2K_K1;
		STOP PROCESS KontrolqSoprotivleniyaNagrevatelya_IP2K_K1;
		STOP PROCESS KontrolqSoprotivleniyaIzolyatsii_IP2K_K1;
		STOP PROCESS KontrolqTemperaturyModulya0_IP2K_K1;
		STOP PROCESS KontrolqTemperaturyModulya1_IP2K_K1;
		STOP PROCESS KontrolqTemperaturyModulya2_IP2K_K1;
		STOP PROCESS KontrolqTemperaturyModulya3_IP2K_K1;
		STOP PROCESS KontrolqTemperaturyModulya4_IP2K_K1;
		STOP PROCESS KontrolqTemperaturyModulya5_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE SnyatieAvarii 
		IF (_FUNCTION_ + PK_PIV_SNYATQ_OSHIBKU__VSEH_RP_I_MN) THEN
			SET STATE KontrolqVklyucheniyaRegulyatorovIPN;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KON_ZSI
	STATE Nachalo 
		IF (NP_TipIPN = IPN_PTD) THEN
			SET NEXT;
		ELSE 
			STOP;
		END_IF
	END_STATE
	
	STATE KontrolqUstanovkiZashity 
		IF (K_ZASHITA_PTD) THEN
			SET STATE Zashita;
		END_IF
	END_STATE
	
	STATE Zashita 
		IF (_FUNCTION_ + SRABOTALA_ZASHITA_PTD) THEN
			IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
				START PROCESS DoOtmeny2min;
			END_IF
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqSbrosaZashity 
		IF (NOT K_ZASHITA_PTD) THEN
			SET STATE NeZashita;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE Zashita;
		END_TIMEOUT
	END_STATE
	
	STATE NeZashita 
		IF (_FUNCTION_ + ZASHITA_V_NORME) THEN
			SET STATE KontrolqUstanovkiZashity;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KON_DAVLENIYA_NK
	STATE Nachalo 
		IF (FP_Pnk >= DAVLENIE_40MMRTST) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Preduprezhdenie 
		IF (_FUNCTION_ + PREDUPREZHDENIE__DAVLENIE_NK_40) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqVzryva 
		IF (FP_Pnk <= DAVLENIE_35MMRTST) THEN
			SET STATE Nachalo;
		END_IF
		IF (FP_Pnk >= DAVLENIE_45MMRTST) THEN
			SET STATE Vzryv;
		END_IF
	END_STATE
	
	STATE Vzryv 
		IF (_FUNCTION_ + AVARIYA__DAVLENIE_NK_BOLQSHE_45) THEN
			IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
				START PROCESS DoOtmeny2min;
			END_IF
		END_IF
		SET NEXT;
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqNormalizatsiiDavleniya 
		IF (FP_Pnk <= DAVLENIE_40MMRTST) THEN
			SET STATE Preduprezhdenie;
		END_IF
		TIMEOUT DVE_MINUTY THEN
			SET STATE KontrolqVzryva;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KON_NARUSHENIYA_GERMETICHNOSTI_NK
	STATE Nachalo 
		IF (K_VE1 AND (K_VE5 OR (K_VE3 AND (K_VE7 OR NOT K_ZAKR_VM14)))) THEN
			SET NEXT;
		END_IF
		IF (K_VE2 AND (K_VE6 OR (K_VE4 AND (K_VE7 OR NOT K_ZAKR_VM14)))) THEN
			SET STATE NarushenieGermetichnostiPoKanaluNVR2;
		END_IF
	END_STATE
	
	STATE NarushenieGermetichnostiPoKanaluNVR1 
		IF (_FUNCTION_ + AVARIYA__NARUSHENIE_GERMETICHNOSTI_AVD1) THEN
			IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
				START PROCESS DoOtmeny2min;
			END_IF
		END_IF
		SET STATE Pauza;
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieGermetichnostiPoKanaluNVR2 
		IF (_FUNCTION_ + AVARIYA__NARUSHENIE_GERMETICHNOSTI_AVD2) THEN
			IF (NOT (PROCESS DoOtmeny2min IN STATE ACTIVE)) THEN
				START PROCESS DoOtmeny2min;
			END_IF
		END_IF
		SET STATE Pauza;
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT DVE_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS ZapuskProtsessovKontrolyaIzmeneniyaFaktParametrov
	STATE Nachalo 
		START PROCESS KontrolqIzmeneniya_FP_Qgaza;
		START PROCESS KontrolqIzmeneniya_FP_IPN_K1_WIUR;
		START PROCESS KontrolqIzmeneniya_FP_PSW_IP2K_K1;
		START PROCESS KontrolqIzmeneniya_FP_Tn;
		START PROCESS KontrolqIzmeneniya_FP_Tdtn;
		START PROCESS KontrolqIzmeneniya_FP_Tr;
		START PROCESS KontrolqIzmeneniya_FP_Tdtr;
		START PROCESS KontrolqIzmeneniya_FP_PSWdtn;
		START PROCESS KontrolqIzmeneniya_FP_PSWdtr;
		START PROCESS KontrolqIzmeneniya_L_KZ_UR;
		START PROCESS KontrolqIzmeneniya_Lmonokristalla;
		START PROCESS KontrolqIzmeneniya_VremeniTekushegoEtapa;
		START PROCESS KontrolqIzmeneniya_Ltek_chasti_monokristalla;
		START PROCESS KontrolqIzmeneniya_FP_DlinaZatravlivaniya;
		START PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaZatravka_SHejka;
		START PROCESS KontrolqIzmeneniya_FP_DlinaSHejki;
		START PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaSHejka_Konus;
		START PROCESS KontrolqIzmeneniya_FP_DlinaKonusa;
		START PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaKonus_TSilindr;
		START PROCESS KontrolqIzmeneniya_FP_DlinaStabilizatsiiTSilindra;
		START PROCESS KontrolqIzmeneniya_FP_DlinaTSilindra;
		START PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaTSilindr_ObrKonus;
		START PROCESS KontrolqIzmeneniya_FP_DlinaObratnogoKonusa;
		START PROCESS KontrolqIzmeneniya_FP_MassaZatravlivaniya;
		START PROCESS KontrolqIzmeneniya_FP_MassaPerehodaZatravka_SHejka;
		START PROCESS KontrolqIzmeneniya_FP_MassaSHejki;
		START PROCESS KontrolqIzmeneniya_FP_MassaPerehodaSHejka_Konus;
		START PROCESS KontrolqIzmeneniya_FP_MassaKonusa;
		START PROCESS KontrolqIzmeneniya_FP_MassaPerehodaKonus_TSilindr;
		START PROCESS KontrolqIzmeneniya_FP_MassaStabilizatsiiTSilindra;
		START PROCESS KontrolqIzmeneniya_FP_MassaTSilindra;
		START PROCESS KontrolqIzmeneniya_FP_MassaPerehodaTSilindr_ObrKonus;
		START PROCESS KontrolqIzmeneniya_FP_MassaObratnogoKonusa;
		START PROCESS KontrolqIzmeneniya_Hur;
		START PROCESS KontrolqIzmeneniya_Hur_DU;
		START PROCESS KontrolqIzmeneniya_FP_STAT;
		START PROCESS KontrolqIzmeneniya_FP_PEAKW;
		START PROCESS KontrolqIzmeneniya_FP_PEAKC;
		START PROCESS KontrolqIzmeneniya_FP_RANGE;
		START PROCESS KontrolqIzmeneniya_FP_DISP;
		START PROCESS KontrolqIzmeneniya_FP_MEAN;
		START PROCESS KontrolqIzmeneniya_FP_LASER;
		START PROCESS KontrolqIzmeneniya_Hur_DV;
		START PROCESS KontrolqIzmeneniya_FP_Vrosta;
		START PROCESS KontrolqIzmeneniya_Dkr;
		START PROCESS KontrolqIzmeneniya_Dkr_TDD;
		START PROCESS KontrolqIzmeneniya_Dkr_DV;
		START PROCESS KontrolqIzmeneniya_FP_Tvk1;
		START PROCESS KontrolqIzmeneniya_FP_Tvk2;
		START PROCESS KontrolqIzmeneniya_FP_Tvk3;
		START PROCESS KontrolqIzmeneniya_FP_Tvk4;
		START PROCESS KontrolqIzmeneniya_FP_Tvk5;
		START PROCESS KontrolqIzmeneniya_FP_Tvk6;
		START PROCESS KontrolqIzmeneniya_FP_Tvk7;
		START PROCESS KontrolqIzmeneniya_FP_Tvk8;
		START PROCESS KontrolqIzmeneniya_FP_Udk;
		START PROCESS KontrolqIzmeneniya_FP_Pnk;
		START PROCESS KontrolqIzmeneniya_FP_Pvk;
		START PROCESS KontrolqIzmeneniya_FP_Pavd1;
		START PROCESS KontrolqIzmeneniya_FP_Pavd2;
		START PROCESS KontrolqIzmeneniya_FP_Mmonokristalla;
		START PROCESS KontrolqIzmeneniya_FP_I_ZR;
		START PROCESS KontrolqIzmeneniya_FP_I_ZU;
		START PROCESS KontrolqIzmeneniya_FP_I_ZV;
		START PROCESS KontrolqIzmeneniya_FP_I_TR;
		START PROCESS KontrolqIzmeneniya_FP_I_TU;
		START PROCESS KontrolqIzmeneniya_FP_I_TV;
		START PROCESS KontrolqIzmeneniya_FP_VzR;
		START PROCESS KontrolqIzmeneniya_FP_VzU;
		START PROCESS KontrolqIzmeneniya_FP_Vz;
		START PROCESS KontrolqIzmeneniya_ZD_Vz;
		START PROCESS KontrolqIzmeneniya_FP_Xz;
		START PROCESS KontrolqIzmeneniya_FP_Wz;
		START PROCESS KontrolqIzmeneniya_FP_Wz_UGOL;
		START PROCESS KontrolqIzmeneniya_FP_VtR;
		START PROCESS KontrolqIzmeneniya_FP_VtU;
		START PROCESS KontrolqIzmeneniya_ZD_Vt;
		START PROCESS KontrolqIzmeneniya_FP_Vt;
		START PROCESS KontrolqIzmeneniya_FP_Xt;
		START PROCESS KontrolqIzmeneniya_FP_Wt;
		START PROCESS KontrolqIzmeneniya_FP_Wt_UGOL;
		START PROCESS KontrolqIzmeneniyaFP_Wz_dlyaTDD;
		START PROCESS KontrolqIzmeneniyaFP_Wt_dlyaTDD;
		START PROCESS KontrolqIzmeneniyaFP_Hur_dlyaTDD;
		START PROCESS KontrolqIzmeneniyaZD_Hur_dlyaTDD;
		START PROCESS KontrolqDostovernostiDTN;
		START PROCESS KontrolqDostovernostiDTR;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Qgaza
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Qgaza);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Qgaza) THEN
			LP_Predydushee := FP_Qgaza;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Qgaza + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_PSW_IP2K_K1
	VAR
		LP_Tekushee : INT;
		LP_Predydushee : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Tekushee := _FUNCTION_ OR 2;
		LP_Predydushee := (~LP_Tekushee);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		LP_Tekushee := _FUNCTION_;
		IF (LP_Predydushee <> (LP_Tekushee OR 2)) THEN
			LP_Predydushee := LP_Tekushee OR 2;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_PSW_IP2K_K1 + LP_Tekushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_IPN_K1_WIUR
	VAR
		LP_FP_Iipn_K1 : REAL;
		LP_FP_Uipn_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_Iipn_K1 := NOT FP_Iipn_K1;
		LP_FP_Uipn_K1 := NOT FP_Uipn_K1;
		SET NEXT;
	END_STATE
	
	STATE ProverkaIzmeneniya_PTD 
		IF ((LP_FP_Iipn_K1 <> FP_Iipn_K1) OR (LP_FP_Uipn_K1 <> FP_Uipn_K1)) THEN
			LP_FP_Iipn_K1 := FP_Iipn_K1;
			LP_FP_Uipn_K1 := FP_Uipn_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzmeneniya_PIV_I 
		IF (_FUNCTION_ + PK_PIV_FP_Iipn_K1 + FP_Iipn_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza1 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE PeredachaIzmeneniya_PIV_U;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaIzmeneniya_PIV_U 
		IF (_FUNCTION_ + PK_PIV_FP_Uipn_K1 + FP_Uipn_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza2 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE PeredachaIzmeneniya_PIV_W;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaIzmeneniya_PIV_W 
		IF (_FUNCTION_ + PK_PIV_FP_Wipn_K1 + FP_Wipn_K1 / 1000.0) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza3 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE PeredachaIzmeneniya_PIV_R;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaIzmeneniya_PIV_R 
		IF (_FUNCTION_ + PK_PIV_FP_Ripn_K1 + FP_Ripn_K1 * 1000.0) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_PotokOhlazhdVody_IP2K_K1
	VAR
		LP_FP_PotokOhlazhdVody_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_PotokOhlazhdVody_IP2K_K1 := NOT FP_PotokOhlazhdVody_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_PotokOhlazhdVody_IP2K_K1 <> FP_PotokOhlazhdVody_IP2K_K1) THEN
			LP_FP_PotokOhlazhdVody_IP2K_K1 := FP_PotokOhlazhdVody_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_PotokOhlazhdVody_IP2K_K1 + FP_PotokOhlazhdVody_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TemperaturaOhlNaVhode_IP2K_K1
	VAR
		LP_FP_TemperaturaOhlNaVhode_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TemperaturaOhlNaVhode_IP2K_K1 := NOT FP_TemperaturaOhlNaVhode_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TemperaturaOhlNaVhode_IP2K_K1 <> FP_TemperaturaOhlNaVhode_IP2K_K1) THEN
			LP_FP_TemperaturaOhlNaVhode_IP2K_K1 := FP_TemperaturaOhlNaVhode_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TemperaturaOhlNaVhode_IP2K_K1 + FP_TemperaturaOhlNaVhode_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TemperaturaOhlNaVyhode_IP2K_K1
	VAR
		LP_FP_TemperaturaOhlNaVyhode_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TemperaturaOhlNaVyhode_IP2K_K1 := NOT FP_TemperaturaOhlNaVyhode_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TemperaturaOhlNaVyhode_IP2K_K1 <> FP_TemperaturaOhlNaVyhode_IP2K_K1) THEN
			LP_FP_TemperaturaOhlNaVyhode_IP2K_K1 := FP_TemperaturaOhlNaVyhode_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TemperaturaOhlNaVyhode_IP2K_K1 + FP_TemperaturaOhlNaVyhode_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Riz_IP2K_K1
	VAR
		LP_FP_Riz_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_Riz_IP2K_K1 := NOT FP_Riz_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_Riz_IP2K_K1 <> FP_Riz_IP2K_K1) THEN
			LP_FP_Riz_IP2K_K1 := FP_Riz_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_Riz_IP2K_K1 + FP_Riz_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TokModulya0_IP2K_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := NOT FP_TokModulya0_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_TokModulya0_IP2K_K1) THEN
			LP_Predydushee := FP_TokModulya0_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TokModulya0_IP2K_K1 + FP_TokModulya0_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TokModulya1_IP2K_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := NOT FP_TokModulya1_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_TokModulya1_IP2K_K1) THEN
			LP_Predydushee := FP_TokModulya1_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TokModulya1_IP2K_K1 + FP_TokModulya1_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TokModulya2_IP2K_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := NOT FP_TokModulya2_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_TokModulya2_IP2K_K1) THEN
			LP_Predydushee := FP_TokModulya2_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TokModulya2_IP2K_K1 + FP_TokModulya2_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TokModulya3_IP2K_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := NOT FP_TokModulya3_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_TokModulya3_IP2K_K1) THEN
			LP_Predydushee := FP_TokModulya3_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TokModulya3_IP2K_K1 + FP_TokModulya3_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TokModulya4_IP2K_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := NOT FP_TokModulya4_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_TokModulya4_IP2K_K1) THEN
			LP_Predydushee := FP_TokModulya4_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TokModulya4_IP2K_K1 + FP_TokModulya4_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TokModulya5_IP2K_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := NOT FP_TokModulya5_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_TokModulya5_IP2K_K1) THEN
			LP_Predydushee := FP_TokModulya5_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TokModulya5_IP2K_K1 + FP_TokModulya5_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TempModulya0_IP2K_K1
	VAR
		LP_FP_TempModulya0_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TempModulya0_IP2K_K1 := NOT FP_TempModulya0_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TempModulya0_IP2K_K1 <> FP_TempModulya0_IP2K_K1) THEN
			LP_FP_TempModulya0_IP2K_K1 := FP_TempModulya0_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TempModulya0_IP2K_K1 + FP_TempModulya0_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TempModulya1_IP2K_K1
	VAR
		LP_FP_TempModulya1_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TempModulya1_IP2K_K1 := NOT FP_TempModulya1_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TempModulya1_IP2K_K1 <> FP_TempModulya1_IP2K_K1) THEN
			LP_FP_TempModulya1_IP2K_K1 := FP_TempModulya1_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TempModulya1_IP2K_K1 + FP_TempModulya1_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TempModulya2_IP2K_K1
	VAR
		LP_FP_TempModulya2_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TempModulya2_IP2K_K1 := NOT FP_TempModulya2_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TempModulya2_IP2K_K1 <> FP_TempModulya2_IP2K_K1) THEN
			LP_FP_TempModulya2_IP2K_K1 := FP_TempModulya2_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TempModulya2_IP2K_K1 + FP_TempModulya2_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TempModulya3_IP2K_K1
	VAR
		LP_FP_TempModulya3_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TempModulya3_IP2K_K1 := NOT FP_TempModulya3_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TempModulya3_IP2K_K1 <> FP_TempModulya3_IP2K_K1) THEN
			LP_FP_TempModulya3_IP2K_K1 := FP_TempModulya3_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TempModulya3_IP2K_K1 + FP_TempModulya3_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TempModulya4_IP2K_K1
	VAR
		LP_FP_TempModulya4_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TempModulya4_IP2K_K1 := NOT FP_TempModulya4_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TempModulya4_IP2K_K1 <> FP_TempModulya4_IP2K_K1) THEN
			LP_FP_TempModulya4_IP2K_K1 := FP_TempModulya4_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TempModulya4_IP2K_K1 + FP_TempModulya4_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_TempModulya5_IP2K_K1
	VAR
		LP_FP_TempModulya5_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_TempModulya5_IP2K_K1 := NOT FP_TempModulya5_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_TempModulya5_IP2K_K1 <> FP_TempModulya5_IP2K_K1) THEN
			LP_FP_TempModulya5_IP2K_K1 := FP_TempModulya5_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_TempModulya5_IP2K_K1 + FP_TempModulya5_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_SostoyanieModulya_IP2K_K1
	VAR
		LP_FP_SostoyanieModulya_IP2K_K1 : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_FP_SostoyanieModulya_IP2K_K1 := NOT FP_SostoyanieModulya_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_SostoyanieModulya_IP2K_K1 <> FP_SostoyanieModulya_IP2K_K1) THEN
			LP_FP_SostoyanieModulya_IP2K_K1 := FP_SostoyanieModulya_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_SostoyanieModulya_IP2K_K1 + FP_SostoyanieModulya_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_U380_IP2K_K1
	VAR
		LP_FP_U380_IP2K_K1 : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_U380_IP2K_K1 := NOT FP_U380_IP2K_K1;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_FP_U380_IP2K_K1 <> FP_U380_IP2K_K1) THEN
			LP_FP_U380_IP2K_K1 := FP_U380_IP2K_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaIzm_PIV 
		IF (_FUNCTION_ + PK_PIV_FP_U380_IP2K_K1 + FP_U380_IP2K_K1) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tn
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tn);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tn) THEN
			LP_Predydushee := FP_Tn;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tn + FP_Tn) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tdtn
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tdtn);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tdtn) THEN
			LP_Predydushee := FP_Tdtn;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tdtn + FP_Tdtn) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tr
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tr) THEN
			LP_Predydushee := FP_Tr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tr + FP_Tr) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tdtr
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tdtr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tdtr) THEN
			LP_Predydushee := FP_Tdtr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmeneniiTdatchika 
		IF (_FUNCTION_ + PK_PIV_FP_Tdtr + FP_Tdtr) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_PSWdtr
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_PSWdtr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_PSWdtr) THEN
			LP_Predydushee := FP_PSWdtr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_PSWdtr + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_PSWdtn
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_PSWdtn);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_PSWdtn) THEN
			LP_Predydushee := FP_PSWdtn;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_PSWdtn + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_L_KZ_UR
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagL_KZ_UR);
		LP_Predydushee := (NOT FP_L_KZ_UR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagL_KZ_UR) THEN
			IF (FlagL_KZ_UR = VKL) THEN
				LP_Predydushee := FP_L_KZ_UR;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_L_KZ_UR) THEN
				LP_Predydushee := FP_L_KZ_UR;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_L_KZ_UR + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_L_KZ_UR + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_L_KZ_UR) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_L_KZ_UR) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Lmonokristalla
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagLmonokristalla);
		LP_Predydushee := (NOT FP_Lmonokristalla);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagLmonokristalla) THEN
			IF (FlagLmonokristalla = VKL) THEN
				LP_Predydushee := FP_Lmonokristalla;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Lmonokristalla) THEN
				LP_Predydushee := FP_Lmonokristalla;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Lmonokristalla + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Lmonokristalla + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Lmonokristalla) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Lmonokristalla) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Ltek_chasti_monokristalla
	VAR
		LP_Predydushee : REAL;
		LP_TekushayaDlina : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT (FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla));
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		LP_TekushayaDlina := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
		IF (LP_Predydushee <> LP_TekushayaDlina) THEN
			LP_Predydushee := LP_TekushayaDlina;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (TekushijEtap = ETAP_TP_VYRASHIVANIE_TSILINDRA) THEN
			IF (_FUNCTION_ + PK_PIV_FP_Ltekushej_chasti_monokristalla + (LP_Predydushee + OP_Lsumm_TSilindrov)) THEN
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_FP_Ltekushej_chasti_monokristalla + LP_Predydushee) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaZatravlivaniya
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaZatravlivaniya);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaZatravlivaniya) THEN
			LP_Predydushee := FP_DlinaZatravlivaniya;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaZatravlivaniya + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaZatravka_SHejka
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaPerehodaZatravka_SHejka);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaPerehodaZatravka_SHejka) THEN
			LP_Predydushee := FP_DlinaPerehodaZatravka_SHejka;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaPerehodaZatravka_SHejka + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaSHejki
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaSHejki);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaSHejki) THEN
			LP_Predydushee := FP_DlinaSHejki;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaSHejki + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaSHejka_Konus
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaPerehodaSHejka_Konus);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaPerehodaSHejka_Konus) THEN
			LP_Predydushee := FP_DlinaPerehodaSHejka_Konus;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaPerehodaSHejka_Konus + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaKonusa
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaKonusa);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaKonusa) THEN
			LP_Predydushee := FP_DlinaKonusa;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaKonusa + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaKonus_TSilindr
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaPerehodaKonus_TSilindr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaPerehodaKonus_TSilindr) THEN
			LP_Predydushee := FP_DlinaPerehodaKonus_TSilindr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaPerehodaKonus_TSilindr + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaStabilizatsiiTSilindra
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaStabilizatsiiTSilindra);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaStabilizatsiiTSilindra) THEN
			LP_Predydushee := FP_DlinaStabilizatsiiTSilindra;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaStabilizatsiiTSilindra + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaTSilindra
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaTSilindra);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaTSilindra) THEN
			LP_Predydushee := FP_DlinaTSilindra;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaTSilindra + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaPerehodaTSilindr_ObrKonus
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaPerehodaTSilindr_ObrKonus);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaPerehodaTSilindr_ObrKonus) THEN
			LP_Predydushee := FP_DlinaPerehodaTSilindr_ObrKonus;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaPerehodaTSilindr_ObrKonus + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DlinaObratnogoKonusa
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DlinaObratnogoKonusa);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DlinaObratnogoKonusa) THEN
			LP_Predydushee := FP_DlinaObratnogoKonusa;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DlinaObratnogoKonusa + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaZatravlivaniya
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaZatravlivaniya);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaZatravlivaniya) THEN
			LP_Predydushee := FP_MassaZatravlivaniya;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaZatravlivaniya + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaPerehodaZatravka_SHejka
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaPerehodaZatravka_SHejka);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaPerehodaZatravka_SHejka) THEN
			LP_Predydushee := FP_MassaPerehodaZatravka_SHejka;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaPerehodaZatravka_SHejka + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaSHejki
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaSHejki);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaSHejki) THEN
			LP_Predydushee := FP_MassaSHejki;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaSHejki + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaPerehodaSHejka_Konus
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaPerehodaSHejka_Konus);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaPerehodaSHejka_Konus) THEN
			LP_Predydushee := FP_MassaPerehodaSHejka_Konus;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaPerehodaSHejka_Konus + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaKonusa
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaKonusa);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaKonusa) THEN
			LP_Predydushee := FP_MassaKonusa;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaKonusa + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaPerehodaKonus_TSilindr
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaPerehodaKonus_TSilindr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaPerehodaKonus_TSilindr) THEN
			LP_Predydushee := FP_MassaPerehodaKonus_TSilindr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaPerehodaKonus_TSilindr + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaStabilizatsiiTSilindra
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaStabilizatsiiTSilindra);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaStabilizatsiiTSilindra) THEN
			LP_Predydushee := FP_MassaStabilizatsiiTSilindra;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaStabilizatsiiTSilindra + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaTSilindra
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaTSilindra);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaTSilindra) THEN
			LP_Predydushee := FP_MassaTSilindra;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaTSilindra + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaPerehodaTSilindr_ObrKonus
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaPerehodaTSilindr_ObrKonus);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaPerehodaTSilindr_ObrKonus) THEN
			LP_Predydushee := FP_MassaPerehodaTSilindr_ObrKonus;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaPerehodaTSilindr_ObrKonus + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MassaObratnogoKonusa
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MassaObratnogoKonusa);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MassaObratnogoKonusa) THEN
			LP_Predydushee := FP_MassaObratnogoKonusa;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MassaObratnogoKonusa + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_VremeniTekushegoEtapa
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VremyaTekushegoEtapa);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_VremyaTekushegoEtapa) THEN
			LP_Predydushee := FP_VremyaTekushegoEtapa;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_VremyaTekushegoEtapa + FP_VremyaTekushegoEtapa) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_OP_Tsumm_TSilindrov
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VremyaTekushegoEtapa);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (TekushijEtap = ETAP_TP_VYRASHIVANIE_TSILINDRA) THEN
			IF (LP_Predydushee <> FP_VremyaTekushegoEtapa) THEN
				LP_Predydushee := FP_VremyaTekushegoEtapa;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + IZMN_OP_Tsumm_TSilindrov + OP_Tsumm_TSilindrov + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_OP_Lsumm_TSilindrov
	VAR
		LP_Tekushee : REAL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Tekushee := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
		LP_Predydushee := (NOT LP_Tekushee);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (TekushijEtap = ETAP_TP_VYRASHIVANIE_TSILINDRA) THEN
			LP_Tekushee := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			IF (LP_Predydushee <> LP_Tekushee) THEN
				LP_Predydushee := LP_Tekushee;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + IZMN_OP_Lsumm_TSilindrov + OP_Lsumm_TSilindrov + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_OP_Msumm_TSilindrov
	VAR
		LP_Tekushee : REAL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Tekushee := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
		LP_Predydushee := (NOT LP_Tekushee);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (TekushijEtap = ETAP_TP_VYRASHIVANIE_TSILINDRA) THEN
			LP_Tekushee := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
			IF (LP_Predydushee <> LP_Tekushee) THEN
				LP_Predydushee := LP_Tekushee;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + IZMN_OP_Msumm_TSilindrov + OP_Msumm_TSilindrov + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqMassI_Dlin
	VAR
		LP_Predydushee : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT TekushijEtap);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		FP_VremyaTekushegoEtapa := FP_VremyaTekushegoEtapa + 1;
		IF (LP_Predydushee <> TekushijEtap) THEN
			IF (LP_Predydushee = ETAP_TP_VYRASHIVANIE_TSILINDRA) THEN
				IF (FP_DlinaTSilindra > 0.0) THEN
					OP_Lsumm_TSilindrov := OP_Lsumm_TSilindrov + FP_DlinaTSilindra;
				END_IF
				IF (FP_MassaTSilindra > 0.0) THEN
					OP_Msumm_TSilindrov := OP_Msumm_TSilindrov + FP_MassaTSilindra;
				END_IF
				OP_Tsumm_TSilindrov := OP_Tsumm_TSilindrov + FP_VremyaTekushegoEtapa;
				START PROCESS KontrolqIzmeneniya_Ltek_chasti_monokristalla;
			END_IF
			LP_Predydushee := TekushijEtap;
			FP_Mnachala_tekushej_chasti_monokristalla := FP_Mmonokristalla;
			FP_Lnachala_tekushej_chasti_monokristalla := FP_Lmonokristalla;
			FP_VremyaTekushegoEtapa := 0;
			CASE (LP_Predydushee) OF
				ETAP_ZATRAVLIVANIE:
					OP_Mzatravki := FP_Mmonokristalla;
					FP_MassaZatravlivaniya := 0.0;
					FP_MassaPerehodaZatravka_SHejka := 0.0;
					FP_MassaSHejki := 0.0;
					FP_MassaPerehodaSHejka_Konus := 0.0;
					FP_MassaKonusa := 0.0;
					FP_MassaPerehodaKonus_TSilindr := 0.0;
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					OP_Lzatravki := FP_Lmonokristalla;
					FP_DlinaZatravlivaniya := 0.0;
					FP_DlinaPerehodaZatravka_SHejka := 0.0;
					FP_DlinaSHejki := 0.0;
					FP_DlinaPerehodaSHejka_Konus := 0.0;
					FP_DlinaKonusa := 0.0;
					FP_DlinaPerehodaKonus_TSilindr := 0.0;
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
					START PROCESS Peredacha_OP_Mzatravki;
					START PROCESS Peredacha_OP_Lzatravki;
				ETAP_TP_PEREHOD_ZATR_SHEJKA:
					FP_MassaZatravlivaniya := FP_Mmonokristalla - OP_Mzatravki;
					FP_MassaPerehodaZatravka_SHejka := 0.0;
					FP_MassaSHejki := 0.0;
					FP_MassaPerehodaSHejka_Konus := 0.0;
					FP_MassaKonusa := 0.0;
					FP_MassaPerehodaKonus_TSilindr := 0.0;
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaZatravlivaniya := FP_Lmonokristalla - OP_Lzatravki;
					FP_DlinaPerehodaZatravka_SHejka := 0.0;
					FP_DlinaSHejki := 0.0;
					FP_DlinaPerehodaSHejka_Konus := 0.0;
					FP_DlinaKonusa := 0.0;
					FP_DlinaPerehodaKonus_TSilindr := 0.0;
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_VYRASHIVANIE_SHEJKI:
					FP_MassaPerehodaZatravka_SHejka := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya);
					FP_MassaSHejki := 0.0;
					FP_MassaPerehodaSHejka_Konus := 0.0;
					FP_MassaKonusa := 0.0;
					FP_MassaPerehodaKonus_TSilindr := 0.0;
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaPerehodaZatravka_SHejka := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya);
					FP_DlinaSHejki := 0.0;
					FP_DlinaPerehodaSHejka_Konus := 0.0;
					FP_DlinaKonusa := 0.0;
					FP_DlinaPerehodaKonus_TSilindr := 0.0;
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_TP_PEREHOD_SHEJKA_KONUS:
					FP_MassaSHejki := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka);
					FP_MassaPerehodaSHejka_Konus := 0.0;
					FP_MassaKonusa := 0.0;
					FP_MassaPerehodaKonus_TSilindr := 0.0;
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaSHejki := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka);
					FP_DlinaPerehodaSHejka_Konus := 0.0;
					FP_DlinaKonusa := 0.0;
					FP_DlinaPerehodaKonus_TSilindr := 0.0;
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_VYRASHIVANIE_KONUSA:
					FP_MassaPerehodaSHejka_Konus := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki);
					FP_MassaKonusa := 0.0;
					FP_MassaPerehodaKonus_TSilindr := 0.0;
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaPerehodaSHejka_Konus := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki);
					FP_DlinaKonusa := 0.0;
					FP_DlinaPerehodaKonus_TSilindr := 0.0;
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_PEREHOD_KONUS_TSILINDR:
					FP_MassaKonusa := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki + FP_MassaPerehodaSHejka_Konus);
					FP_MassaPerehodaKonus_TSilindr := 0.0;
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaKonusa := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki + FP_DlinaPerehodaSHejka_Konus);
					FP_DlinaPerehodaKonus_TSilindr := 0.0;
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_STABILIZATSIYA_TSILINDRA:
					FP_MassaPerehodaKonus_TSilindr := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki + FP_MassaPerehodaSHejka_Konus + FP_MassaKonusa);
					FP_MassaStabilizatsiiTSilindra := 0.0;
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaPerehodaKonus_TSilindr := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki + FP_DlinaPerehodaSHejka_Konus + FP_DlinaKonusa);
					FP_DlinaStabilizatsiiTSilindra := 0.0;
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_TP_VYRASHIVANIE_TSILINDRA:
					FP_MassaStabilizatsiiTSilindra := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki + FP_MassaPerehodaSHejka_Konus + FP_MassaKonusa + FP_MassaPerehodaKonus_TSilindr);
					FP_MassaTSilindra := 0.0;
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaStabilizatsiiTSilindra := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki + FP_DlinaPerehodaSHejka_Konus + FP_DlinaKonusa + FP_DlinaPerehodaKonus_TSilindr);
					FP_DlinaTSilindra := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS:
					FP_MassaTSilindra := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki + FP_MassaPerehodaSHejka_Konus + FP_MassaKonusa + FP_MassaPerehodaKonus_TSilindr + FP_MassaStabilizatsiiTSilindra);
					FP_MassaPerehodaTSilindr_ObrKonus := 0.0;
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaTSilindra := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki + FP_DlinaPerehodaSHejka_Konus + FP_DlinaKonusa + FP_DlinaPerehodaKonus_TSilindr + FP_DlinaStabilizatsiiTSilindra);
					FP_DlinaPerehodaTSilindr_ObrKonus := 0.0;
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
					FP_MassaPerehodaTSilindr_ObrKonus := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki + FP_MassaPerehodaSHejka_Konus + FP_MassaKonusa + FP_MassaPerehodaKonus_TSilindr + FP_MassaStabilizatsiiTSilindra + FP_MassaTSilindra);
					FP_MassaObratnogoKonusa := 0.0;
					FP_DlinaPerehodaTSilindr_ObrKonus := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki + FP_DlinaPerehodaSHejka_Konus + FP_DlinaKonusa + FP_DlinaPerehodaKonus_TSilindr + FP_DlinaStabilizatsiiTSilindra + FP_DlinaTSilindra);
					FP_DlinaObratnogoKonusa := 0.0;
				ETAP_OTRYV_KRISTALLA:
					FP_MassaObratnogoKonusa := FP_Mmonokristalla - (OP_Mzatravki + FP_MassaZatravlivaniya + FP_MassaPerehodaZatravka_SHejka + FP_MassaSHejki + FP_MassaPerehodaSHejka_Konus + FP_MassaKonusa + FP_MassaPerehodaKonus_TSilindr + FP_MassaStabilizatsiiTSilindra + FP_MassaTSilindra + FP_MassaPerehodaTSilindr_ObrKonus);
					FP_DlinaObratnogoKonusa := FP_Lmonokristalla - (OP_Lzatravki + FP_DlinaZatravlivaniya + FP_DlinaPerehodaZatravka_SHejka + FP_DlinaSHejki + FP_DlinaPerehodaSHejka_Konus + FP_DlinaKonusa + FP_DlinaPerehodaKonus_TSilindr + FP_DlinaStabilizatsiiTSilindra + FP_DlinaTSilindra + FP_DlinaPerehodaTSilindr_ObrKonus);
				END_CASE
		END_IF
		CASE (LP_Predydushee) OF
			ETAP_ZATRAVLIVANIE:
				FP_MassaZatravlivaniya := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaZatravlivaniya := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_TP_PEREHOD_ZATR_SHEJKA:
				FP_MassaPerehodaZatravka_SHejka := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaPerehodaZatravka_SHejka := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_VYRASHIVANIE_SHEJKI:
				FP_MassaSHejki := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaSHejki := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_TP_PEREHOD_SHEJKA_KONUS:
				FP_MassaPerehodaSHejka_Konus := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaPerehodaSHejka_Konus := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_VYRASHIVANIE_KONUSA:
				FP_MassaKonusa := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaKonusa := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_PEREHOD_KONUS_TSILINDR:
				FP_MassaPerehodaKonus_TSilindr := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaPerehodaKonus_TSilindr := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_STABILIZATSIYA_TSILINDRA:
				FP_MassaStabilizatsiiTSilindra := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaStabilizatsiiTSilindra := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_TP_VYRASHIVANIE_TSILINDRA:
				FP_MassaTSilindra := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaTSilindra := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_TP_PEREHOD_TSIL_OBRAT_KONUS:
				FP_MassaPerehodaTSilindr_ObrKonus := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaPerehodaTSilindr_ObrKonus := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			ETAP_TP_VYRASHIVANIE_OBRAT_KONUSA:
				FP_MassaObratnogoKonusa := FP_Mmonokristalla - FP_Mnachala_tekushej_chasti_monokristalla;
				FP_DlinaObratnogoKonusa := FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla;
			END_CASE
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS Peredacha_OP_Mzatravki
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + IZMN_OP_Mzatravki + OP_Mzatravki) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS Peredacha_OP_Lzatravki
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + IZMN_OP_Lzatravki + OP_Lzatravki) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Hur
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagHur);
		LP_Predydushee := (NOT FP_Hur);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagHur) THEN
			IF (FlagHur = VKL) THEN
				LP_Predydushee := FP_Hur;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Hur) THEN
				LP_Predydushee := FP_Hur;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Hur + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Hur + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Hur) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Hur_DU
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagHur_DU);
		LP_Predydushee := (NOT FP_Hur_DU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagHur_DU) THEN
			IF (FlagHur_DU = VKL) THEN
				LP_Predydushee := FP_Hur_DU;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Hur_DU) THEN
				LP_Predydushee := FP_Hur_DU;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Hur_DU + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Hur_DU + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur_DU) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Hur_DU) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_STAT
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_STAT);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_STAT) THEN
			LP_Predydushee := FP_STAT;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_STAT + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_PEAKW
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_PEAKW);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_PEAKW) THEN
			LP_Predydushee := FP_PEAKW;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_PEAKW + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_PEAKC
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_PEAKC);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_PEAKC) THEN
			LP_Predydushee := FP_PEAKC;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_PEAKC + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_RANGE
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_RANGE);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_RANGE) THEN
			LP_Predydushee := FP_RANGE;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_RANGE + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_DISP
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_DISP);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_DISP) THEN
			LP_Predydushee := FP_DISP;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_DISP + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_MEAN
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_MEAN);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_MEAN) THEN
			LP_Predydushee := FP_MEAN;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_MEAN + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_LASER
	VAR
		LP_Predydushee : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_LASER);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_LASER) THEN
			LP_Predydushee := FP_LASER;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_LASER + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Hur_DV
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagHur_DV);
		LP_Predydushee := (NOT FP_Hur_DV);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagHur_DV) THEN
			IF (FlagHur_DV = VKL) THEN
				LP_Predydushee := FP_Hur_DV;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Hur_DV) THEN
				LP_Predydushee := FP_Hur_DV;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Hur_DV + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Hur_DV + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Hur_DV) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Hur_DV) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Vrosta
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Vrosta);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Vrosta) THEN
			LP_Predydushee := FP_Vrosta;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Vrosta + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Dkr
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagDkr);
		LP_Predydushee := (NOT FP_Dkr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagDkr) THEN
			IF (FlagDkr = VKL) THEN
				LP_Predydushee := FP_Dkr;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Dkr) THEN
				LP_Predydushee := FP_Dkr;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Dkr + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_FP_Dkr + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Dkr + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_FP_Dkr + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Dkr) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Dkr_TDD
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagDkr_TDD);
		LP_Predydushee := (NOT FP_Dkr_TDD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagDkr_TDD) THEN
			IF (FlagDkr_TDD = VKL) THEN
				LP_Predydushee := FP_Dkr_TDD;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Dkr_TDD) THEN
				LP_Predydushee := FP_Dkr_TDD;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Dkr_TDD + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Dkr_TDD + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr_TDD) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Dkr_TDD) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_Dkr_DV
	VAR
		LP_Flag : BOOL;
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Flag := (NOT FlagDkr_DV);
		LP_Predydushee := (NOT FP_Dkr_DV);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Flag <> FlagDkr_DV) THEN
			IF (FlagDkr_DV = VKL) THEN
				LP_Predydushee := FP_Dkr_DV;
				SET STATE PoyavlenieDostovernosti;
			ELSE 
				SET STATE PoyavlenieNedostovernosti;
			END_IF
		ELSE 
			IF (LP_Predydushee <> FP_Dkr_DV) THEN
				LP_Predydushee := FP_Dkr_DV;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Dkr_DV + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti 
		IF (_FUNCTION_ + PK_PIV_FP_Dkr_DV + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieDostovernosti_FLAG 
		IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_Dkr_DV) THEN
			LP_Flag := VKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PoyavlenieNedostovernosti 
		IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_Dkr_DV) THEN
			LP_Flag := VYKL;
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk1);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk1) THEN
			LP_Predydushee := FP_Tvk1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk1 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk2
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk2);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk2) THEN
			LP_Predydushee := FP_Tvk2;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk2 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk3
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk3);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk3) THEN
			LP_Predydushee := FP_Tvk3;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk3 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk4
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk4);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk4) THEN
			LP_Predydushee := FP_Tvk4;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk4 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk5
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk5);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk5) THEN
			LP_Predydushee := FP_Tvk5;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk5 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk6
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk6);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk6) THEN
			LP_Predydushee := FP_Tvk6;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk6 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk7
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk7);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk7) THEN
			LP_Predydushee := FP_Tvk7;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk7 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Tvk8
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Tvk8);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Tvk8) THEN
			LP_Predydushee := FP_Tvk8;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Tvk8 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Udk
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Udk);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Udk) THEN
			LP_Predydushee := FP_Udk;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Udk + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Pnk
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Pnk);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Pnk) THEN
			LP_Predydushee := FP_Pnk;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Pnk + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Pvk
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Pvk);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Pvk) THEN
			LP_Predydushee := FP_Pvk;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Pvk + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Pavd1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Pavd1);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Pavd1) THEN
			LP_Predydushee := FP_Pavd1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Pavd1 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Pavd2
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Pavd2);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Pavd2) THEN
			LP_Predydushee := FP_Pavd2;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Pavd2 + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Mmonokristalla
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Mkremniya_v_tigle);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Mkremniya_v_tigle) THEN
			LP_Predydushee := FP_Mkremniya_v_tigle;
			_VOID_ := _FUNCTION_ + FP_Mkremniya_v_tigle + FP_GlubinaRasplava + OP_Dzerkala_rasplava;
			START PROCESS Peredacha_FP_Mmonokristalla;
			START PROCESS Peredacha_FP_Mkremniya_v_tigle;
			START PROCESS Peredacha_OP_Dzerkala_rasplava;
			START PROCESS Peredacha_FP_GlubinaRasplava;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS Peredacha_FP_Mmonokristalla
	STATE SoobshObIzmenenii1 
		IF (_FUNCTION_ + PK_PIV_FP_Mmonokristalla + FP_Mmonokristalla) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS Peredacha_FP_GlubinaRasplava
	STATE SoobshObIzmenenii2 
		IF (_FUNCTION_ + PK_PIV_FP_GlubinaRasplava + FP_GlubinaRasplava) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS Peredacha_OP_Dzerkala_rasplava
	STATE SoobshObIzmenenii3 
		IF (_FUNCTION_ + PK_PIV_OP_Dzerkala_rasplava + OP_Dzerkala_rasplava) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS Peredacha_FP_Mkremniya_v_tigle
	STATE SoobshObIzmenenii4 
		IF (_FUNCTION_ + PK_PIV_FP_Mkremniya_v_tigle + FP_Mkremniya_v_tigle) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RaschetFP_Hur_DV
	STATE Nachalo 
		FP_Hur_DV := FP_GlubinaRasplava + FP_Xt - NP_Lt_OT_DNA_TIGLYA_V_KNP_DO_PNUR;
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS RaschetFP_Hur
	STATE Nachalo 
		IF (NP_FlagRaschetaHur_poDU AND FlagHur_DU) THEN
			FP_Hur := FP_Hur_DU;
			FlagHur := VKL;
		ELSE 
			IF (NP_FlagRaschetaHur_poDV AND FlagHur_DV) THEN
				FP_Hur := FP_Hur_DV;
				FlagHur := VKL;
			ELSE 
				FP_Hur := FP_Hur_DU;
				FlagHur := VYKL;
			END_IF
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS RaschetFP_Dkr_DV
	VAR
		LP_Mkris_1 : REAL;
		LP_dMkris : REAL;
		LP_Xz_1 : REAL;
		LP_dXz : REAL;
	END_VAR
	
	STATE Nachalo 
		FlagDkr_DV := VYKL;
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			LP_Mkris_1 := FP_Mmonokristalla;
			LP_dMkris := 0.0;
			LP_Xz_1 := FP_Xz;
			LP_dXz := 0.0;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NakoplenieDannyh 
		IF (FP_Mmonokristalla > LP_Mkris_1) THEN
			LP_dMkris := LP_dMkris + (FP_Mmonokristalla - LP_Mkris_1);
			LP_Mkris_1 := FP_Mmonokristalla;
			LP_dXz := LP_dXz + (FP_Xz - LP_Xz_1);
			LP_Xz_1 := FP_Xz;
		END_IF
		IF ((NOT K_DATCHIKA_KASANIYA) OR (FP_Vz <= 0.0)) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT NP_Tizmereniya_Dkr_DV THEN
			SET STATE RaschetDiametra;
		END_TIMEOUT
	END_STATE
	
	STATE RaschetDiametra 
		IF ((LP_dMkris = 0.0) OR (LP_dXz = 0.0)) THEN
			FlagDkr_DV := VYKL;
		ELSE 
			FP_Dkr_DV := 2 * _FUNCTION_ + LP_dMkris / (KOEF_Pi_Ro_TVERDOGO_KREMNIYA * LP_dXz);
			LP_dMkris := 0.0;
			LP_dXz := 0.0;
			FlagDkr_DV := VKL;
		END_IF
		SET STATE NakoplenieDannyh;
	END_STATE
	
END_PROCESS

PROCESS RaschetFP_Dkr
	VAR
		LP_Popravka_k_TDD : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (TekushijEtap > ETAP_VYRASHIVANIE_KONUSA) THEN
			LP_Popravka_k_TDD := NP_POPRAVKA_K_TDD_TSILINDR;
		ELSE 
			IF (TekushijEtap = ETAP_VYRASHIVANIE_KONUSA) THEN
				IF (FP_Dkr_TDD < (TK_DkonusaKonechnyj_Konus - (10.0 + NP_POPRAVKA_K_TDD_TSILINDR))) THEN
					LP_Popravka_k_TDD := NP_POPRAVKA_K_TDD_TSILINDR * (FP_Dkr_TDD - OP_Dkr_NachaloKonusa) / (TK_DkonusaKonechnyj_Konus - (10.0 + NP_POPRAVKA_K_TDD_TSILINDR + OP_Dkr_NachaloKonusa));
				ELSE 
					LP_Popravka_k_TDD := NP_POPRAVKA_K_TDD_TSILINDR;
				END_IF
			ELSE 
				IF (TekushijEtap <= ETAP_VYRASHIVANIE_SHEJKI) THEN
					LP_Popravka_k_TDD := NP_POPRAVKA_K_TDD_SHEJKA;
				ELSE 
					LP_Popravka_k_TDD := 0.0;
				END_IF
			END_IF
		END_IF
		IF (NP_FlagRaschetaDkr_poTDD AND FlagDkr_TDD) THEN
			FP_Dkr := FP_Dkr_TDD + LP_Popravka_k_TDD;
			FlagDkr := VKL;
		ELSE 
			IF (NP_FlagRaschetaDkr_poDV AND FlagDkr_DV) THEN
				FP_Dkr := FP_Dkr_DV;
				FlagDkr := VKL;
			ELSE 
				FP_Dkr := FP_Dkr_TDD + LP_Popravka_k_TDD;
				FlagDkr := VYKL;
			END_IF
		END_IF
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_I_ZR
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_I_ZR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_I_ZR) THEN
			LP_Predydushee := FP_I_ZR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_I_ZR + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_I_ZU
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_I_ZU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_I_ZU) THEN
			LP_Predydushee := FP_I_ZU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_I_ZU + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_I_ZV
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_I_ZV);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_I_ZV) THEN
			LP_Predydushee := FP_I_ZV;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_I_ZV + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_I_TR
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_I_TR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_I_TR) THEN
			LP_Predydushee := FP_I_TR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_I_TR + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_I_TU
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_I_TU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_I_TU) THEN
			LP_Predydushee := FP_I_TU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_I_TU + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_I_TV
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_I_TV);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_I_TV) THEN
			LP_Predydushee := FP_I_TV;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_I_TV + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_VzR
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VzR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_VzR) THEN
			LP_Predydushee := FP_VzR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_VzR + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_VzU
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VzU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_VzU) THEN
			LP_Predydushee := FP_VzU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_VzU + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Vz
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Vz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Vz) THEN
			LP_Predydushee := FP_Vz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Vz + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_ZD_Vz
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Vz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Vz) THEN
			LP_Predydushee := ZD_Vz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_ZD_Vz + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Xz
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Xz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Xz) THEN
			LP_Predydushee := FP_Xz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Xz + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Wz
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Wz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Wz) THEN
			LP_Predydushee := FP_Wz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Wz + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Wz_UGOL
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Wz_UGOL);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Wz_UGOL) THEN
			LP_Predydushee := FP_Wz_UGOL;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Wz_UGOL + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_VtR
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VtR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_VtR) THEN
			LP_Predydushee := FP_VtR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_VtR + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_VtU
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VtU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_VtU) THEN
			LP_Predydushee := FP_VtU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_VtU + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Vt
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Vt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Vt) THEN
			LP_Predydushee := FP_Vt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Vt + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_ZD_Vt
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Vt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Vt) THEN
			LP_Predydushee := ZD_Vt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_ZD_Vt + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Xt
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Xt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Xt) THEN
			LP_Predydushee := FP_Xt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Xt + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Wt
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Wt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Wt) THEN
			LP_Predydushee := FP_Wt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Wt + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniya_FP_Wt_UGOL
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_Wt_UGOL);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_Wt_UGOL) THEN
			LP_Predydushee := FP_Wt_UGOL;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii 
		IF (_FUNCTION_ + PK_PIV_FP_Wt_UGOL + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE KontrolqIzmeneniya;
	END_STATE
	
END_PROCESS

PROCESS KontrolqDostovernostiDTN
	STATE Nachalo 
		IF (FlagDTN) THEN
			IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_DTN) THEN
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_DTN) THEN
				SET STATE SmenaSostoyaniyaVYKL;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaVKL 
		IF (NOT FlagDTN) THEN
			SET STATE TrafikPauza;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaVYKL 
		IF (FlagDTN) THEN
			SET STATE TrafikPauza;
		END_IF
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqDostovernostiDTR
	STATE Nachalo 
		IF (FlagDTR) THEN
			IF (_FUNCTION_ + PK_PIV_ESTQ_DOSTOVERNOSTQ_DTR) THEN
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_NET_DOSTOVERNOSTI_DTR) THEN
				SET STATE SmenaSostoyaniyaVYKL;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE SmenaSostoyaniyaVKL 
		IF (NOT FlagDTR) THEN
			SET STATE TrafikPauza;
		END_IF
	END_STATE
	
	STATE SmenaSostoyaniyaVYKL 
		IF (FlagDTR) THEN
			SET STATE TrafikPauza;
		END_IF
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS ZapuskProtsessovKontrolyaIzmeneniyaZadanij
	STATE Nachalo 
		START PROCESS PALLIATIV_LYLOVA;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VzR;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VzU;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Xz;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wz;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VtR;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VtU;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Xt;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wt;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VzR_PRIVOD;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VzU_PRIVOD;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wz_PRIVOD;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VtR_PRIVOD;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_VtU_PRIVOD;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wt_PRIVOD;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Qgaza;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Pnk;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wipn_K1;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wipn_K1_IP2K;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Wipn_K2_IP2K;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Baza_REG_ROSTA;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Tn;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Tr;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Hur;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Dkr;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Vrosta;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PALLIATIV_LYLOVA
	STATE KontrolqVybrosa_iUprezhdenie 
		IF (_FUNCTION_ + ZD_VzR_PRIVOD > MAKSIMALQNOE_ZADANIE_REG_VzR) THEN
			_VOID_ := _FUNCTION_ + 1 + ZD_VzR_PRIVOD;
			ZD_VzR_PRIVOD := ZD_VzR;
		END_IF
		IF (_FUNCTION_ + ZD_VzU_PRIVOD > MAKSIMALQNOE_ZADANIE_REG_VzU) THEN
			_VOID_ := _FUNCTION_ + 2 + ZD_VzU_PRIVOD;
			ZD_VzU_PRIVOD := ZD_VzU;
		END_IF
		IF (_FUNCTION_ + ZD_Wz_PRIVOD > MAKSIMALQNOE_ZADANIE_REG_Wz) THEN
			_VOID_ := _FUNCTION_ + 3 + ZD_Wz_PRIVOD;
			ZD_Wz_PRIVOD := ZD_Wz;
		END_IF
		IF (_FUNCTION_ + ZD_VtR_PRIVOD > MAKSIMALQNOE_ZADANIE_REG_VtR) THEN
			_VOID_ := _FUNCTION_ + 4 + ZD_VtR_PRIVOD;
			ZD_VtR_PRIVOD := ZD_VtR;
		END_IF
		IF (_FUNCTION_ + ZD_VtU_PRIVOD > MAKSIMALQNOE_ZADANIE_REG_VtU) THEN
			_VOID_ := _FUNCTION_ + 5 + ZD_VtU_PRIVOD;
			ZD_VtU_PRIVOD := ZD_VtU;
		END_IF
		IF (_FUNCTION_ + ZD_Wt_PRIVOD > MAKSIMALQNOE_ZADANIE_REG_Wt) THEN
			_VOID_ := _FUNCTION_ + 6 + ZD_Wt_PRIVOD;
			ZD_Wt_PRIVOD := ZD_Wt;
		END_IF
		SET STATE KontrolqVybrosa_iUprezhdenie;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VzR
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VzR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VzR) THEN
			LP_Predydushee := ZD_VzR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_VzR + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_VzR + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VzR_PRIVOD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VzR_PRIVOD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VzR_PRIVOD) THEN
			IF (_FUNCTION_ + ZD_VzR_PRIVOD < 0.0001) THEN
				IF (ZD_VzR >= 0.0) THEN
					ZD_VzR_PRIVOD := 0.00001;
				ELSE 
					ZD_VzR_PRIVOD := -0.00001;
				END_IF
			END_IF
			LP_Predydushee := ZD_VzR_PRIVOD;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
			IF (_FUNCTION_ + PK_ZR_IZMN_ZD_V + LP_Predydushee) THEN
				SET STATE KontrolqIzmeneniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZR) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VzU
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VzU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VzU) THEN
			LP_Predydushee := ZD_VzU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_VzU + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_VzU + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VzU_PRIVOD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VzU_PRIVOD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VzU_PRIVOD) THEN
			IF (_FUNCTION_ + ZD_VzU_PRIVOD < 0.0001) THEN
				IF (ZD_VzU >= 0.0) THEN
					ZD_VzU_PRIVOD := 0.00001;
				ELSE 
					ZD_VzU_PRIVOD := -0.00001;
				END_IF
			END_IF
			LP_Predydushee := ZD_VzU_PRIVOD;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
			IF (_FUNCTION_ + PK_ZU_IZMN_ZD_V + LP_Predydushee) THEN
				SET STATE KontrolqIzmeneniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZU) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Xz
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Xz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Xz) THEN
			LP_Predydushee := ZD_Xz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Xz + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wz
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wz);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wz) THEN
			LP_Predydushee := ZD_Wz;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_Wz + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Wz + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wz_PRIVOD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wz_PRIVOD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wz_PRIVOD) THEN
			LP_Predydushee := ZD_Wz_PRIVOD;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
			IF (_FUNCTION_ + PK_ZV_IZMN_ZD_V + LP_Predydushee) THEN
				SET STATE KontrolqIzmeneniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_ZV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wz_UGOL
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wz_UGOL);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wz_UGOL) THEN
			LP_Predydushee := ZD_Wz_UGOL;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Wz_UGOL + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VtR
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VtR);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VtR) THEN
			LP_Predydushee := ZD_VtR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_VtR + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_VtR + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VtR_PRIVOD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VtR_PRIVOD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VtR_PRIVOD) THEN
			IF (_FUNCTION_ + ZD_VtR_PRIVOD < 0.0001) THEN
				IF (ZD_VtR >= 0.0) THEN
					ZD_VtR_PRIVOD := 0.00001;
				ELSE 
					ZD_VtR_PRIVOD := -0.00001;
				END_IF
			END_IF
			LP_Predydushee := ZD_VtR_PRIVOD;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
			IF (_FUNCTION_ + PK_TR_IZMN_ZD_V + LP_Predydushee) THEN
				SET STATE KontrolqIzmeneniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TR) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VtU
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VtU);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VtU) THEN
			LP_Predydushee := ZD_VtU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_VtU + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_VtU + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_VtU_PRIVOD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_VtU_PRIVOD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_VtU_PRIVOD) THEN
			IF (_FUNCTION_ + ZD_VtU_PRIVOD < 0.0001) THEN
				IF (ZD_VtU >= 0.0) THEN
					ZD_VtU_PRIVOD := 0.00001;
				ELSE 
					ZD_VtU_PRIVOD := -0.00001;
				END_IF
			END_IF
			LP_Predydushee := ZD_VtU_PRIVOD;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
			IF (_FUNCTION_ + PK_TU_IZMN_ZD_V + LP_Predydushee) THEN
				SET STATE KontrolqIzmeneniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TU) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Xt
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Xt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Xt) THEN
			LP_Predydushee := ZD_Xt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Xt + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wt
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wt);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wt) THEN
			LP_Predydushee := ZD_Wt;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_Wt + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Wt + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wt_PRIVOD
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wt_PRIVOD);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wt_PRIVOD) THEN
			LP_Predydushee := ZD_Wt_PRIVOD;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PRIVODU 
		IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
			IF (_FUNCTION_ + PK_TV_IZMN_ZD_V + LP_Predydushee) THEN
				SET STATE KontrolqIzmeneniya;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PRIVODOM THEN
			SET STATE NarushenieSvyaziSPrivodom;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSPrivodom 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_PRIVODOM_TV) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wt_UGOL
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wt_UGOL);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wt_UGOL) THEN
			LP_Predydushee := ZD_Wt_UGOL;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Wt_UGOL + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Tn
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Tn);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Tn) THEN
			LP_Predydushee := ZD_Tn;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_VPO 
		IF (_FUNCTION_ + PK_VPO_IZMN_ZD_Tn + LP_Predydushee) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_VPO THEN
			SET STATE NarushenieSvyaziSVPO;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Tn + LP_Predydushee) THEN
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziSVPO 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_VPO) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Qgaza
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Qgaza);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Qgaza) THEN
			LP_Predydushee := ZD_Qgaza;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Qgaza + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Pnk
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Pnk);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Pnk) THEN
			LP_Predydushee := ZD_Pnk;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Pnk + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wipn_K1
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wipn_K1);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wipn_K1) THEN
			LP_Predydushee := ZD_Wipn_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Wipn_K1 + LP_Predydushee / 1000.0) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wipn_K1_IP2K
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wipn_K1);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wipn_K1) THEN
			LP_Predydushee := ZD_Wipn_K1;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_IP2K 
		IF (NP_TipIPN = IPN_IP2K) THEN
			IF (_FUNCTION_ < CHISLO_LYLOVA_V_BUFERE) THEN
				IF (_FUNCTION_ + PK_IP2K_K1_IZMN_ZD_Wipn_K1 + LP_Predydushee) THEN
					SET STATE KontrolqIzmeneniya;
				END_IF
			ELSE 
				SET STATE Nachalo;
			END_IF
		ELSE 
			SET STATE KontrolqIzmeneniya;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_IP THEN
			SET STATE NarushenieSvyaziS_IP;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyaziS_IP 
		_VOID_ := _FUNCTION_;
		IF (_FUNCTION_ + SRABOTAL_TAJMAUT_NA_SVYAZQ_S_IP2K_K1) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Wipn_K2_IP2K
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Wipn_K2);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Wipn_K2) THEN
			LP_Predydushee := ZD_Wipn_K2;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Wipn_K2 + LP_Predydushee / 1000.0) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Baza_REG_ROSTA
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Baza_REG_ROSTA);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Baza_REG_ROSTA) THEN
			LP_Predydushee := ZD_Baza_REG_ROSTA;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Baza_REG_ROSTA + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Tr
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Tr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Tr) THEN
			LP_Predydushee := ZD_Tr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Tr + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Hur
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Hur);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Hur) THEN
			LP_Predydushee := ZD_Hur;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Hur + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Dkr
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Dkr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Dkr) THEN
			LP_Predydushee := ZD_Dkr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Dkr + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaZadanij_ZD_Vrosta
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT ZD_Vrosta);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> ZD_Vrosta) THEN
			LP_Predydushee := ZD_Vrosta;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshObIzmenenii_PIV 
		IF (_FUNCTION_ + IZMN_ZD_Vrosta + LP_Predydushee) THEN
			SET STATE TrafikPauza;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS PeredachaPIVParametrov_REG_DK
	VAR
		LP_KodSobytiya_k_PIV : INT;
		LP_PLAV_Parametr_k_PIV : REAL;
		LP_DTSEL_Parametr_k_PIV : LINT;
	END_VAR
	
	STATE Param_1 
		LP_PLAV_Parametr_k_PIV := NP_Kp_Dkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_Kp_Dkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_1 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_2 
		LP_PLAV_Parametr_k_PIV := NP_Kd_Dkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_Kd_Dkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_2 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_3 
		LP_PLAV_Parametr_k_PIV := NP_Ki_Dkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_Ki_Dkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_3 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_4 
		LP_PLAV_Parametr_k_PIV := NP_Kz_Dkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_Kz_Dkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_4 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_5 
		LP_PLAV_Parametr_k_PIV := NP_Dkr_MAX;
		LP_KodSobytiya_k_PIV := IZMN_NP_Dkr_MAX;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_5 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_6 
		LP_PLAV_Parametr_k_PIV := NP_DeltaVzRS_MAH;
		LP_KodSobytiya_k_PIV := IZMN_NP_DeltaVzRS_MAH;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_6 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_7 
		LP_DTSEL_Parametr_k_PIV := NP_VremyaPerehodnogoProtsessaDkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_VremyaPerehodnogoProtsessaDkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaDTSEL_7 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_DTSEL_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_8 
		LP_PLAV_Parametr_k_PIV := NP_PogreshnostqDkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_PogreshnostqDkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_8 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_9 
		LP_DTSEL_Parametr_k_PIV := NP_Pauza_Dkr;
		LP_KodSobytiya_k_PIV := IZMN_NP_Pauza_Dkr;
		SET NEXT;
	END_STATE
	
	STATE PeredachaDTSEL_9 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_DTSEL_Parametr_k_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS PeredachaPIVParametrov_REG_ROSTA
	VAR
		LP_KodSobytiya_k_PIV : INT;
		LP_PLAV_Parametr_k_PIV : REAL;
		LP_DTSEL_Parametr_k_PIV : LINT;
	END_VAR
	
	STATE Param_10 
		LP_PLAV_Parametr_k_PIV := NP_Kp_Vrosta;
		LP_KodSobytiya_k_PIV := IZMN_NP_Kp_Vrosta;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_10 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_11 
		LP_PLAV_Parametr_k_PIV := NP_Kd_Vrosta;
		LP_KodSobytiya_k_PIV := IZMN_NP_Kd_Vrosta;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_11 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_12 
		LP_PLAV_Parametr_k_PIV := NP_Ki_Vrosta;
		LP_KodSobytiya_k_PIV := IZMN_NP_Ki_Vrosta;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_12 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_13 
		LP_PLAV_Parametr_k_PIV := NP_Kz_Vrosta;
		LP_KodSobytiya_k_PIV := IZMN_NP_Kz_Vrosta;
		SET NEXT;
	END_STATE
	
	STATE PeredachaPLAV_13 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_PLAV_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_14 
		LP_DTSEL_Parametr_k_PIV := NP_Pauza_REG_ROSTA;
		LP_KodSobytiya_k_PIV := IZMN_NP_Pauza_REG_ROSTA;
		SET NEXT;
	END_STATE
	
	STATE PeredachaDTSEL_14 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_DTSEL_Parametr_k_PIV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Param_15 
		LP_DTSEL_Parametr_k_PIV := NP_VremyaOsredneniyaVzVrosta;
		LP_KodSobytiya_k_PIV := IZMN_NP_VremyaOsredneniyaVzVrosta;
		SET NEXT;
	END_STATE
	
	STATE PeredachaDTSEL_15 
		IF (_FUNCTION_ + LP_KodSobytiya_k_PIV + LP_DTSEL_Parametr_k_PIV) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_KIP
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (FP_Pnk > NP_Patmosf) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_SOZDATQ_ATMOSFERNOE_V_NK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_KontrVakuumirovanie
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (NOT (Flag_AVD1 OR Flag_AVD2)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (FP_Pnk > NP_Patmosf) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_SOZDATQ_ATMOSFERNOE_V_NK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_KontrolqNatekaniya
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (NOT (Flag_AVD1 OR Flag_AVD2)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (FP_Pnk < TK_GlubokijVakuum_R2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_SOZDATQ_VAKUUM_V_NK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_RabocheeVakuumirovanie
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (NOT (Flag_AVD1 OR Flag_AVD2)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_PodgotovkaPlavleniyuZagruzki
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (FP_Pnk < TK_GlubokijVakuum_R2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_SOZDATQ_VAKUUM_V_NK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (NOT (PROCESS REG_W_IPN_K1 IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_PlavlenieZagruzki
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (KOORD_TIG = TIG_V_KNP) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_USTANOVITQ_TIGELQ_V_KNP) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (FP_Pnk < 20.0) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_SOZDATQ_VAKUUM_V_NK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (NOT (PROCESS REG_RG IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_PodgotovkaStabilizatsiiRasplava
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_StabilizatsiyaRasplava
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_UR) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaIstochnikaPitaniya 
		IF (PROCESS REG_W_IPN_K1 IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NAGREVATELQ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((NOT K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_PodgotovkaProgrevaZatravki
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_UR) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_ProgrevZatravki
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		IF (KOORD_ZAT = ZAT_V_POLOZHENII_PROGREVA) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_USTANOVITQ_ZATRAVKU_V_P_PROGREVA) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRegulyatoraUrovnya 
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_UR) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_ZatravlivanieKristalla
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRegulyatoraUrovnya 
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_UR) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF ((K_DATCHIKA_KASANIYA) AND (_FUNCTION_ + FP_Xz > 360.0)) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_VyrashivanieKristalla
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRegulyatoraUrovnya 
		IF (PROCESS REG_UR IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_UR) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRegTNagrevatelya 
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_TN) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF (K_DATCHIKA_KASANIYA) THEN
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		SET NEXT;
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRegTNagrevatelya 
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_TN) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF (K_DATCHIKA_KASANIYA) THEN
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_OtryvKristalla
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		SET NEXT;
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRegTNagrevatelya 
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_TN) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF (K_DATCHIKA_KASANIYA) THEN
			SET NEXT;
		ELSE 
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqSTS_RA_OhlazhdenieKristalla
	VAR
		LP_FlagOshibki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_FlagOshibki := VYKL;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRegulyatoraUrovnya 
		IF (NOT (PROCESS REG_UR IN STATE ACTIVE)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VYKLYUCHITQ_REG_UR) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaAVD1 
		IF (Flag_AVD1 OR Flag_AVD2) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_NASOSY) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (PROCESS REG_D IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_D) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRashodaGaza 
		IF (PROCESS REG_RG IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_RG) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaRegTNagrevatelya 
		IF (PROCESS REG_TN IN STATE ACTIVE) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_VKLYUCHITQ_REG_TN) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE7 
		IF (K_VE7 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_BPK) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE9 
		IF (U_VE9 = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_VE9) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE12 
		IF (U_VE12 = ZAKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE12) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaKasaniyaRasplava 
		IF (K_DATCHIKA_KASANIYA) THEN
			IF (_FUNCTION_ + PK_PIV_PROBLEMY_S_KASANIEM_RASPLAVA) THEN
				SET NEXT;
			END_IF
		ELSE 
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaVE5VE6VE8 
		IF ((NOT K_VE5) AND (NOT K_VE6) AND (NOT U_VE8)) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_ZAKRYTQ_VE5_VE6_VE8) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaSostoyaniyaZatvoraVakuumnogo 
		IF (K_OTKR_ZATVOR_V = OTKR) THEN
			SET NEXT;
		ELSE 
			LP_FlagOshibki := VKL;
			IF (_FUNCTION_ + PK_PIV_OTKRYTQ_ZATVOR_VAKUUMNYJ) THEN
				SET NEXT;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizFlagaOshibki 
		IF (LP_FlagOshibki = VYKL) THEN
			STOP;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_KontrolqIshodnogoPolozheniya
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_KIP;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolyaI_PrivedenieV_Ishodnoe 
		IF (NOT (PROCESS KontrolqSTS_RA_KIP IN STATE ACTIVE)) THEN
			IF ((PROCESS KontrolqSTS_RA_KIP IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				START PROCESS OTKR_VM14;
				START PROCESS TEST_TU;
				START PROCESS TestDatchikaKasaniya;
				START PROCESS TIG_KNP;
				START PROCESS VYK_AVD1;
				START PROCESS VYK_AVD2;
				START PROCESS VYK_REG_RG;
				STOP PROCESS VYK_REG_D;
				START PROCESS ZAKR_AVD1_MO_VK_VE5;
				START PROCESS ZAKR_AVD2_MO_VK_VE6;
				START PROCESS ZAKR_BPK_VE7;
				START PROCESS ZAKR_PRODUVKA_VE8;
				START PROCESS ZAKR_NADDUV_VK_VE9;
				START PROCESS ZAKR_NADDUV_NK_VE12;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskZAT_KVP_PosleTestaDK 
		IF (PROCESS TestDatchikaKasaniya IN STATE INACTIVE) THEN
			START PROCESS ZAT_KVP;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF ((PROCESS OTKR_VM14 IN STATE INACTIVE) AND (PROCESS TEST_TU IN STATE INACTIVE) AND (PROCESS TestDatchikaKasaniya IN STATE INACTIVE) AND (PROCESS ZAT_KVP IN STATE INACTIVE) AND (PROCESS TIG_KNP IN STATE INACTIVE) AND (PROCESS VYK_AVD1 IN STATE INACTIVE) AND (PROCESS VYK_AVD2 IN STATE INACTIVE) AND (PROCESS VYK_REG_RG IN STATE INACTIVE) AND (PROCESS VYK_REG_D IN STATE INACTIVE) AND (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE INACTIVE) AND (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE INACTIVE) AND (PROCESS ZAKR_BPK_VE7 IN STATE INACTIVE) AND (PROCESS ZAKR_PRODUVKA_VE8 IN STATE INACTIVE) AND (PROCESS ZAKR_NADDUV_NK_VE12 IN STATE INACTIVE) AND (PROCESS ZAKR_NADDUV_VK_VE9 IN STATE INACTIVE)) THEN
			IF ((PROCESS OTKR_VM14 IN STATE ERROR) OR (PROCESS TEST_TU IN STATE ERROR) OR (PROCESS TestDatchikaKasaniya IN STATE ERROR) OR (PROCESS ZAT_KVP IN STATE ERROR) OR (PROCESS TIG_KNP IN STATE ERROR) OR (PROCESS VYK_AVD1 IN STATE ERROR) OR (PROCESS VYK_AVD2 IN STATE ERROR) OR (PROCESS VYK_REG_RG IN STATE ERROR) OR (PROCESS VYK_REG_D IN STATE ERROR) OR (PROCESS ZAKR_AVD1_MO_VK_VE5 IN STATE ERROR) OR (PROCESS ZAKR_AVD2_MO_VK_VE6 IN STATE ERROR) OR (PROCESS ZAKR_BPK_VE7 IN STATE ERROR) OR (PROCESS ZAKR_PRODUVKA_VE8 IN STATE ERROR) OR (PROCESS ZAKR_NADDUV_NK_VE12 IN STATE ERROR) OR (PROCESS ZAKR_NADDUV_VK_VE9 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RA_KontrolqnoeVakuumirovanie
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_KontrVakuumirovanie;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolyaI_VklNasosov 
		IF (NOT (PROCESS KontrolqSTS_RA_KontrVakuumirovanie IN STATE ACTIVE)) THEN
			IF ((PROCESS KontrolqSTS_RA_KontrVakuumirovanie IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				START PROCESS VrashenieZatravki_iTiglyaPriKontroleNatekaniya;
				START PROCESS VklyuchenieNasosovIOtkachkaNKdoR2;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVklNasosovI_VklProduvkiArgonom 
		IF (NOT (PROCESS VklyuchenieNasosovIOtkachkaNKdoR2 IN STATE ACTIVE)) THEN
			IF ((PROCESS VklyuchenieNasosovIOtkachkaNKdoR2 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				START PROCESS ProduvkaArgonom;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqProduvkiArgonom 
		IF (NOT (PROCESS ProduvkaArgonom IN STATE ACTIVE)) THEN
			IF ((PROCESS ProduvkaArgonom IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqOtkachkiR2_T5 
		START PROCESS KontrolqOkonchatVakuum_Pnk_R2_T5;
		SET NEXT;
	END_STATE
	
	STATE AnalizZaversheniyaKontrolyaOtkachkiR2_T5 
		IF (NOT (PROCESS KontrolqOkonchatVakuum_Pnk_R2_T5 IN STATE ACTIVE)) THEN
			IF ((PROCESS KontrolqOkonchatVakuum_Pnk_R2_T5 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskProtsessovVyklyucheniyaAVD 
		START PROCESS VYK_AVD1;
		START PROCESS VYK_AVD2;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniyaAVD1_2 
		IF ((PROCESS VYK_AVD1 IN STATE INACTIVE) AND (PROCESS VYK_AVD2 IN STATE INACTIVE) AND (PROCESS VrashenieZatravki_iTiglyaPriKontroleNatekaniya IN STATE INACTIVE)) THEN
			IF ((PROCESS VYK_AVD1 IN STATE ERROR) OR (PROCESS VYK_AVD2 IN STATE ERROR) OR (PROCESS VrashenieZatravki_iTiglyaPriKontroleNatekaniya IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VrashenieZatravki_iTiglyaPriKontroleNatekaniya
	STATE Nachalo 
		ZD_Xz := -OBLASTQ_ZAPRETA_VRASHENIYA_ZATRAVKI - 5.0;
		ZD_Xt := 5.0;
		START PROCESS ZAT_UK;
		START PROCESS TIG_UK;
		SET NEXT;
	END_STATE
	
	STATE OzhidaniePrihoda 
		IF ((PROCESS ZAT_UK IN STATE INACTIVE) AND (PROCESS TIG_UK IN STATE INACTIVE)) THEN
			IF ((PROCESS ZAT_UK IN STATE ERROR) OR (PROCESS TIG_UK IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieVrasheniyaTiglya_Zatravki 
		ZD_Wt := -1.0;
		ZD_Wz := 6.0;
		START PROCESS ZAT_VR;
		START PROCESS TIG_VR;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS VklyuchenieNasosovIOtkachkaNKdoR2
	STATE ZapuskProtsessov 
		START PROCESS VKL_AVD1_NK;
		START PROCESS VKL_AVD2_NK;
		START PROCESS OTKR_BPK_VE7;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniya 
		IF (NOT (PROCESS VKL_AVD1_NK IN STATE ACTIVE) AND NOT (PROCESS VKL_AVD2_NK IN STATE ACTIVE) AND NOT (PROCESS OTKR_BPK_VE7 IN STATE ACTIVE)) THEN
			IF ((PROCESS VKL_AVD1_NK IN STATE ERROR) OR (PROCESS VKL_AVD1_NK IN STATE ERROR) OR (PROCESS OTKR_BPK_VE7 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqOtkachkiR2_T2 
		START PROCESS KontrolqOtkachki_Pnk_R2_T2;
		SET NEXT;
	END_STATE
	
	STATE AnalizZaversheniyaKontrolyaOtkachkiR2_T2 
		IF (NOT (PROCESS KontrolqOtkachki_Pnk_R2_T2 IN STATE ACTIVE)) THEN
			IF ((PROCESS KontrolqOtkachki_Pnk_R2_T2 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtkachki_Pnk_R2_T2
	STATE Nachalo 
		IF (FP_Pnk <= TK_GlubokijVakuum_R2) THEN
			STOP;
		END_IF
		TIMEOUT TK_TotkachkiDopustimoe_T2doP2 THEN
			SET STATE PeredachaSoobsheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_RA_T2_ISTEKLO_P2_NE_DOSTIGNUTO) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqOkonchatVakuum_Pnk_R2_T5
	STATE Nachalo 
		TIMEOUT TK_VremyaOtkachkiPosleOsushki_T5 THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaDavleniyaR2 
		IF (FP_Pnk <= TK_GlubokijVakuum_R2) THEN
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_RA_T5_ISTEKLO_P2_NE_DOSTIGNUTO) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ProduvkaArgonom
	VAR
		LP_TekNomerTSiklProduvki : INT;
	END_VAR
	
	STATE Nachalo 
		LP_TekNomerTSiklProduvki := 0;
		SET STATE OcherednojTSiklProduvki;
	END_STATE
	
	STATE OcherednojTSiklProduvki 
		LP_TekNomerTSiklProduvki := LP_TekNomerTSiklProduvki + 1;
		IF (LP_TekNomerTSiklProduvki > TK_CHisloTSiklovOsushki_Nts) THEN
			STOP;
		ELSE 
			START PROCESS OTKR_PRODUVKA_VE8;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ProverkaOtkrytiya 
		IF (NOT (PROCESS OTKR_PRODUVKA_VE8 IN STATE ACTIVE)) THEN
			IF ((PROCESS OTKR_PRODUVKA_VE8 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Pauza1 
		TIMEOUT TK_VremyaProduvki_T3 THEN
			SET STATE ZakrytieProduvki;
		END_TIMEOUT
	END_STATE
	
	STATE ZakrytieProduvki 
		START PROCESS ZAKR_PRODUVKA_VE8;
		SET NEXT;
	END_STATE
	
	STATE ProverkaZakrytiya 
		IF (NOT (PROCESS ZAKR_PRODUVKA_VE8 IN STATE ACTIVE)) THEN
			IF ((PROCESS ZAKR_PRODUVKA_VE8 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Pauza2 
		TIMEOUT TK_TotkachkiArgona_T4 THEN
			SET STATE OcherednojTSiklProduvki;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS RA_KontrolqNatekaniya
	VAR
		LP_FP_Pnk_T1 : REAL;
		LP_NatekanieZaVremyaKontrolya : REAL;
	END_VAR
	
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_KontrolqNatekaniya;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_KontrolqNatekaniya IN STATE ACTIVE)) THEN
			IF ((PROCESS KontrolqSTS_RA_KontrolqNatekaniya IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE Pauza1 
		TIMEOUT TK_Totgazovki_KontrNat THEN
			SET STATE DavlenieNK_NachalaEtapa;
		END_TIMEOUT
	END_STATE
	
	STATE DavlenieNK_NachalaEtapa 
		LP_FP_Pnk_T1 := FP_Pnk;
		SET NEXT;
	END_STATE
	
	STATE Pauza2 
		TIMEOUT TK_PeriodKontrolya_KontrNat THEN
			SET STATE VychislenieNatekaniyaNK_ZaVremyaKontrolya;
		END_TIMEOUT
	END_STATE
	
	STATE VychislenieNatekaniyaNK_ZaVremyaKontrolya 
		LP_NatekanieZaVremyaKontrolya := NP_ObqemVakPolosti_V * (FP_Pnk - LP_FP_Pnk_T1) * 10.0 / TK_PeriodKontrolya_KontrNat;
		SET NEXT;
	END_STATE
	
	STATE SoobshObNatekaniiZaVseVremyaKontrolya 
		IF (_FUNCTION_ + PK_PIV_RA_VELICHINA_NATEKANIYA + LP_NatekanieZaVremyaKontrolya) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaGermetichnosti 
		START PROCESS VYK_TIG_VR;
		START PROCESS VYK_ZAT_VR;
		START PROCESS TIG_KNP;
		START PROCESS ZAT_KVP;
		IF (LP_NatekanieZaVremyaKontrolya <= TK_DopustimoeNatekanie_KntrNat) THEN
			SET NEXT;
		ELSE 
			SET STATE UstanNeGermetichna;
		END_IF
	END_STATE
	
	STATE UstanGermetichna 
		IF (_FUNCTION_ + PK_PIV_RA_GERMETICHNOSTQ_USTANOVKI_V_NORME) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE UstanNeGermetichna 
		IF (_FUNCTION_ + PK_PIV_RA_USTANOVKA_NEGERMETICHNA) THEN
			START PROCESS Perehod_vRR;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS IzmerenieNatekaniya
	VAR
		LP_FP_Pnk_T1 : REAL;
		LP_NatekanieZaTSikl : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_FP_Pnk_T1 := FP_Pnk;
		SET NEXT;
	END_STATE
	
	STATE Pauza10sek 
		TIMEOUT TK_PeriodKontrolya_KontrNat THEN
			SET STATE VychislenieNatekaniyaZaTSikl;
		END_TIMEOUT
	END_STATE
	
	STATE VychislenieNatekaniyaZaTSikl 
		LP_NatekanieZaTSikl := NP_ObqemVakPolosti_V * (FP_Pnk - LP_FP_Pnk_T1) * 10.0 / TK_PeriodKontrolya_KontrNat;
		LP_FP_Pnk_T1 := FP_Pnk;
		SET NEXT;
	END_STATE
	
	STATE SoobshObNatekanii 
		IF (_FUNCTION_ + PK_PIV_FP_VELICHINA_NATEKANIYA + LP_NatekanieZaTSikl) THEN
			SET STATE Pauza10sek;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Pauza10sek;
	END_STATE
	
END_PROCESS

PROCESS RA_RabocheeVakuumirovanie
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_RabocheeVakuumirovanie;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_RabocheeVakuumirovanie IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_RabocheeVakuumirovanie IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaDavleniya 
		IF (FP_Pnk < TK_GlubokijVakuum_R2) THEN
			SET NEXT;
		ELSE 
			SET STATE VklyuchenieAVD1_2_NK;
		END_IF
	END_STATE
	
	STATE VklyuchenieAVD1_NK 
		START PROCESS VKL_AVD1_NK;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniyaAVD1_NK 
		IF (NOT (PROCESS VKL_AVD1_NK IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_AVD1_NK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskKontrolyaRabVakOtrabotal_AVD1 
		START PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtrabatyvaniyaKRVsAVD1 
		IF (NOT (PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieAVD1_2_NK 
		START PROCESS VKL_AVD1_NK;
		START PROCESS VKL_AVD2_NK;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniyaAVD1_2_NK 
		IF (NOT (PROCESS VKL_AVD1_NK IN STATE ACTIVE) AND NOT (PROCESS VKL_AVD2_NK IN STATE ACTIVE)) THEN
			IF ((PROCESS VKL_AVD1_NK IN STATE ERROR) OR (PROCESS VKL_AVD1_NK IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskKontrolyaRabVakOtrabotal_AVD1_2 
		START PROCESS KontrolqOtkachki_Pnk_R2_T2;
		SET NEXT;
	END_STATE
	
	STATE KontrolqOtrabatyvaniyaKRVsAVD1_2 
		IF (NOT (PROCESS KontrolqOtkachki_Pnk_R2_T2 IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqOtkachki_Pnk_R2_T2 IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VyklyuchenieAVD2 
		START PROCESS VYK_AVD2;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVyklyucheniyaAVD2 
		IF (NOT (PROCESS VYK_AVD2 IN STATE ACTIVE)) THEN
			IF ((PROCESS VYK_AVD2 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS KontrolqRabochegoVakuumirovaniya_Pnk_R2_T7
	STATE Nachalo 
		IF (FP_Pnk <= TK_GlubokijVakuum_R2) THEN
			STOP;
		END_IF
		TIMEOUT TK_VremyaOtkachkiDopustimoe_T7 THEN
			SET STATE PeredachaSoobsheniya;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_RA_T7_ISTEKLO_P2_NE_DOSTIGNUTO) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_PodgotovkaPlavleniyuZagruzki
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_PodgotovkaPlavleniyuZagruzki;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_PodgotovkaPlavleniyuZagruzki IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_PodgotovkaPlavleniyuZagruzki IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskProtsessov 
		START PROCESS ZAT_DP;
		START PROCESS TIG_KNP;
		START PROCESS VKL_REG_W_IPN_K1;
		START PROCESS OTKR_NADDUV_VK_VE9;
		START PROCESS ZAKR_BPK_VE7;
		ZD_Pnk := 5.0;
		START PROCESS REG_D;
		SET NEXT;
	END_STATE
	
	STATE ProverkaZapuskaProtsessov 
		IF ((PROCESS ZAT_DP IN STATE INACTIVE) AND (PROCESS OTKR_NADDUV_VK_VE9 IN STATE INACTIVE) AND (PROCESS VKL_REG_W_IPN_K1 IN STATE INACTIVE) AND (PROCESS ZAKR_BPK_VE7 IN STATE INACTIVE) AND (PROCESS TIG_KNP IN STATE INACTIVE)) THEN
			IF ((PROCESS ZAT_DP IN STATE ERROR) OR (PROCESS VKL_REG_W_IPN_K1 IN STATE ERROR) OR (PROCESS OTKR_NADDUV_VK_VE9 IN STATE ERROR) OR (PROCESS ZAKR_BPK_VE7 IN STATE ERROR) OR (PROCESS TIG_KNP IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_TP_PlavlenieZagruzki
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_PlavlenieZagruzki;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_PlavlenieZagruzki IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_PlavlenieZagruzki IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloEtapa 
		START PROCESS KontrolqPoyavleniyaRasplava;
		Flag_KonetsTP := VYKL;
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_PLAVLENIE_ZAGRUZKI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqUslovijOkonchaniyaPervogoEtapa 
		IF (PROCESS KontrolqPoyavleniyaRasplava IN STATE ACTIVE) THEN
			STOP PROCESS KontrolqPoyavleniyaRasplava;
			STOP PROCESS KontrolqRasplavleniya;
			Flag_KonetsTP := PK_PIV_KONETS_TP_PO_OSHIBKE;
		ELSE 
			IF (PROCESS KontrolqPoyavleniyaRasplava IN STATE STOP) THEN
				Flag_KonetsTP := PK_PIV_NORMALQNYJ_KONETS_TP;
			ELSE 
				Flag_KonetsTP := PK_PIV_KONETS_TP_PO_OSHIBKE;
			END_IF
		END_IF
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				SET NEXT;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqUslovijOkonchaniyaPlavleniya 
		IF (PROCESS KontrolqRasplavleniya IN STATE INACTIVE) THEN
			IF (PROCESS KontrolqRasplavleniya IN STATE STOP) THEN
				STOP;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS KontrolqPoyavleniyaRasplava
	VAR
		LP_Tmaks : REAL;
		LP_Tmin : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (FP_Tr > 1200.0) THEN
			LP_Tmaks := FP_Tr;
			LP_Tmin := FP_Tr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqPlatoTemperatury 
		IF (LP_Tmaks < FP_Tr) THEN
			LP_Tmaks := FP_Tr;
			SET STATE KontrolqPlatoTemperatury;
		END_IF
		TIMEOUT POL_MINUTY THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieOPoyavleniiRasplava 
		IF (_FUNCTION_ + PK_PIV_RA_POYAVILSYA_RASPLAV) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE OkonchanieTPRasplavleniya 
		IF (_FUNCTION_ + PK_PIV_RA_PREKRATITQ_OTRABOTKU_TP) THEN
			START PROCESS KontrolqRasplavleniya;
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqRasplavleniya
	VAR
		LP_Tmaks : REAL;
		LP_Tmin : REAL;
		LP_Schetchik : INT;
	END_VAR
	
	STATE Nachalo 
		LP_Tmaks := FP_Tdtr;
		LP_Tmin := FP_Tdtr;
		LP_Schetchik := 0;
		START PROCESS SbrosMoshnostiPriRasplavlenii;
		SET NEXT;
	END_STATE
	
	STATE RaschetTmaksTminDlyaKontrolyaRasplavleniya 
		IF (LP_Tmaks < FP_Tdtr) THEN
			LP_Tmaks := FP_Tdtr;
		END_IF
		IF (LP_Tmin > FP_Tdtr) THEN
			LP_Tmin := FP_Tdtr;
		END_IF
		TIMEOUT DVADTSATQ_SEKUND THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqRasplavleniya 
		IF ((LP_Tmaks - LP_Tmin) < 80.0) THEN
			LP_Schetchik := LP_Schetchik + 1;
		ELSE 
			LP_Schetchik := 0;
		END_IF
		IF (LP_Schetchik < 6) THEN
			LP_Tmaks := FP_Tdtr;
			LP_Tmin := FP_Tdtr;
			SET STATE RaschetTmaksTminDlyaKontrolyaRasplavleniya;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE SoobshenieORasplavlenii 
		IF (_FUNCTION_ + PK_PIV_RA_ZAGRUZKA_V_OSNOVNOM_RASPLAVLENA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS SbrosMoshnostiPriRasplavlenii
	STATE Pauza20min 
		IF (PROCESS KontrolqRasplavleniya IN STATE INACTIVE) THEN
			STOP;
		END_IF
		TIMEOUT DVADTSATQ_MINUT THEN
			ZD_Wipn_K1 := TK_Wipn_K1_PodgStabRaspl + 10000.0;
			STOP;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS RA_PodgotovkaStabilizatsiiRasplava
	STATE Nachalo 
		ZD_Qgaza := TK_Qgaza_PodgStabRaspl;
		ZD_Pnk := TK_Pnk_PodgStabRaspl;
		ZD_Hur := TK_Hur_PodgStabRaspl;
		ZD_Wipn_K1 := TK_Wipn_K1_PodgStabRaspl;
		ZD_Wt := TK_Wt_PodgStabRaspl;
		SET NEXT;
	END_STATE
	
	STATE KontrolqIshPolozheniya 
		START PROCESS KontrolqSTS_RA_PodgotovkaStabilizatsiiRasplava;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolyaI_ZapuskTIG_PVK 
		IF (NOT (PROCESS KontrolqSTS_RA_PodgotovkaStabilizatsiiRasplava IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_PodgotovkaStabilizatsiiRasplava IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS TIG_PVK;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ProverkaTIG_PVK 
		IF (NOT (PROCESS TIG_PVK IN STATE ACTIVE)) THEN
			IF (PROCESS TIG_PVK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaNaNormalizatsiyuDU 
		TIMEOUT TRI_MINUTY THEN
			SET STATE VklyuchenieREG_UR;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieREG_UR 
		START PROCESS REG_UR;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RA_PodgotovkaProgrevaZatravki
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_PodgotovkaProgrevaZatravki;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_PodgotovkaProgrevaZatravki IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_PodgotovkaProgrevaZatravki IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZatravkuDP 
		START PROCESS ZAT_DP;
		SET NEXT;
	END_STATE
	
	STATE KontrolqVypolneniyaPrivyazki 
		IF (NOT (PROCESS ZAT_DP IN STATE ACTIVE)) THEN
			IF (PROCESS ZAT_DP IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE VychislenieZadaniya 
		ZD_Xz := -(NP_Lz_OT_KVP_DO_STYKA_NK + NP_L_OT_STYKA_NK_DO_PNUR_L1 - ZD_Hur - TK_RasstoyanieDoRasplava_Lpp - FP_Lmonokristalla);
		ZD_VzU := TK_VzDvizheniya_kRasplavu_Vpp;
		START PROCESS ZAT_UK_US;
		SET NEXT;
	END_STATE
	
	STATE OzhidaniePrihoda 
		IF (NOT (PROCESS ZAT_UK_US IN STATE ACTIVE)) THEN
			IF (PROCESS ZAT_UK_US IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RA_TP_ProgrevZatravki
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_ProgrevZatravki;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_ProgrevZatravki IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_ProgrevZatravki IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloEtapa 
		ZD_Tn := FP_Tn;
		ZD_Tr := TK_Tr_StabRaspl;
		IF (TK_Rezhim_StabRaspl = STABILIZATSIYA_PO_MOSHNOSTI) THEN
			SET STATE PeredachaSoobsheniyaZapuskTP;
		ELSE 
			START PROCESS VKL_REG_TR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqZapuskaRegulyatora_iNachaloTP 
		IF (NOT (PROCESS VKL_REG_TR IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_TR IN STATE STOP) THEN
				Flag_KonetsTP := VYKL;
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_PROGREV_ZATRAVKI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_Zatravlivanie
	VAR
		LP_Koordinata : REAL;
		LP_VremyaPogruzheniya : LINT;
	END_VAR
	
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_ZatravlivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_ZatravlivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_ZatravlivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskRegulyatoraTR 
		IF (TK_Rezhim_StabRaspl = STABILIZATSIYA_PO_MOSHNOSTI) THEN
			SET STATE ZapuskRegulyatorov;
		ELSE 
			ZD_Tn := FP_Tn;
			ZD_Tr := TK_Tr_StabRaspl;
			START PROCESS VKL_REG_TR;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE KontrolqVhozhdeniyaTr_vTrubku10grad 
		IF (((FP_Tr - ZD_Tr) < 10.0) AND ((FP_Tr - ZD_Tr) >= 0.0)) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZapuskRegulyatorov 
		LP_Koordinata := -FP_Xz;
		ZD_VzR := -TK_Vz_Pogruzheniya_Zatravl;
		START PROCESS ZAT_RS;
		SET NEXT;
	END_STATE
	
	STATE OzhidanieKasaniya 
		IF (FP_Xz < -(LP_Koordinata + TK_RasstoyanieDoRasplava_Lpp + 2.0)) THEN
			START PROCESS VYK_ZATRAVKU;
			SET STATE NetSignalaOtDatchikaKasaniya;
		ELSE 
			IF (K_DATCHIKA_KASANIYA) THEN
				LP_Koordinata := FP_Xz;
				START PROCESS KontrolqDendritov;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE PeredachaKoordinatyNachalaZatravlivaniya 
		IF (_FUNCTION_ + PK_PIV_KOORDINATA_KASANIYA_RASPLAVA_PRI_ZATRAVLIVANII + LP_Koordinata) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE AnalizKoordinatyPriPogruzhenii 
		IF (FP_Xz < (LP_Koordinata - TK_Hpogr_Zatravl)) THEN
			START PROCESS VYK_ZATRAVKU;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PauzaNaPlavlenie 
		TIMEOUT TK_TclepogoPlavleniya_Zatravl THEN
			SET STATE OzhidaniePoyavleniyaDiametra;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidaniePoyavleniyaDiametra 
		IF (FlagDkr_TDD) THEN
			IF ((FP_Dkr >= TK_Dmin_Zatravl) AND (FP_Dkr <= TK_Dmaks_Zatravl)) THEN
				STOP;
			END_IF
		END_IF
		TIMEOUT TK_TozhidaniyaDiametra_Zatravl THEN
			SET STATE NetSignalaOtDatchikaDiametra;
		END_TIMEOUT
	END_STATE
	
	STATE NetSignalaOtDatchikaDiametra 
		IF (_FUNCTION_ + PK_PIV_RA_PRI_PLAVL_ZATR_DIAMETR_V_ZAD_DIAPAZONE_NE_OBNARUZHEN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetSignalaOtDatchikaKasaniya 
		IF (_FUNCTION_ + PK_PIV_RA_RASPLAV_NE_OBNARUZHEN) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS KontrolqDendritov
	STATE Nachalo 
		IF (FlagDkr = VKL) THEN
			IF (FP_Dkr > TK_DiametrDendrita) THEN
				SET STATE PeredachaSoobsheniya;
			END_IF
		END_IF
		IF (NOT (PROCESS RA_Zatravlivanie IN STATE ACTIVE)) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniya 
		IF (_FUNCTION_ + PK_PIV_RA_DENDRITY__TREBUETSYA_VMESHATELQSTVO_OPERATORA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT TRI_MINUTY THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RA_StabilizatsiyaRasplava
	VAR
		LP_Schetchik : INT;
		LP_SrednyayaTn : REAL;
		LP_RassoglasovanieTn : REAL;
	END_VAR
	
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_StabilizatsiyaRasplava;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_StabilizatsiyaRasplava IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_StabilizatsiyaRasplava IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS KontrolqStabilizatsiiRasplava;
				LP_Schetchik := 0;
				LP_SrednyayaTn := 0.0;
				IF (TK_Rezhim_StabRaspl = STABILIZATSIYA_PO_MOSHNOSTI) THEN
					ZD_Wipn_K1 := TK_Wipn_K1_PodgStabRaspl;
					STOP PROCESS REG_TR;
					STOP PROCESS REG_ROSTA;
					STOP PROCESS VKL_REG_TN;
					START PROCESS VKL_REG_W_IPN_K1;
					SET STATE PauzaNaStabilizatsiyu;
				ELSE 
					ZD_Wipn_K1 := TK_Wipn_K1_PodgStabRaspl;
					ZD_Tn := FP_Tn;
					ZD_Tr := TK_Tr_StabRaspl;
					SET NEXT;
				END_IF
			END_IF
		END_IF
	END_STATE
	
	STATE VklyuchenieRegulyatoraTr 
		START PROCESS VKL_REG_TR;
		SET NEXT;
	END_STATE
	
	STATE KontrolqZapuskaRegulyatora 
		IF (NOT (PROCESS VKL_REG_TR IN STATE ACTIVE)) THEN
			IF (PROCESS VKL_REG_TR IN STATE STOP) THEN
				SET NEXT;
			ELSE 
				ERROR;
			END_IF
		END_IF
	END_STATE
	
	STATE PauzaNaStabilizatsiyu 
		IF (PROCESS KontrolqStabilizatsiiRasplava IN STATE INACTIVE) THEN
			STOP;
		END_IF
		TIMEOUT TK_Vremya_StabRaspl THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE NevozmozhnoStabilizirovatqsya 
		IF (_FUNCTION_ + PK_PIV_RA_VREMYA_NA_STAB_RASPLAVA_ISTEKLO) THEN
			STOP PROCESS KontrolqStabilizatsiiRasplava;
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqStabilizatsiiRasplava
	VAR
		LP_Tmaks : REAL;
		LP_Tmin : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Tmaks := FP_Tr;
		LP_Tmin := FP_Tr;
		SET NEXT;
	END_STATE
	
	STATE RaschetTmaksTmin 
		IF (LP_Tmaks < FP_Tr) THEN
			LP_Tmaks := FP_Tr;
		END_IF
		IF (LP_Tmin > FP_Tr) THEN
			LP_Tmin := FP_Tr;
		END_IF
		IF ((LP_Tmaks - LP_Tmin) > 6.0) THEN
			SET STATE Nachalo;
		END_IF
		TIMEOUT DVADTSATQ_MINUT THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieORasplavlenii 
		IF (_FUNCTION_ + PK_PIV_RA_STAB_RASPLAVA_ZAVERSHENA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS RA_TP_VyrashivaniePerehodaZatravkaSHejka
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloEtapa 
		Flag_KonetsTP := VYKL;
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_ZATRAVKA_SHEJKA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_SHejka
	STATE Nachalo 
		IF (FlagDkr) THEN
			ZD_Dkr := FP_Dkr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Interpolyatsiya 
		IF (_FUNCTION_ + ZD_Dkr - TK_ZD_Dkr_SHejka > 0.01) THEN
			IF (ZD_Dkr < TK_ZD_Dkr_SHejka) THEN
				ZD_Dkr := ZD_Dkr + 0.01;
			ELSE 
				ZD_Dkr := ZD_Dkr - 0.01;
			END_IF
			SET NEXT;
		ELSE 
			ZD_Dkr := TK_ZD_Dkr_SHejka;
			STOP;
		END_IF
	END_STATE
	
	STATE Pauza2sek 
		TIMEOUT 20 THEN
			SET STATE Interpolyatsiya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS RA_VyrashivanieSHejki
	VAR
		LP_KorrektsiyaTnNachalaSHejki : REAL;
		LP_DlinaHoroshihKuskovSHejki : REAL;
		LP_KoordinataNachalaHoroshegoKuska : REAL;
		LP_Schetchik : LINT;
	END_VAR
	
	STATE Nachalo 
		LP_Schetchik := 0;
		LP_DlinaHoroshihKuskovSHejki := 0.0;
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloSHejki 
		ZD_VzR := TK_VslepogoVyrashivaniya_SHejka;
		ZD_Tn := ZD_Tn + TK_PopravkaTn_SHejka;
		START PROCESS ZAT_RS;
		STOP PROCESS REG_TR;
		STOP PROCESS REG_ROSTA;
		START PROCESS VKL_REG_TN;
		SET NEXT;
	END_STATE
	
	STATE PAUZA_SlepogoVyrashivaniyaSHejki 
		TIMEOUT TK_TclepogoVyrashivaniya_SHejka THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KorrektsiyaTnNachalaSHejki 
		LP_KorrektsiyaTnNachalaSHejki := TK_Popr_kTn_poDkro_SHejka * (FP_Dkr - TK_DkrOzhidaemyj_SHejka);
		IF (LP_KorrektsiyaTnNachalaSHejki < -0.1) THEN
			SET NEXT;
			ZD_Tn := ZD_Tn + LP_KorrektsiyaTnNachalaSHejki;
		ELSE 
			SET STATE InitsializNP_Dkr_RegRosta;
		END_IF
	END_STATE
	
	STATE PeredachaPopravkiTn 
		IF (_FUNCTION_ + PK_PIV_RA_SHEJKA_POPRAVKA_DTN + LP_KorrektsiyaTnNachalaSHejki) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE InitsializNP_Dkr_RegRosta 
		NP_Ki_Dkr := TK_Ki_Dkr_SHejka;
		NP_Kd_Dkr := TK_Kd_Dkr_SHejka;
		NP_Kp_Dkr := TK_Kp_Dkr_SHejka;
		NP_Kz_Dkr := TK_Kz_Dkr_SHejka;
		NP_Pauza_Dkr := TK_Pauza_Dkr_SHejka;
		ZD_Dkr := TK_ZD_Dkr_SHejka;
		START PROCESS PeredachaPIVParametrov_REG_DK;
		NP_Kp_Vrosta := TK_Kp_Vrosta_SHejka;
		NP_Kd_Vrosta := TK_Kd_Vrosta_SHejka;
		NP_Ki_Vrosta := TK_Ki_Vrosta_SHejka;
		NP_Kz_Vrosta := TK_Kz_Vrosta_SHejka;
		NP_Pauza_REG_ROSTA := TK_Pauza_Vrosta_SHejka;
		ZD_Vrosta := TK_ZD_Vrosta_SHejka;
		START PROCESS PeredachaPIVParametrov_REG_ROSTA;
		START PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_SHejka;
		START PROCESS ProgrammnyjSbrosTemperatury;
		START PROCESS REG_DK;
		SET NEXT;
	END_STATE
	
	STATE AnalizDiametraKristalla 
		IF (FP_Dkr < TK_Dkr_NachalaSchetaDliny_SHejka) THEN
			LP_DlinaHoroshihKuskovSHejki := 0.0;
			LP_KoordinataNachalaHoroshegoKuska := FP_Xz;
			START PROCESS UprezhdenieOtryvaSHejki;
			SET NEXT;
		END_IF
		TIMEOUT TRIDTSATQ_MINUT THEN
			SET STATE Soob_SHejkaNeUtonchaetsya;
		END_TIMEOUT
	END_STATE
	
	STATE NaborHoroshihKuskovSHejki 
		IF (FP_Dkr < TK_DkrOtbrakovki_SHejka) THEN
			LP_DlinaHoroshihKuskovSHejki := LP_DlinaHoroshihKuskovSHejki + (FP_Xz - LP_KoordinataNachalaHoroshegoKuska);
			IF (LP_DlinaHoroshihKuskovSHejki >= TK_DlinaHoroshejCHasti_SHejka) THEN
				STOP PROCESS REG_ROSTA;
				STOP PROCESS REG_DK;
				STOP PROCESS UprezhdenieOtryvaSHejki;
				ZD_VzR := TK_ZD_Vrosta_SHejka;
				STOP;
			END_IF
		END_IF
		LP_KoordinataNachalaHoroshegoKuska := FP_Xz;
		LP_Schetchik := LP_Schetchik + 1;
		IF (LP_Schetchik >= 50) THEN
			LP_Schetchik := 0;
			_VOID_ := _FUNCTION_ + IZMN_OP_LkachestvennojSHejki + LP_DlinaHoroshihKuskovSHejki;
		END_IF
		TIMEOUT DVA_CHASA THEN
			SET STATE Soob_SHejkaNeVyrashivaetsya;
		END_TIMEOUT
	END_STATE
	
	STATE Soob_SHejkaNeUtonchaetsya 
		IF (_FUNCTION_ + PK_PIV_RA_SHEJKA_NE_UTONCHAETSYA) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Soob_SHejkaNeVyrashivaetsya 
		STOP PROCESS UprezhdenieOtryvaSHejki;
		IF (_FUNCTION_ + PK_PIV_RA_KACHESTVENNAYA_SHEJKA_NE_RASTET) THEN
			ERROR;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ProgrammnyjSbrosTemperatury
	VAR
		LP_Predydushaya : REAL;
		LP_ProizvodnayaVrosta : REAL;
		ZaderzhkaNaOsrednenieSkorostiRosta : LINT;
	END_VAR
	
	STATE Nachalo 
		ZaderzhkaNaOsrednenieSkorostiRosta := NP_VremyaOsredneniyaVzVrosta * NP_Pauza_Vrosta;
		LP_Predydushaya := FP_Vrosta;
		LP_ProizvodnayaVrosta := 0.0;
		TIMEOUT ZaderzhkaNaOsrednenieSkorostiRosta THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE Pauza 
		TIMEOUT ODNA_MINUTA THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE OtsenkaSkorostiRosta 
		LP_ProizvodnayaVrosta := FP_Vrosta - LP_Predydushaya;
		LP_Predydushaya := FP_Vrosta;
		IF (FP_Vrosta < TK_ZD_Vrosta_SHejka) THEN
			ZD_Tn := ZD_Tn - TK_VponizheniyaTemperatury_SHejka;
			SET STATE Pauza;
		ELSE 
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RaschetSkorostiRostaDiametra
	STATE Nachalo 
		FP_VrazrashivaniyaDkr := 0.0;
		IF (FlagDkr) THEN
			_VOID_ := _FUNCTION_;
			START PROCESS KontrolqIzmeneniyaSkorostiPodrezki;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Pauza 
		TIMEOUT ODNA_SEKUNDA THEN
			IF (FlagDkr) THEN
				FP_VrazrashivaniyaDkr := _FUNCTION_ + 60 + FP_Dkr;
				SET STATE Pauza;
			END_IF
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqIzmeneniyaSkorostiPodrezki
	VAR
		LP_Predydushee : REAL;
	END_VAR
	
	STATE Nachalo 
		LP_Predydushee := (NOT FP_VrazrashivaniyaDkr);
		SET NEXT;
	END_STATE
	
	STATE KontrolqIzmeneniya 
		IF (LP_Predydushee <> FP_VrazrashivaniyaDkr) THEN
			LP_Predydushee := FP_VrazrashivaniyaDkr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaRaschetnogoOperatoru 
		IF (_FUNCTION_ + PK_PIV_FP_Vpodrezki + FP_VrazrashivaniyaDkr) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE Nachalo;
		END_TIMEOUT
	END_STATE
	
	STATE TrafikPauza 
		TIMEOUT ZADERZHKA_NA_RAZGRUZKU_TRAFIKA THEN
			SET STATE KontrolqIzmeneniya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS UprezhdenieOtryvaSHejki
	VAR
		LP_VzSredneeSpasennoe : REAL;
	END_VAR
	
	STATE Nachalo 
		IF (FP_Dkr < TK_BezopasnyjDkr_SHejka) THEN
			IF (NOT (PROCESS PreduprezhdenieOmalomDkr IN STATE ACTIVE)) THEN
				START PROCESS PreduprezhdenieOmalomDkr;
			END_IF
			IF (FP_VzR > TK_VzBezopasnoe_SHejka) THEN
				SET NEXT;
			END_IF
		END_IF
		IF (PROCESS RA_VyrashivanieSHejki IN STATE INACTIVE) THEN
			STOP;
		END_IF
	END_STATE
	
	STATE SoobshenieO_VKL_BezopasnogoRezhimaVyrSHejki 
		IF (_FUNCTION_ + PK_PIV_RA_VKLYUCHEN_BEZOPASNYJ_REZHIM_VYRASHIVANIYA_SHEJKI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Initsializatsiya_VzSredneeI_ZD_Vz 
		LP_VzSredneeSpasennoe := FP_Vrosta;
		ZD_VzR := TK_VzBezopasnoe_SHejka;
		STOP PROCESS REG_DK;
		SET NEXT;
	END_STATE
	
	STATE PAUZA_DvizheniyaNaBezopasnojV 
		ZD_VzR := TK_VzBezopasnoe_SHejka;
		TIMEOUT TK_TbezopasnojSkorosti_SHejka THEN
			SET STATE SoobshenieO_VYK_BezopasnogoRezhimaVyrSHejki;
		END_TIMEOUT
	END_STATE
	
	STATE SoobshenieO_VYK_BezopasnogoRezhimaVyrSHejki 
		IF (_FUNCTION_ + PK_PIV_RA_VYKLYUCHEN_BEZOPASNYJ_REZHIM_VYRASHIVANIYA_SHEJKI) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Initsializatsiya_ZD_Vz 
		ZD_VzR := LP_VzSredneeSpasennoe;
		SET NEXT;
	END_STATE
	
	STATE PAUZA_NaStabilizatsiyuDkr 
		TIMEOUT TK_TstabilizatsiiDkr_SHejka THEN
			SET STATE VklyuchenieRegulyatorov;
		END_TIMEOUT
	END_STATE
	
	STATE VklyuchenieRegulyatorov 
		START PROCESS REG_DK;
		SET STATE Nachalo;
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS PreduprezhdenieOmalomDkr
	STATE Nachalo 
		IF (_FUNCTION_ + PK_PIV_RA_DIAMETR_KRISTALLA_MENQSHE_BEZOPASNOGO) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE PAUZA_30_Sekund 
		TIMEOUT POL_MINUTY THEN
			SET STATE OstanovProtsessa;
		END_TIMEOUT
	END_STATE
	
	STATE OstanovProtsessa 
		STOP;
	END_STATE
	
	STATE NarushenieSvyazi 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RA_TP_VyrashivaniePerehodaSHejkaKonus
	STATE Nachalo 
		STOP PROCESS REG_DK;
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RA_VyrashivanieKonusa
	VAR
		LP_Xz_NachaloKonusa : REAL;
		LP_PopravkaTnKonusa : REAL;
		LP_VremyaRostaDiametra : LINT;
	END_VAR
	
	STATE Nachalo 
		STOP PROCESS REG_DK;
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE OstanovProtsRegulirovaniya_DKiRosta 
		OP_Dkr_NachaloKonusa := FP_Dkr;
		ZD_VzR := TK_Vz_Konus;
		STOP PROCESS REG_DK;
		STOP PROCESS REG_ROSTA;
		ZD_Tn := ZD_Tn + TK_PopravkaTn_Konus;
		START PROCESS KontrolqIzmeneniyaZadanij_ZD_Tn;
		SET NEXT;
	END_STATE
	
	STATE PauzaNaIzmenenieZadaniya_vPKO 
		TIMEOUT PYATQ_SEKUND THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE NachaloEtapa 
		Flag_KonetsTP := VYKL;
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_KONUSA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE Ozhidanie10mmDoKontsaKonusa 
		IF (FP_Dkr >= (TK_DkonusaKonechnyj_Konus - 10.0)) THEN
			LP_VremyaRostaDiametra := 0;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE RaschetVremeniRazrashivaniyaDiametraDoZadannogo 
		LP_VremyaRostaDiametra := LP_VremyaRostaDiametra + 1;
		IF (FP_Dkr >= TK_DkonusaKonechnyj_Konus) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE VychislenieSkorostiRosta 
		FP_SkorostqRostaKonusa := 10.0 * 600.0 / LP_VremyaRostaDiametra;
		IF (Flag_KonetsTP = VYKL) THEN
			SET NEXT;
		ELSE 
			SET STATE PeredachaSoobsheniyaOKontseTP;
		END_IF
	END_STATE
	
	STATE PrekrashenieTP 
		IF (_FUNCTION_ + PK_PIV_RA_PREKRATITQ_OTRABOTKU_TP) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_VyrashivaniePerehodaKonusTSilindr
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				ZD_Vrosta := ZD_VzR + TK_K1_KonTSil + FP_SkorostqRostaKonusa * TK_K2_KonTSil;
				ZD_VzR := ZD_Vrosta;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqZavorota 
		IF (FP_Dkr < TK_DkrTSilindra_KonTSil) THEN
			IF (FP_VrazrashivaniyaDkr < TK_VrazrashivaniyaGr_KonTSil) THEN
				STOP;
			END_IF
		ELSE 
			IF (FP_VrazrashivaniyaDkr < (TK_VrazrashivaniyaGr_KonTSil / 3.0)) THEN
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RA_StabilizatsiyaTSilindra
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskInterpolyatsiiDkr_priPerehode 
		IF (FlagDkr) THEN
			NP_Kp_Dkr := TK_Kp_Dkr_StabTSil;
			NP_Kd_Dkr := TK_Kd_Dkr_StabTSil;
			NP_Ki_Dkr := TK_Ki_Dkr_StabTSil;
			NP_Kz_Dkr := TK_Kz_Dkr_StabTSil;
			NP_Pauza_Dkr := TK_Pauza_Dkr_StabTSil;
			START PROCESS PeredachaPIVParametrov_REG_DK;
			ZD_Vrosta := TK_VzStabNachalqnaya_StabTSil;
			ZD_VzR := TK_VzStabNachalqnaya_StabTSil;
			ZD_Dkr := FP_Dkr;
			ZD_Tn := ZD_Tn + TK_PopravkaTn_StabTSil;
			START PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_TSilindr;
			START PROCESS REG_DK;
			SET NEXT;
		END_IF
		TIMEOUT ODNA_MINUTA THEN
			ERROR;
		END_TIMEOUT
	END_STATE
	
	STATE ZavershenieEtapa 
		STOP;
	END_STATE
	
END_PROCESS

PROCESS RA_TP_VyrashivanieTSilindra
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_VyrashivanieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivanieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE OzhidanieKontsaPerehodaKZadannomuDiametru 
		IF (PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_TSilindr IN STATE INACTIVE) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE NastrojkaREG_DKdlyaVyrashivaniyaTSilindra 
		START PROCESS KontrolqOkonchaniyaTSilindra;
		START PROCESS REG_DK;
		NP_Kp_Vrosta := TK_Kp_Vrosta_TSilindr;
		NP_Kd_Vrosta := TK_Kd_Vrosta_TSilindr;
		NP_Ki_Vrosta := TK_Ki_Vrosta_TSilindr;
		NP_Kz_Vrosta := TK_Kz_Vrosta_TSilindr;
		NP_Pauza_REG_ROSTA := TK_Pauza_Vrosta_TSilindr;
		START PROCESS PeredachaPIVParametrov_REG_ROSTA;
		SET NEXT;
	END_STATE
	
	STATE ZapuskKontrOkonchTSilindra 
		IF (NOT (PROCESS KontrolqOkonchaniyaTSilindra IN STATE ACTIVE)) THEN
			START PROCESS KontrolqOkonchaniyaTSilindra;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE NachaloEtapa 
		TIMEOUT PYATQ_SEKUND THEN
			Flag_KonetsTP := VYKL;
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_TSILINDRA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa_iUslovijSmenyKoeffitsientovREG_DK 
		IF ((FP_Lmonokristalla - FP_Lnachala_tekushej_chasti_monokristalla) > 100.0) THEN
			NP_Kp_Dkr := TK_Kp_Dkr_TSilindr;
			NP_Ki_Dkr := TK_Ki_Dkr_TSilindr;
			NP_Kd_Dkr := TK_Kd_Dkr_TSilindr;
			NP_Kz_Dkr := TK_Kz_Dkr_TSilindr;
			NP_Pauza_Dkr := TK_Pauza_Dkr_TSilindr;
			START PROCESS PeredachaPIVParametrov_REG_DK;
			SET NEXT;
		END_IF
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ProgrammnayaInterpolyatsiyaZD_Dkr_TSilindr
	VAR
		LP_VremyaPauzy : LINT;
	END_VAR
	
	STATE Nachalo 
		IF (FlagDkr) THEN
			ZD_Dkr := FP_Dkr;
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Interpolyatsiya 
		IF (_FUNCTION_ + ZD_Dkr - TK_DkrTSilindra_KonTSil > 0.01) THEN
			IF (ZD_Dkr < TK_DkrTSilindra_KonTSil) THEN
				ZD_Dkr := ZD_Dkr + 0.0005;
			ELSE 
				ZD_Dkr := ZD_Dkr - 0.0005;
			END_IF
		ELSE 
			ZD_Dkr := TK_DkrTSilindra_KonTSil;
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS KontrolqOkonchaniyaTSilindra
	STATE Nachalo 
		IF (FP_Lmonokristalla > TK_PorogovayaLkr_TSilindr) THEN
			SET NEXT;
		ELSE 
			IF (FP_Mkremniya_v_tigle <= TK_PorogovayaMrasplava_TSilindr) THEN
				SET STATE OgranicheniePoMasse;
			END_IF
		END_IF
	END_STATE
	
	STATE OgranicheniePoDline 
		IF (_FUNCTION_ + PK_PIV_RA_OGRANICHENIE_PO_DLINE_TSIL_PEREHOD_NA_OBR_KONUS) THEN
			SET STATE SoobsheniePrekratitqTP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE SoobsheniePrekratitqTP;
		END_TIMEOUT
	END_STATE
	
	STATE OgranicheniePoMasse 
		IF (_FUNCTION_ + PK_PIV_RA_OGRANICHENIE_PO_MASSE_TSIL_PEREHOD_NA_OBR_KONUS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE SoobsheniePrekratitqTP;
		END_TIMEOUT
	END_STATE
	
	STATE SoobsheniePrekratitqTP 
		IF (_FUNCTION_ + PK_PIV_RA_PREKRATITQ_OTRABOTKU_TP) THEN
			STOP;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS RA_TP_VyrashivaniePerehodaTSilindrObratnyjKonus
	STATE Nachalo 
		STOP PROCESS REG_UR;
		STOP PROCESS REG_DK;
		START PROCESS VYK_TIGELQ;
		START PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloEtapa 
		Flag_KonetsTP := VYKL;
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_PEREHODA_TSILINDR_OBR_KONUS) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_TP_VyrashivanieObratnogoKonusa
	STATE Nachalo 
		STOP PROCESS REG_UR;
		STOP PROCESS REG_DK;
		START PROCESS VYK_TIGELQ;
		START PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_VyrashivaniePerehodaTSilObratKonusI_OK IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloEtapa 
		Flag_KonetsTP := VYKL;
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_VYRASHIVANIE_OBRATNOGO_KONUSA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OstanovProtsesaZAT_RS_OK 
		STOP;
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS ZAT_RS_OK
	STATE Nachalo 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS RA_OtryvKristalla
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_OtryvKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_OtryvKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_OtryvKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskProtsessovOtryvaKristalla 
		START PROCESS ZAT_RS_OTRYV_KRISTALLA;
		START PROCESS KontrolqOtryva_OtryvKristalla;
		SET NEXT;
	END_STATE
	
	STATE KontrolqSrabatyvaniyaKontrolyaOtryva 
		IF (NOT (PROCESS KontrolqOtryva_OtryvKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqOtryva_OtryvKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				START PROCESS VYK_TIG_VR;
				START PROCESS VYK_TIGELQ;
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE KontrolqVyklyucheniyaTiglya 
		IF (NOT (PROCESS VYK_TIGELQ IN STATE ACTIVE)) THEN
			IF (PROCESS VYK_TIGELQ IN STATE ERROR) THEN
				ERROR;
			ELSE 
				STOP;
			END_IF
		END_IF
	END_STATE
	
END_PROCESS

PROCESS ZAT_RS_OTRYV_KRISTALLA
	STATE Nachalo 
		ERROR PROCESS REG_KZ_UR;
		ERROR PROCESS ZAT_RK;
		IF (NOT (PROCESS ZAT_RS IN STATE ACTIVE)) THEN
			START PROCESS ZAT_RS;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE KorrektirovkaZadaniyaVzR 
		ZD_VzR := ZD_VzR + _FUNCTION_ + TK_UskoreniePriOtryveKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaNaMaksimalqnuyuVz 
		IF (ZD_VzR > NP_MaksimalqnayaVzR) THEN
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE Pauza_1sek 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE ProverkaAktivnostiZAT_RS;
		END_TIMEOUT
	END_STATE
	
	STATE ProverkaAktivnostiZAT_RS 
		IF (PROCESS ZAT_RS IN STATE ACTIVE) THEN
			SET STATE KorrektirovkaZadaniyaVzR;
		ELSE 
			ERROR;
		END_IF
	END_STATE
	
END_PROCESS

PROCESS VR_TIG_OTRYV_KRISTALLA
	STATE Nachalo 
		IF (NOT (PROCESS TIG_VR IN STATE ACTIVE)) THEN
			START PROCESS TIG_VR;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE ProverkaVrasheniyaTiglya 
		IF (ZD_Wt >= 0.0) THEN
			ZD_Wt := ZD_Wt - _FUNCTION_ + TK_DELQTA_Wt_OTRYV_KRISTALLA;
		ELSE 
			ZD_Wt := ZD_Wt + _FUNCTION_ + TK_DELQTA_Wt_OTRYV_KRISTALLA;
		END_IF
		SET NEXT;
	END_STATE
	
	STATE ProverkaVrasheniyaTiglyaPosleKorrektsii 
		IF (_FUNCTION_ + ZD_Wt < _FUNCTION_ + TK_DELQTA_Wt_OTRYV_KRISTALLA) THEN
			ZD_Wt := 0.0;
			STOP;
		ELSE 
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PauzaOdnaSekunda 
		TIMEOUT ODNA_SEKUNDA THEN
			SET STATE ProverkaVrasheniyaTiglya;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS KontrolqOtryva_OtryvKristalla
	STATE Nachalo 
		IF (K_DATCHIKA_KASANIYA) THEN
			IF (NOT (PROCESS ZAT_RS_OTRYV_KRISTALLA IN STATE ACTIVE)) THEN
				IF (PROCESS ZAT_RS_OTRYV_KRISTALLA IN STATE ERROR) THEN
					ERROR;
				ELSE 
					SET STATE SoobshenieOtryvKristalla;
				END_IF
			END_IF
		ELSE 
			STOP PROCESS ZAT_RS_OTRYV_KRISTALLA;
			ZD_VzR := TK_VzPosleOtryvaKristalla;
			STOP;
		END_IF
	END_STATE
	
	STATE SoobshenieOtryvKristalla 
		IF (_FUNCTION_ + PK_PIV_RA_NET_OTRYVA_KRISTALLA) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_TP_OhlazhdenieKristalla
	STATE Nachalo 
		START PROCESS KontrolqSTS_RA_OhlazhdenieKristalla;
		SET NEXT;
	END_STATE
	
	STATE ProverkaRezulqtatovKontrolya 
		IF (NOT (PROCESS KontrolqSTS_RA_OhlazhdenieKristalla IN STATE ACTIVE)) THEN
			IF (PROCESS KontrolqSTS_RA_OhlazhdenieKristalla IN STATE ERROR) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE NachaloEtapa 
		Flag_KonetsTP := VYKL;
		SET NEXT;
	END_STATE
	
	STATE PeredachaSoobsheniyaZapuskTP 
		IF (_FUNCTION_ + PK_PIV_RA_ZAPUSTITQ_TP_OHLAZHDENIE_KRISTALLA) THEN
			SET NEXT;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieKontsaEtapa 
		IF (Flag_KonetsTP <> VYKL) THEN
			SET NEXT;
		END_IF
	END_STATE
	
	STATE PeredachaSoobsheniyaOKontseTP 
		IF (Flag_KonetsTP = PK_PIV_NORMALQNYJ_KONETS_TP) THEN
			IF (_FUNCTION_ + PK_PIV_NORMALQNYJ_KONETS_TP) THEN
				STOP;
			END_IF
		ELSE 
			IF (_FUNCTION_ + PK_PIV_KONETS_TP_PO_OSHIBKE) THEN
				ERROR;
			END_IF
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NarushenieSvyazi 
		ERROR;
	END_STATE
	
END_PROCESS

PROCESS RA_PodgotovkaRazgruzkeKristalla
	STATE Nachalo 
		START PROCESS VYK_IPN;
		START PROCESS VYK_REG_D;
		START PROCESS VYK_REG_RG;
		START PROCESS OTKR_VM14;
		SET NEXT;
	END_STATE
	
	STATE Otkachka20min 
		TIMEOUT DVADTSATQ_MINUT THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE KontrolqOtkrVM14 
		IF (NOT (PROCESS OTKR_VM14 IN STATE ACTIVE)) THEN
			IF (PROCESS OTKR_VM14 IN STATE ERROR) THEN
				ERROR;
			END_IF
			SET NEXT;
		END_IF
	END_STATE
	
	STATE ZapuskProtsessovVyklyucheniyaAVD 
		START PROCESS VYK_AVD1;
		START PROCESS VYK_AVD2;
		SET NEXT;
	END_STATE
	
	STATE ProverkaVyklyucheniyaAVD1_2 
		IF ((PROCESS VYK_AVD1 IN STATE INACTIVE) AND (PROCESS VYK_AVD2 IN STATE INACTIVE)) THEN
			IF ((PROCESS VYK_AVD1 IN STATE ERROR) OR (PROCESS VYK_AVD2 IN STATE ERROR)) THEN
				ERROR;
			ELSE 
				SET NEXT;
			END_IF
		END_IF
	END_STATE
	
	STATE ZapuskKontrolyaNatekaniya 
		START PROCESS IzmerenieNatekaniya;
		SET NEXT;
	END_STATE
	
	STATE PauzaSekunda 
		TIMEOUT ODNA_SEKUNDA THEN
			SET NEXT;
		END_TIMEOUT
	END_STATE
	
	STATE PauzaPeredRezhimomRR 
		TIMEOUT TK_PeriodKontrolya_KontrNat THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS ZapuskProtsessovKontrolyaStykovok
	STATE Nachalo 
		START PROCESS KontrolqStykovki1;
		START PROCESS KontrolqStykovki2;
		START PROCESS KontrolqStykovki3;
		START PROCESS KontrolqStykovki4;
		START PROCESS KontrolqStykovki5;
		START PROCESS KontrolqStykovki6;
		START PROCESS KontrolqStykovki7;
		START PROCESS KontrolqStykovki8;
		STOP;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki1
	STATE Nachalo 
		IF (K_STYKOVKI_1 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_1) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_1) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_1 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_1 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki2
	STATE Nachalo 
		IF (K_STYKOVKI_2 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_2) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_2) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_2 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_2 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki3
	STATE Nachalo 
		IF (K_STYKOVKI_3 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_3) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_3) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_3 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_3 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki4
	STATE Nachalo 
		IF (K_STYKOVKI_4 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_4) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_4) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_4 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_4 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki5
	STATE Nachalo 
		IF (K_STYKOVKI_5 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_5) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_5) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_5 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_5 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki6
	STATE Nachalo 
		IF (K_STYKOVKI_6 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_6) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_6) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_6 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_6 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki7
	STATE Nachalo 
		IF (K_STYKOVKI_7 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_7) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_7) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_7 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_7 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS KontrolqStykovki8
	STATE Nachalo 
		IF (K_STYKOVKI_8 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		ELSE 
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE EstqStykovka 
		IF (_FUNCTION_ + PK_PIV_ESTQ_STYK_8) THEN
			SET STATE OzhidanieRazryvaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE NetStykovki 
		IF (_FUNCTION_ + PK_PIV_NET_STYKA_8) THEN
			SET STATE OzhidanieVosstanovleniyaStyka;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			SET STATE NarushenieSvyazi;
		END_TIMEOUT
	END_STATE
	
	STATE OzhidanieRazryvaStyka 
		IF (K_STYKOVKI_8 = NET_STYKOVKI) THEN
			SET STATE NetStykovki;
		END_IF
	END_STATE
	
	STATE OzhidanieVosstanovleniyaStyka 
		IF (K_STYKOVKI_8 = ESTQ_STYKOVKA) THEN
			SET STATE EstqStykovka;
		END_IF
	END_STATE
	
	STATE NarushenieSvyazi 
		SET STATE Nachalo;
	END_STATE
	
END_PROCESS

PROCESS TEST1
	STATE Nachalo 
		IF (_FUNCTION_ + REG_VzR_VKLYUCHEN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS TEST2
	STATE Nachalo 
		IF (_FUNCTION_ + REG_VzR_VYKLYUCHEN) THEN
			STOP;
		END_IF
		TIMEOUT TAJMAUT_NA_SVYAZQ_S_PIV THEN
			STOP;
		END_TIMEOUT
	END_STATE
	
END_PROCESS

PROCESS ZAPISQ_DANNYH_V_TSAP
	STATE Nachalo LOOPED 
		_VOID_ := _FUNCTION_ + NOMER_KANALA_TSAP_ZD_Iptd + ZD_Iptd;
		_VOID_ := _FUNCTION_ + NOMER_KANALA_TSAP_ZD_Qgaza + ZD_Qgaza;
		_VOID_ := _FUNCTION_;
	END_STATE
	
END_PROCESS

END_PROGRAM
